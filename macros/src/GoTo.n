using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Utility;

namespace Nemerle.Imperative.GoTo
{
  macro GoToMacro(@label : PExpr)
  syntax ("goto", @label)
  {
    Implementation.DoTransformGoTo(Macros.ImplicitCTX(), @label)
  }

  macro LabelMacro(@label : PExpr)
  syntax ("label", @label)
  {
    Implementation.DoTransformLabel(Macros.ImplicitCTX(), @label)
  }

  module Implementation
  {
    private GetLabelMap(typer : Typer) : Hashtable[Name, PExprLabel]
    {
      mutable labelMap = typer.CurrentMethodBuilder.UserData[typeof(PExprLabel)] :> Hashtable[Name, PExprLabel];
      when (labelMap == null)
      {
        labelMap = Hashtable.[Name, PExprLabel]();
        typer.CurrentMethodBuilder.UserData[typeof(PExprLabel)] = labelMap;
      }
      labelMap
    }

    private GetLabel(typer : Typer, name : Name) : PExprLabel
    {
      def labelMap = GetLabelMap(typer);
      mutable @label;
      unless (labelMap.TryGetValue(name, out @label))
      {
        @label = PExprLabel(typer.Manager, name);
        labelMap[name] = @label;
      }
      @label
    }
    
    public DoTransformGoTo(typer : Typer, @label : PExpr) : PExpr
    {
      Macros.DefineCTX(typer);
      
      match (@label)
      {
        | <[ $(name : name) ]> => GetLabel(typer, name).Goto()
        | _ => Message.Error(@label.Location, "Expected simple name."); <[ () ]>
      }
    }

    public DoTransformLabel(typer : Typer, @label : PExpr) : PExpr
    {
      Macros.DefineCTX(typer);
      
      match (@label)
      {
        | <[ $(name : name) ]> => 
          GetLabel(typer, name).Label(@label.Location)
        | _ => Message.Error(@label.Location, "Expected simple name."); <[ () ]>
      }
    }
  }
  
  public sealed class PExprLabel
  {
    private static mutable _nextId         : int;
    private                _manager        : ManagerClass;
    private                _name           : Name;
    private                _id             : int;
    private        mutable _isLabelDefined : bool;

    public this(manager : ManagerClass, name : Name)
    {
      _manager = manager;
      _name    = name;
      _nextId++;
      _id      = _nextId;
    }

    public Goto()  : PExpr
    {
      PExpr.Typed(Location.Default, TExpr.Goto(_manager.InternalType.Void, _id, 1))
    }

    public Label(loc : Location) : PExpr
    {
      if (_isLabelDefined)
      {
        def message = $"Label '$_name' ($_id) multiply defined";
        Message.Error(message);
        <[ () ]>
      }
      else
        try PExpr.Typed(Location.Default, TExpr.Label(_manager.InternalType.Void, _id, TExpr.DefaultValue(loc, _manager.InternalType.Void)))
        //try PExpr.Typed(loc, TExpr.Label(loc, _manager.InternalType.Void, _id, TExpr.Literal(loc, _manager.InternalType.Void, Literal.Void())))
        finally _isLabelDefined = true;
    }
  }
}
