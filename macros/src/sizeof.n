using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Core
{
  macro sizeof(type : PExpr)
  {
    sizeofImpl.DoTransform(Macros.ImplicitCTX(), type)
  }
  
  module sizeofImpl
  {
    public DoTransform(typer : Typer, type : PExpr) : PExpr
    {
      Macros.DefineCTX(typer);
      def builtin = typer.InternalType;
      def ty = typer.BindFixedType(type);
      
      if      (ty.Equals(builtin.SByte) || ty.Equals(builtin.Byte)   || ty.Equals(builtin.Boolean)) <[ 1 ]>
      else if (ty.Equals(builtin.Int16) || ty.Equals(builtin.UInt16) || ty.Equals(builtin.Char))    <[ 2 ]>
      else if (ty.Equals(builtin.Int32) || ty.Equals(builtin.UInt32) || ty.Equals(builtin.Single))  <[ 4 ]>
      else if (ty.Equals(builtin.Int64) || ty.Equals(builtin.UInt64) || ty.Equals(builtin.Double))  <[ 8 ]>
      else if (ty.Equals(builtin.Decimal))                                                          <[ 16 ]>
      else Message.FatalError(type.Location, "`sizeof' of `$type' unsupported yet")
    }
  }
}
