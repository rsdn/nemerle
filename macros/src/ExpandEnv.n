/*
 * Copyright (c) 2003-2008 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler;
using Nemerle.Imperative;
using Nemerle.Macros;
using Nemerle.Text;

using System;
using System.Globalization;
using System.IO;
using System.Text.RegularExpressions;
using System.Text;

namespace Nemerle.Utility
{
  macro ExpandEnv(str, defaults = null)
  {
    def version = ExpandEnvHelper.Expand(str, defaults);

    <[ $(version : string) ]>;
  }

  module ExpandEnvHelper
  {
    VarRegex : Regex = Regex(@"\$([\w_][\w\d_]*)");

    public Expand(strExpr : PExpr, defaults: PExpr) : string
    {
      def str = match (strExpr)
      {
        | Literal(Literal.String(s)) => s
        | _ => Message.FatalError(strExpr.Location, "Expected string literal.")
      }


      mutable vars = Set();
      foreach (m is Match in VarRegex.Matches(str))
      {
        vars = vars.Add(m.Groups[1].Value);
      }

      def defaultValues = System.Collections.Generic.Dictionary();
      match (defaults)
      {
        | null => ()
        | <[ Defaults(..$parms) ]> =>
          foreach (d in parms)
          {
            | <[ $var = $value ]>  =>
              def varName = var.ToString();

              def value = match (value)
              {
                | Literal(Literal.String(s)) => s
                | _ => Message.Error(value.Location, "Default value must be a string."); ""
              }

              unless (vars.Contains(varName))
                Message.Error(var.Location, $"$('$')$varName not found in the template.");

              when (defaultValues.ContainsKey(varName))
                Message.Error(var.Location, $"Duplicate $varName.");

              defaultValues[varName] = value;
            | _ =>
              Message.Error(d.Location, "Default value expression must have 'x = \"y\"' format.");
              ()
          }
        | _ =>
          Message.FatalError(defaults.Location, "Defaults expression must have Defaults(x = \"y\", x1 = \"y1\",...)' format.");
      }

      def path = lazy({
         def loc = strExpr.Location;
        if (loc.IsSourceFileAvailable)
          Path.GetDirectoryName(Path.GetFullPath(loc.File))
        else
            Directory.GetCurrentDirectory();
      });

      def evaluateVar(var)
      {
        def getSpecial()
        {
          match (var)
          {
            | "GitTag" =>
              match (GitRevisionHelper.GetRevisionGeneric(path))
              {
                | Some( (tag, _rev, _commit) ) => tag
                | None() => null
              }
            | "GitRevision" =>
              match (GitRevisionHelper.GetRevisionGeneric(path))
              {
                | Some( (_tag, rev, _commit) ) => rev
                | None() => null
              }
            | _ => null
          }
        }
        def getEnvironment()
        {
          Environment.GetEnvironmentVariable(var)
        }
        def getDefault()
        {
          match (defaultValues.ContainsKey(var))
          {
            | true =>
              defaultValues[var]
            | false =>
              Message.Error(strExpr.Location, $"$var is not defined and have not default value.");
              ""
          }
        }

        getEnvironment() ?? getSpecial() ?? getDefault()
      }

      VarRegex.Replace(str, MatchEvaluator(m => {
        def varName = m.Groups[1].Value;
          evaluateVar(varName)
      }));
    }
  }
}
