using Nemerle;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Collections;
 
namespace Nemerle.Surround
{
  [Nemerle.MacroUsage (Nemerle.MacroPhase.BeforeInheritance, Nemerle.MacroTargets.Assembly)] 
  macro DefineSurround(name : string, useTryFinally : bool, beforeExpr, afterExpr)
  {
    beforeExpr.Location = beforeExpr.Location.AsGenerated();
    afterExpr.Location  = afterExpr.Location.AsGenerated();
    SurroundWithImpl._surroundWithMap[name] = (useTryFinally, beforeExpr, afterExpr);
  }
  
  macro SurroundWith(expr, params names : list [PExpr])
  syntax ("surroundwith", "(", names, ")", expr)
  {
    def typer = Nemerle.Macros.ImplicitCTX();
    
    when (names.IsEmpty && typer.IsMainPass)
      Message.Error ("The surroundwith exprssion mast have argumetns.");
      
    def makeSurroundWith(name, expr)
    {
      match (SurroundWithImpl._surroundWithMap.TryGetValue(name.ToString()))
      {
        | ((true,  beforeExpr, afterExpr), true) => <[ { $beforeExpr; try { $expr; } finally { $afterExpr; } } ]>
        | ((false, beforeExpr, afterExpr), true) => <[ { $beforeExpr; $expr; $afterExpr; } ]>
        | _ => 
          when (typer.IsMainPass)
            Message.Error (name.Location,
              $"The surroundwith exprssion with name '$name' not defined by assembly level DefineSurround attribute.");
          <[ { $(PExpr.Error(name.Location)); $expr } ]>
      }
    }
    
    names.FoldRight(expr, (name, expr) => makeSurroundWith(name, expr));
  }
  
  module SurroundWithImpl
  {
    internal _surroundWithMap : Hashtable[string, bool * PExpr * PExpr] = Hashtable();
  }
}
