/*
 * Copyright (c) 2003-2008 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler;
using Nemerle.Imperative;
using Nemerle.Macros;
using Nemerle.Text;

using System;
using System.Globalization;
using System.IO;
using System.Text.RegularExpressions;
using System.Text;

namespace Nemerle.Utility
{
  [Nemerle.MacroUsage (Nemerle.MacroPhase.WithTypedMembers,
                       Nemerle.MacroTargets.Class,
                       Inherited = false, AllowMultiple = true)]
  macro ExtensionPattern (par : TypeBuilder, e)
  {
    def get_name (e) {
      | <[ $(id : dyn) ]> => Some (id)
      | _ => None ()
    }

    match (e) {
      | <[ $(id : dyn) ( .. $ids ) = $pat ]>
        when ids.ForAll (fun (x) { get_name (x).IsSome }) =>
        def ids = ids.Map (get_name).Map (Option.UnSome);
        par.GetModifiers ().AddCustomAttribute (<[
          Nemerle.Internal.ExtensionPatternEncodingAttribute (
            $(id : string),
            $(ids.ToString (",") : string),
            $(pat.ToString () : string))
        ]>);

        def ext =
          ExtensionPattern(
            parent      = par,
            name        = id,
            pattern     = pat,
            identifiers = ids,
            temporary   = false);
        par.AddExtensionPattern (ext)

      | _ =>
        Message.FatalError ("ExtensionPattern syntax is ``name (id_1, "
                            "..., id_n) = pattern''")
    }
  }

  [MacroUsage(MacroPhase.WithTypedMembers, MacroTargets.Assembly)]
  macro ExtensionPattern(typeName : PExpr, defenition : PExpr)
  {
    ExtensionPatternImpl.DoTransform(Macros.ImplicitCTX(), typeName, defenition)
  }

  module ExtensionPatternImpl
  {
    public DoTransform(typer : Typer, typeName : PExpr, defenition : PExpr) : void
    {
      Macros.DefineCTX(typer);
      def ty = typer.BindFixedType(typeName);
      
      when (ty.Equals(typer.InternalType.Object))
        return;
        
      when (ty.TypeInfo == null)
        Message.Error(typeName.Location, "The 'typeName' must be a name of user defined type (like class).");
      
      AddExtensionPattern(ty.TypeInfo, defenition);
    }

    AddExtensionPattern(typeInfo : TypeInfo, defenition : PExpr) : void
    {
      def get_name (defenition)
      {
        | <[ $(id : dyn) ]> => Some (id)
        | _ => None ()
      }

      match (defenition)
      {
        | <[ $(name : dyn) ( .. $ids ) = $pattern ]> when ids.ForAll(x => get_name(x).IsSome) =>
          def identifiers = ids.Map(get_name).Map (Option.UnSome);
          def ext = ExtensionPattern(typeInfo, name, identifiers, pattern, temporary = true);
          typeInfo.AddExtensionPattern(ext)

        | _ => Message.FatalError("ExtensionPattern syntax is ``name (id_1, ..., id_n) = pattern''")
      }
    }
  }
}
