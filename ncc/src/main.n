using Nemerle.Collections;
using Nemerle.Utility;
using Nemerle.IO;
using Nemerle.Compiler;

using System;
using System.Diagnostics;
using System.Reflection;
using SCG = System.Collections.Generic;

namespace Nemerle.CommandlineCompiler
{
  module MainClass
  {
    mutable stack_kilos : int = 0;
    mutable Manager : ManagerClass;
    mutable Options : CompilationOptions;

    Platform : int = Environment.OSVersion.Platform :> int;
    IsUnix : bool = IO.Path.DirectorySeparatorChar == '/';

    public Main() : void
    {
      def is64bitProcess = IntPtr.Size == 8;
      Options = CompilationOptions();
      Manager = ManagerClass(Options);
      Manager.InitOutput(Console.Out);
      parse_command_line();
      if (stack_kilos != 0 || needs_bigger_stack())
      {
        when (stack_kilos == 0)
          stack_kilos = 20 * 1024 * if (is64bitProcess) 8 else 1;
        def thread = Threading.Thread(main_with_catching, stack_kilos * 1024);
        thread.Name = "Main compiler thread";
        thread.Start();
        thread.Join();
      }
      else
        main_with_catching()
    }

    needs_bigger_stack() : bool
    {
      typeof(object).Assembly.GetType("System.RuntimeType") != null ||
      typeof(object).Assembly.GetType("System.MonoType") != null
    }

    main_with_catching() : void
    {
      try
      {
        def compilerDirectory = IO.Path.GetDirectoryName(Uri(typeof(MainClass).Assembly.CodeBase).LocalPath);
        Options.LibraryPaths.Add(compilerDirectory);

        // run compilation with already created options
        Manager.Run ()
      }
      catch
      {
        | e is IO.FileNotFoundException => bomb(e, e.Message)
        | e is Recovery                 => bomb(e, "got Recovery exception")
        | e is BailOutException         => bomb(e, "got bail out exception")
        | e is ArgumentException        => bomb(e, "got ArgumentException (" + e.Message + ")")
        | e is MatchFailureException    => bomb(e, "got MatchFailureException exception")
        | e is ICE                      => bomb(e, e.Message)
        | e is AssertionException       => bomb(e, e.Message)
        | e is AssemblyFindException    => bomb(e, e.Message, exitValue=3)
        | e                             => bomb(e, $ "got some unknown exception of type $(e.GetType()): $(e.Message)")
      }

      Message.MaybeBailout();
    }

    bomb(e : Exception, msg : string, exitValue : int = 2) : void
    {
      Manager.KillProgressBar();
      Message.MaybeBailout(true);
      Message.Error($<#internal compiler error: $msg. $(e.StackTrace.Replace("\r\n", "¦").Replace("\n", "¦"))#>);
      Environment.Exit(exitValue);
    }

    parse_command_line() : void
    {
      def cOptions = Options;

      def print_version ()
      {
        def compilerAssembly = typeof(ManagerClass).Assembly;
        def version = compilerAssembly.GetName().Version;
        def copyright = (compilerAssembly.GetCustomAttributes(typeof(Reflection.AssemblyCopyrightAttribute), false)[0]
            :> Reflection.AssemblyCopyrightAttribute).Copyright;
        Console.Error.Write(
          $ "Nemerle Compiler (ncc) version $version (git)\n"
            "$copyright \n"
            "All rights reserved.\n");
        Environment.Exit(0);
      }

      mutable help_opts = [];
      def print_help ()
      {
        Console.WriteLine (Getopt.Usage (help_opts));
        Environment.Exit(0);
      }

      def addSourceFile(path)
      {
        def fullPath = IO.Path.GetFullPath(path);
        unless (IO.File.Exists(fullPath))
          Message.FatalError($"File '$path' ('$fullPath') file does not exist.");
        cOptions.Sources.Add(FileUtils.GetSource(fullPath))
      }

      def opts = cOptions.GetCommonOptions()
      + [
        Getopt.CliOption.Int (name = "-stack-size",
                     aliases = [],
                     help = "Set stack size of the compiler to INT megabytes",
                     handler = fun (k) { stack_kilos = k * 1024; }),
        Getopt.CliOption.Int (name = "-stack-size-k",
                     aliases = [],
                     help = "NOHELP",
                     handler = fun (k) { stack_kilos = k; }),
        Getopt.CliOption.Flag (name = "-version",
                     aliases = ["-V"],
                     help = "Output version information and exit",
                     handler = print_version),
        Getopt.CliOption.Flag (name = "-help",
                     aliases = ["-h", "-?"],
                     help = "Display this usage message and exit",
                     handler = print_help),
        Getopt.CliOption.NonOption (name = "",
                          help = "Specify file to compile",
                          handler = addSourceFile)
      ];
      help_opts = opts;

      Getopt.Parse(opts);

      when (cOptions.Sources.Count == 0)
        Getopt.Error("need at least one file to compile\n" + Getopt.Usage(opts))
    }
  }
}
