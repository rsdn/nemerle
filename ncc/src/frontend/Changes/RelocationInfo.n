using Nemerle.Assertions;
using Nemerle.Compiler;
using Nemerle.Imperative;
using Nemerle.Utility;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Diagnostics;
using System.Linq;

using Typed = Nemerle.Compiler.Typedtree;
using SCG = System.Collections.Generic;

namespace Nemerle.Compiler
{
  public class RelocationInfo
  {
    public Changes        : IChanges;
    public FileIndex      : int;
    private _visited      : HashSet[object] = HashSet(ReferenceEqualityComparer.Default);

    public this(changes : IChanges)
    {
      FileIndex           = changes.After.FileIndex;
      Changes             = changes;
      assert2(FileIndex == changes.Before.FileIndex);
    }

    public virtual IsVisited(obj : object) : bool
    {
      _visited.Contains(obj)
    }

    public virtual SetVisited(obj : object) : void
    {
      when (_visited.Add(obj))
      {
        assert2(true);
      }
    }

    override public ToString() : string
    {
      Changes.ToString()
    }

    sealed class ReferenceEqualityComparer : IEqualityComparer, IEqualityComparer[object]
    {
      public static Default : ReferenceEqualityComparer = ReferenceEqualityComparer();

      private this() { }

      public new Equals(x : object, y : object) : bool { x == y }

      public GetHashCode(obj : object) : int { RuntimeHelpers.GetHashCode(obj) }
    }
  }
}
