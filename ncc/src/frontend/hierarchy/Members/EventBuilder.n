using System;
using System.Diagnostics;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler.Typedtree;
using Nemerle.Imperative;
using Nemerle.Utility;

using PT  = Nemerle.Compiler.Parsetree;

namespace Nemerle.Compiler
{
  public partial class EventBuilder : MemberBuilder, IEvent, IBackendMember
  {
    adder : MethodBuilder;
    remover : MethodBuilder;

    internal storage_field : FieldBuilder;

    /// Parsed representation (AST) of event.
    /// Note: available only in CompletionMode
    /// (if Manager.IsIntelliSenseMode = true)
    public new Ast : PT.ClassMember.Event { get { base.Ast :> PT.ClassMember.Event } }

    public this (par : TypeBuilder, eventAst : PT.ClassMember.Event) {
      base (par, eventAst);

      ty = par.BindFixedType (eventAst.ty);

      // prevent closurising `this'
      def self = this;

      when (eventAst.field != null)
      {
        def update_mfunction (meth : PT.ClassMember.Function, which_accessor : string)
        {
          if (declaring_type.IsInterface)
            meth.body = FunBody.Abstract()
          else {
            def lock_expr =
              if (IsStatic) <[
                typeof ($(declaring_type.ParsedName : name))
              ]>
              else <[ this ]>;
            def field_name = eventAst.field.PName;

            // according to C# spec, we have to add locks
            // http://www.jaggersoft.com/csharp_standard/17.7.1.htm
            def bd =
              if (which_accessor == "add")
                <[ lock ($lock_expr) { $(field_name : name) += $(field_name.NewName ("value") : name) } ]>;
              else
                <[ lock ($lock_expr) { $(field_name : name) -= $(field_name.NewName ("value") : name) } ]>;
            meth.body = FunBody.Parsed (bd)
          }
        }

        unless (declaring_type.IsInterface)
        {
          when (IsStatic)
            eventAst.field.modifiers.mods |= NemerleModifiers.Static;

          storage_field = FieldBuilder (par, eventAst.field);
          declaring_type.AddMember (storage_field);
        }
        update_mfunction (eventAst.add, "add");
        update_mfunction (eventAst.remove, "remove");
      }

      def make_method (mfunc : PT.ClassMember.Function)
      {
        when (mfunc.Env == null)
          mfunc.SetEnv(this.Env);
        UpdateEmbeddedModifiers (self.attributes, ref mfunc.modifiers.mods);
        def meth' = Manager.ComponentsFactory.CreateMethodBuilder (self.declaring_type, mfunc);
        self.declaring_type.AddMember (meth');
        meth'.MarkWithSpecialName();
        meth'
      }

      adder = make_method (eventAst.add);
      remover = make_method (eventAst.remove);
      Manager.MarkAsUsed (remover);

      ty.CheckAccessibility (this, accessibility);
    }

    public override MemberKind : MemberKinds {  get { MemberKinds.Event } }

    public GetAdder() : MethodBuilder
    {
      adder
    }

    public GetRemover() : MethodBuilder
    {
      remover
    }

    /**
     * Performs attributes checks for event definition.
     */
    public override CheckAttributes() : void
    {
      // most of the checks are common with the properties and methods:
      check_method_like_attributes("event", "events");
    }

    protected override MacroTarget : MacroTargets
    {
      get { MacroTargets.Event }
    }

    protected override MacroSelfParams : list [PT.SyntaxElement]
    {
      get { [PT.SyntaxElement.TypeBuilder (declaring_type), PT.SyntaxElement.EventBuilder (this)] }
    }
  }
}
