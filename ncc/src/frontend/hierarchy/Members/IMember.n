using System;
using Nemerle.Compiler;
using Nemerle.Compiler.SolverMacros;
using Nemerle.Compiler.Typedtree;
using Nemerle.Imperative;

using Nemerle.Collections;
using Nemerle.Utility;

namespace Nemerle.Compiler
{
  public interface IMember
  {
    IsConstructor : bool             { get; }
    Location      : Location         { get; }
    IsObsolete    : bool             { get; }
    IsPrivate     : bool             { get; }
    DeclaringType : TypeInfo         { get; }
    Name          : string           { get; }
    NameLocation  : Location         { get; }
    MemberKind    : MemberKinds      { get; }
    IsStatic      : bool             { get; } // types are always static
    HasBeenUsed   : bool             { get; set; } // for the 'unused' warnings
    IsConditional : bool             { get; }
    Attributes    : NemerleModifiers { get; }

    GetMemType() : FixedType;
    CanAccess(source : TypeInfo) : bool;
    CanAccess(memberTypeInfo : TypeInfo, currentTypeInfo : TypeInfo, isThisAccess : bool) : bool;
    GetConditions() : list[string];
    GetModifiers () : AttributesAndModifiers;
    IsCustomAttributeDefined(attributeFullName : string) : bool;
  }
} // ns
