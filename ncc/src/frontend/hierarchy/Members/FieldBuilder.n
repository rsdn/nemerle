using System;
using System.Diagnostics;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler.Typedtree;
using Nemerle.Imperative;
using Nemerle.Utility;

using PT = Nemerle.Compiler.Parsetree;

namespace Nemerle.Compiler
{
  public partial class FieldBuilder : MemberBuilder, IField
  {
    [Accessor(flags = WantSetter)]
    mutable const_value : Literal;
    mutable has_been_assigned = false;

    /// Parsed representation (AST) of field.
    public new Ast : PT.ClassMember.Field { get { base.Ast :> PT.ClassMember.Field } }

    public this(par : TypeBuilder, fieldAst : PT.ClassMember.Field)
    {
      base(par, fieldAst);

      _initializerLocation = fieldAst.BodyLocation;

      // check if field's type is valid
      match (fieldAst.ty) {
        | <[ _ ]> => Message.Error("type inference for fields is available only when assigning literal value to them")
        | _ => ()
      }

      ty = par.BindFixedType(fieldAst.ty);

      when (ty.Equals(InternalType.Void))
        Message.Error($"$this has void type, which is not allowed");

      ty.CheckAccessibility(this, accessibility);
    }

    public override MemberKind : MemberKinds {  get { MemberKinds.Field } }

    ///////////////////////////////////////////////////////////////////////////
    // Initializer info

    [Accessor] mutable _initializerLocation  : Location;

    public IsInitializerPresent : bool
    {
      get { InitializerLocation.FileIndex != 0 }
    }

    public EnsureCompiled() : void
    {
      LookupInitializerMethod().EnsureCompiled();
    }

    public LookupInitializerMethod() : MethodBuilder
    {
      if (IsInitializerPresent)
      {
        //Trace.Assert(DeclaringType.LookupMemberAvailable);
        assert(DeclaringType.LookupMemberAvailable);
        def members = DeclaringType.LookupMemberImpl("_N_field_initialiser__" + Name);
        match (members)
        {
          | [method is MethodBuilder] => method
          | _ => throw ApplicationException($"Initialiser for $Name not found.");
        }
      }
      else
      {
        //Trace.Assert(IsInitializerPresent);
        throw ApplicationException("IsInitializerPresent == false");
      }
    }

    public override ResetCodeCache() : void
    {
      LookupInitializerMethod().ResetCodeCache();
    }

    public InitializerTokens : Token.BracesGroup
    {
      get
      {
        LookupInitializerMethod().BodyTokens;
      }
    }

    public InitializerParsed : PT.PExpr
    {
      get
      {
        LookupInitializerMethod().BodyParsed;
      }
    }

    public InitializerTyped : TExpr
    {
      get
      {
        LookupInitializerMethod().BodyTyped;
      }
    }

    //
    //////////////////////////////////////////////////////////////////////////

    public IsMutable : bool
    {
      get { attributes %&& NemerleModifiers.Mutable }
    }

    public IsVolatile : bool
    {
      get { attributes %&& NemerleModifiers.Volatile }
    }

    public IsLiteral : bool
    {
      get
      {
        !IsMutable && IsStatic && const_value != null
      }
    }

    public HasBeenAssigned : bool
    {
      get { has_been_assigned }
      set {
        unless (has_been_assigned) {
          HasBeenUsed = value; // true for triggering obsolete warning
          has_been_assigned = true;
        }
      }
    }

    public GetValue() : Literal
    {
      assert(IsLiteral, Name);
      const_value
    }

    /**
     * Performs attributes checks for field definition.
     */
    public override CheckAttributes() : void
    {
      when (declaring_type.IsInterface)
        Message.FatalError2(loc, "fields cannot be defined inside interface");

      check_for_invalid_attr(NemerleModifiers.Extern, "extern");
      check_for_invalid_attr(NemerleModifiers.Abstract, "abstract");
      check_for_invalid_attr(NemerleModifiers.Virtual, "virtual");
      check_for_invalid_attr(NemerleModifiers.Sealed, "sealed");
      check_for_invalid_attr(NemerleModifiers.Override, "override");
      check_for_invalid_attr(NemerleModifiers.Struct, "struct");
      check_for_invalid_attr(NemerleModifiers.Macro, "macro");
      check_for_invalid_attr(NemerleModifiers.Partial, "partial");

      // check the access attributes for consistency
      match (TypeBuilder.CheckAccessAttributes(attributes))
      {
        | Some(msg) => Message.FatalError2(loc, $"$msg for $(this)")
        | _ => ()
      }

      // check for non-mutable / volatile consistency
      when(!IsMutable && IsVolatile)
        Message.Error(loc, $"only mutable fields are allowed to be volatile in $(this)");

      // do not allow protected and protected internal methods in structures
      when (declaring_type.IsStruct && IsProtected)
      {
        def msg = if (IsInternal) "protected internal" else "protected";

        Message.Error(loc, "fields defined in a struct are not allowed to be " + msg + "in " + ToString())
      }
    }

    protected override MacroTarget : MacroTargets
    {
      get { MacroTargets.Field }
    }

    protected override MacroSelfParams : list [PT.SyntaxElement]
    {
      get { [PT.SyntaxElement.TypeBuilder(declaring_type), PT.SyntaxElement.FieldBuilder(this)] }
    }
  }
}
