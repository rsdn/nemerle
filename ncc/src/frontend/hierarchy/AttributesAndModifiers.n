using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler.Typedtree;
using Nemerle.Utility;

using System.IO;

using SY = System;
using PT = Nemerle.Compiler.Parsetree;

namespace Nemerle.Compiler
{
  public partial class AttributesAndModifiers
  {
    public IsCustomAttributeDefined([NotNull] attributeFullName : string, [NotNull] env : GlobalEnv) : bool
    {
      FindAttribute(env.Manager.LookupTypeInfo(attributeFullName), env).IsSome
    }

    /// Finds first attribute of specified type
    public FindAttribute ([NotNull] lookingFor : TypeInfo, [NotNull] env : GlobalEnv) : option [PT.PExpr]
    {
      def compiler = env.Manager.AttributeCompiler;
      foreach(expr in custom_attrs)
        when(compiler.ResolveAttribute(env, expr, lookingFor) is Some(_))
          Nemerle.Imperative.Return(Some(expr));
      None()
    }

    /// Finds attribute of specified type
    public FindAttributeWithArgs([NotNull] lookingFor : TypeInfo, [NotNull] env : GlobalEnv) : option[PT.PExpr * list [PT.PExpr]]
    {
      def compiler = env.Manager.AttributeCompiler;
      foreach(expr in custom_attrs)
        when(compiler.ResolveAttribute(env, expr, lookingFor) is Some((_, args)))
          Nemerle.Imperative.Return(Some(expr, args));
      None()
    }

    /// Finds all attributes of specified type
    public FindAttributesWithArgs([NotNull] lookingFor : TypeInfo, [NotNull] env : GlobalEnv) : list[PT.PExpr * list [PT.PExpr]]
    {
      def compiler = env.Manager.AttributeCompiler;
      mutable result = [];
      foreach(expr in custom_attrs)
        when(compiler.ResolveAttribute(env, expr, lookingFor) is Some((_, args)))
          result ::= (expr, args);
      result
    }

    public AttributeTypes([NotNull] env : GlobalEnv) : list[TypeInfo]
    {
      def compiler = env.Manager.AttributeCompiler;
      mutable result = [];
      foreach(expr in custom_attrs)
        when(compiler.ResolveAttribute(env, expr) is Some((ti, _)))
          result ::= ti;
      result
    }
  } // class
} // namespace
