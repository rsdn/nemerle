using Nemerle.Compiler;
using Nemerle.Collections;
using Nemerle.Internal;
using Nemerle.Utility;

using System.Diagnostics;

namespace Nemerle.Compiler.Parsetree
{
  [Record]
  public variant PExpr : ParsedBase
  {
    | Wildcard         // `_' used mainly in patterns, but also in `_ = ignored'
    | Void             // `void' used only in types
    | As               { pat : PExpr; name : Splicable; }
    | Is               { pat : PExpr; ty : PExpr; }
    | Where            { name : PExpr; fields : PExpr; }
    | Match           { expr : PExpr; cases : list [PMatchCase]; mutable expr_loc : Location;
                        this(loc : Location, expr : PExpr, cases : list [PMatchCase]) { this(loc, expr, cases, Location.Default); }
                        this(expr : PExpr, cases : list [PMatchCase]) { this(expr, cases, Location.Default); }
                      }

    | Ref             {
                        mutable _name : Name;
                        public name : Name
                        {
                          get
                          {
                            _name
                          }
                          set
                          {
                            _name = value;
                          }
                        }

                        public new this(name : Name)
                        {
                          base(if (name == null || name.Location == Location.Default) LocationStack.Top() else name.Location);
                          this.name = name;
                        }

                        public new this(loc : Location, name : Name)
                        {
                          base(loc);
                          this.name = name;
                        }
                      }
    | Member
      {
        obj : PExpr; member : Splicable;

        public new this(obj : PExpr, member : PExpr.Ref)
        {
          if (obj.Location.IsGenerated && !member.Location.IsGenerated)
            base(member.Location);
          else
            base();

          this.obj  = obj;
          this.member = Splicable.Name(member.Location, member.name);
        }

        public new this(obj : PExpr, member : Splicable)
        {
          def loc1 = obj.Location;
          def loc2 = member.Location;

          if (loc1.IsGeneratedOrEmpty && !loc2.IsGenerated)
            base(member.Location);
          else if (loc2.IsSourceAvailable && loc1.IsSourceAvailable)
            base(loc1 + loc2);
          else
            base();

          this.obj    = obj;
          this.member = member;
        }
      }
    | Call             { func : PExpr; parms : list [PExpr]; }
    | GenericSpecifier { func : PExpr; generic_parms : list [PExpr]; }
    | ListLiteral      { elements : list [PExpr]; }
    | Assign           { target : PExpr; source : PExpr; }
    | DefMutable       { name : PExpr; val : PExpr; }
    | Define           { pattern : PExpr; val : PExpr; }
    | DefFunctions     { funs : list [FunctionDecl]; }
    | Lambda           { decl : FunctionDecl; }
    | Throw            { exn : PExpr; }
    | Try              { body : PExpr; cases : list [TryCase]; }
    | TryFinally       { body : PExpr; handler : PExpr; }
    | Literal          { val : Nemerle.Compiler.Literal; }
    | This
    | Base             { ty : option[PExpr];
                         public this() { this(option.None()); }
                         public this(loc : Location) { this(loc, option.None()); }
                         public this(ty : PExpr) { this(option.Some(ty)); }
                         public this(loc : Location, ty : PExpr) { this(loc, option.Some(ty)); }
                       }
    | Typeof           { ty : PExpr; }
    | TypeConversion   { expr : PExpr; ty : PExpr; }
    | TypeEnforcement  { expr : PExpr; ty : PExpr; }
    | Sequence         {
                         body : list[PExpr];
                         OpeningBracket : Location { get; set; }
                         ClosingBracket : Location { get; set; }

                         [RecordCtor]
                         public this([MappedMember("body")] body : list[PExpr])
                         {
                           this.body = body;
                         }

                         [RecordCtor]
                         public this(loc : Location, [MappedMember("body")] body : list[PExpr])
                         {
                           base(loc);
                           this.body = body;
                         }
                       }
    | Tuple            { args : list[PExpr];
                         [RecordIgnore] public mutable argsCount : int;

                         public static Create(loc : Location, args : list[PExpr]) : PExpr.Tuple
                         {
                           PExpr.Tuple(loc, args, args.Length);
                         }
                         public static Create(args : list[PExpr]) : PExpr.Tuple
                         {
                           PExpr.Tuple(args.EnclosingLocation(), args, args.Length);
                         }
                         public this(args : list[PExpr], argsCount : int)
                         { this(args); this.argsCount = argsCount; }

                         public this(loc : Location, args : list[PExpr], argsCount : int)
                         { this(loc, args); this.argsCount = argsCount; }
                       }
    | Array            { rank : PExpr; args : PExpr; }
    | EmptyArray       { sizes : list [PExpr]; }
    | Indexer          { obj : PExpr; args : list [PExpr]; }
    | ParmByRef        { parm : PExpr; }
    | ParmOut          { parm : PExpr; }
    | Error // placeholder of missing tree (where some errors occured)
      {
        msg : object;
        public this()
        {
          msg = null;
        }
        public this(location : Location)
        {
          base(location);
          msg = null;
        }
      }

    // macros stuff
    | MacroCall        { name : Name; ns : NamespaceTree.Node; parms : list [SyntaxElement]; }
    | Quoted           { body : SyntaxElement; }
    | Spliced          { body : PExpr; }
    | ToComplete       { body : Name; }
    | Ellipsis         { body : PExpr; }
    | Typed            { body : Typedtree.TExpr; }
    | TypedPattern     { body : Typedtree.Pattern; }
    | TypedType        { body : TypeVar; }

    [RecordIgnore]
    public Token : Token { get; set; }

    public override ToString() : string { PrettyPrint.SprintExpr(None(), this); }

    // transforms dot-separated identifier to the parse-tree expression
    public static FromQualifiedIdentifier(manager : ManagerClass, qid : string) : PExpr
    {
      if (string.IsNullOrEmpty(qid)) null
      else {
        def split = qid.Split(array['.'], System.StringSplitOptions.None);
        mutable expr = <[ $(Name(split [0], manager.MacroColors.UseColor, manager.MacroColors.UseContext) : name) ]>;
        for (mutable i = 1; i < split.Length; i++)
          expr = <[ $expr . $(Name(split [i], manager.MacroColors.UseColor, manager.MacroColors.UseContext) : name) ]>;
        expr
      }
    }
  }
} // namespace
