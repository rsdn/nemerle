using Nemerle.Compiler;
using Nemerle.Collections;
using Nemerle.Utility;

using System.Diagnostics;

using T = Nemerle.Compiler.Typedtree;

namespace Nemerle.Compiler.Parsetree
{
  public variant SyntaxElement
  {
    | Expression       { body : PExpr; }
    | PMatchCase       { body : Parsetree.PMatchCase; }
    | Function         { body : FunctionDecl; }
    | Parameter        { body : PParameter; }
    | TType            { body : PExpr; }

    | RawToken         { body : Token; }

    | ClassMember      { body : Parsetree.ClassMember; }
    | TypeBuilder      { body : Compiler.TypeBuilder; }
    | FieldBuilder     { body : Compiler.FieldBuilder; }
    | MethodBuilder    { body : Compiler.MethodBuilder; }
    | PropertyBuilder  { body : Compiler.PropertyBuilder; }
    | EventBuilder     { body : Compiler.EventBuilder; }
    | ParameterBuilder { body : Typedtree.TParameter; }

    public Location : Location
    {
      get
      {
        match (this)
        {
          | Expression(null)    | Parameter(null)        | TType(null)
          | ClassMember(null)   | ParameterBuilder(null) | FieldBuilder(null)
          | MethodBuilder(null) | PropertyBuilder (null) | EventBuilder(null)
          | PMatchCase(null)     | Function(null)         | RawToken(null)
          | TypeBuilder(null)                      => Location.Default;

          | Expression       (body : Located)
          | Parameter        (body : Located)
          | TType            (body : Located)
          | ClassMember      (body : Located)
          | ParameterBuilder (body : Located)       => body.Location;
          | FieldBuilder     (body : MemberBuilder)
          | MethodBuilder    (body : MemberBuilder)
          | PropertyBuilder  (body : MemberBuilder)
          | EventBuilder     (body : MemberBuilder) => body.Location;
          | PMatchCase        (body)                 => body.Location;
          | Function         (body)                 => body.Location;
          | RawToken         (body)                 => body.Location;
          | TypeBuilder      (body)                 => body.Location;
        }
      }
    }

    public override ToString() : string
    {
      match (this)
      {
        | SyntaxElement.Expression(null) => ""
        | SyntaxElement.Expression(body) => body.ToString()
        | SyntaxElement.TType(body)      => "ttype: " + body.ToString()
        | SyntaxElement.RawToken(t)      => t.ToString()
        | SyntaxElement.PMatchCase        => "match case"
        | SyntaxElement.Function         => "function"
        | SyntaxElement.Parameter        => "parameter"
        | SyntaxElement.ClassMember      => "ClassMember"
        | SyntaxElement.TypeBuilder      => "TypeBuilder"
        | SyntaxElement.FieldBuilder     => "FieldBuilder"
        | SyntaxElement.MethodBuilder    => "MethodBuilder"
        | SyntaxElement.PropertyBuilder  => "PropertyBuilder"
        | SyntaxElement.EventBuilder     => "EventBuilder"
        | SyntaxElement.ParameterBuilder => "ParameterBuilder"
      }
    }
  }
} // namespace
