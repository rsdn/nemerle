using Nemerle.Compiler;
using Nemerle.Collections;
using Nemerle.Utility;

using System.Diagnostics;

using T = Nemerle.Compiler.Typedtree;

namespace Nemerle.Compiler.Parsetree
{
  public type Typarms = TypePparms;
  
  [Record]
  public class TypePparms
  {
    public tyvars : list [Splicable];
    public constraints : list [Constraint];

    public static Empty : TypePparms = TypePparms ([], []);

    public override ToString() : string
    {
      if (tyvars.IsEmpty) "" else ($"[..$tyvars]")
    }

    public virtual IsCopyOfExisting : bool { get { false } }
    public virtual Substitute (ty : FixedType) : TypeVar { ty }
    public virtual ExistingTyvars : list [StaticTypeVar] { get { null } }
  }
} // namespace
