using System.Diagnostics;
using System.Globalization;
using System.Math;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Utility;

namespace Nemerle.Compiler
{
  [Record]
  public struct TextPoint : System.IComparable[TextPoint]
  {
    public Line   : int;
    public Column : int;

    public static @== (x : TextPoint, y : TextPoint) : bool { x.Line == y.Line && x.Column == y.Column }
    public static @!= (x : TextPoint, y : TextPoint) : bool { !(x == y) }
    public static @<  (x : TextPoint, y : TextPoint) : bool { x.Line < y.Line || (x.Line == y.Line && x.Column < y.Column) }
    public static @>  (x : TextPoint, y : TextPoint) : bool { y < x }
    public static @<= (x : TextPoint, y : TextPoint) : bool { !(y < x) }
    public static @>= (x : TextPoint, y : TextPoint) : bool { !(x < y) }

    public ToPosition(sourceSnapshot : SourceSnapshot) : int { sourceSnapshot.LineColumnToPosition(LineColumn(Line, Column)) }

    public Offcet(other : TextPoint) : TextPoint { Offcet(other.Line - 1, other.Column - 1) }

    public Offcet(lineOffset : int, columnOffset : int) : TextPoint
    {
      TextPoint(Line + lineOffset, if (lineOffset > 0) columnOffset + 1
                                   else                Column + columnOffset)
    }

    public CompareTo(other : TextPoint) : int
    {
      if (this == other)      0
      else if (this > other)  1
      else                   -1
    }

    override public ToString() : string
    {
      $"$Line:$Column"
    }
  }
} // Nemerle.Compiler
