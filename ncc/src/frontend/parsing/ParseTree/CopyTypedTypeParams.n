using Nemerle.Compiler;
using Nemerle.Collections;
using Nemerle.Utility;

using System.Diagnostics;

using T = Nemerle.Compiler.Typedtree;

namespace Nemerle.Compiler.Parsetree
{
  public type CopyTypedTyparms = CopyTypedTypeParams;
  
  /// The specified list of typed type parameters will be used as template for new type parameters.
  /// Compiler will also perform substitution of references to old parameters in type/method signature into references
  /// to fresh type parameters
  public class CopyTypedTypeParams : SubstitutingTypeParams
  {
    fresh_vars : list [StaticTypeVar];

    public this(template_tyvars : list [StaticTypeVar])
    {
      this(template_tyvars, null)
    }

    public this(template_tyvars : list [StaticTypeVar], subst : Subst)
    {
      def (fsubst, fresh_vars) = StaticTypeVar.CopyList(template_tyvars);
      when (subst != null)
        fsubst.AddSubst(subst);
      base(fsubst);
      this.fresh_vars = fresh_vars;
    }

    public override IsCopyOfExisting : bool { get { true } }
    public override ExistingTyvars : list[StaticTypeVar] { get { fresh_vars } }
  }
} // namespace
