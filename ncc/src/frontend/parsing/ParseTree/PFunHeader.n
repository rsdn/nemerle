using Nemerle.Compiler;
using Nemerle.Collections;
using Nemerle.Utility;

using System.Diagnostics;

using T = Nemerle.Compiler.Typedtree;

namespace Nemerle.Compiler.Parsetree
{
  public class PFunHeader : ParsedBase, IParametersProvider
  {
    public   mutable TypeParameters : TypePparms;
    public   mutable SplicableName  : Splicable; // is changed when typing lambda
    public   mutable ReturnType     : PExpr;
    public   mutable Parameters     : list[PParameter];

    public new TypedObject : T.TFunHeader { get { base.TypedObject :> T.TFunHeader } }

    // Values of following properties don't changing while typing process.

    public ParsedTypeParameters          : TypePparms;
    public ParsedSplicableName           : Splicable;
    public ParsedReturnType              : PExpr;
    public ParsedParameters              : list[PParameter];
    [Accessor(flags=WantSetter), RecordIgnore] internal mutable _parsedParametersOpenLocation  : Location;
    [Accessor(flags=WantSetter), RecordIgnore] internal mutable _parsedParametersCloseLocation : Location;
    [RecordIgnore]
    public ColonLocation : Location { get; private set; }

    /// Include header and body location.
    public FunLocation : Location { get; internal set; }
    
    public this(loc : Location, name : Splicable, returnType : PExpr, parameters : list [PParameter])
    {
      this(loc, TypePparms.Empty, name, returnType, parameters);
    }

    public this(typeParameters : TypePparms, name : Splicable, returnType : PExpr, parameters : list [PParameter])
    {
      this(LocationStack.Top(), typeParameters, name, returnType, parameters)
    }

    public this(
      loc                     : Location,
      typeParameters          : TypePparms,
      name                    : Splicable,
      returnType              : PExpr,
      parameters              : list[PParameter]
    )
    {
      this(loc, typeParameters, name, returnType, parameters, Location.Default, Location.Default, Location.Default)
    }

    public this(
      loc                     : Location,
      typeParameters          : TypePparms,
      name                    : Splicable,
      returnType              : PExpr,
      parameters              : list[PParameter],
      parametersOpenLocation  : Location,
      parametersCloseLocation : Location,
      colonLoc                : Location
    )
    {
      base(loc);
      ParsedTypeParameters           = typeParameters;
      ParsedSplicableName            = name;
      ParsedParameters               = parameters;
      ParsedReturnType               = returnType;
      TypeParameters                 = typeParameters;
      SplicableName                  = name;
      Parameters                     = parameters;
      ReturnType                     = returnType;
      ColonLocation                  = colonLoc;
      _parsedParametersOpenLocation  = parametersOpenLocation;
      _parsedParametersCloseLocation = parametersCloseLocation;
    }

    public Name : string { get { ParsedSplicableName.ToString() } }

    public PName : Name { get { SplicableName.GetName() } }

    private ParametersDeclarations : list[PParameter] implements IParametersProvider.ParametersDeclarations
    { get { Parameters } }

    public ParametersReferences : list [PExpr]        implements IParametersProvider.ParametersReferences
    { get { Parameters.Map(_.ReferencingExpr) } }

    public GetTypeReferences() : Seq[PExpr]
    {
      yield ReturnType;
      
      foreach (p in Parameters)
        foreach (x in p.GetTypeReferences())
          yield x;
    }
    
    public override ToString() : string
    {
      $"$Name$TypeParameters(..$Parameters) : $ReturnType"
    }
  }
} // namespace
