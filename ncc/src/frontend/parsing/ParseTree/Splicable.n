using Nemerle.Compiler;
using Nemerle.Collections;
using Nemerle.Utility;

using System.Diagnostics;

namespace Nemerle.Compiler.Parsetree
{
  [Record]
  public variant Splicable : ParsedBase, System.IEquatable[Splicable]
  {
    | Name
      {
        body : Parsetree.Name;

        public this(nameRef : PExpr.Ref)
        {
          base(if (nameRef == null) Location.Default else nameRef.Location);

          this.body = nameRef.name;
        }

        public new this(body : Parsetree.Name)
        {
          base(if (body == null) Location.Default else body.Location);

          this.body = body;
        }
      }
    | Expression
      {
        expr : PExpr;
        [RecordIgnore] public mutable env : GlobalEnv;
        public this(expr : PExpr, env : GlobalEnv)
        {
          base(if (expr == null) Location.Default else expr.Location);
          this.expr = expr;
          this.env = env;
        }
        public this(loc : Location, expr : PExpr, env : GlobalEnv)
        {
          base(loc);
          this.expr = expr; this.env = env;
        }
      }

    | HalfId { prefix : Parsetree.Name; }

    //[RecordIgnore] public TypedObject : IMember { get; internal set; }

    public GetName() : Parsetree.Name
    {
      match (this)
      {
        | Splicable.Name(x) => x
        | _ => throw System.ArgumentException("GetName() called for option " + this.ToString())
      }
    }

    [Nemerle.OverrideObjectEquals]
    public Equals(other : Splicable) : bool
      implements System.IEquatable[Splicable].Equals
    {
      match ((this, other))
      {
        | (HalfId(n1), HalfId(n2))
        | (Name(n1), Name(n2)) => n1.Equals(n2)
        | _ => false
      }
    }

    public GetIdentifier() : string
    {
      match (this)
      {
        | Splicable.Name(x) => x.Id
        | _ => throw System.ArgumentException("GetIdList() called for option " + this.ToString())
      }
    }

    override public ToString() : string
    {
      match (this)
      {
        | Splicable.Name(x)          => x.Id
        | Splicable.Expression(expr) => expr.ToString()
        | Splicable.HalfId(prefix)   => prefix.Id
        | null                       => ""
      }
    }
  }
} // namespace
