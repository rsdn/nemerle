using Nemerle.Compiler;
using Nemerle.Collections;
using Nemerle.Utility;

using System.Diagnostics;

namespace Nemerle.Compiler.Parsetree
{
  public variant TopDeclaration : MemberBase
  {
    | Class
      {
        mutable t_extends : list[PExpr];
                decls     : list[ClassMember];
      }

    | Alias { ty : PExpr; }

    | Interface
      {
        mutable t_extends : list [PExpr];
        methods : list [ClassMember]; // only iface_member
      }

    | Variant
      {
        mutable t_extends : list [PExpr];
        mutable decls : list [ClassMember];
      }

    | VariantOption { decls : list [ClassMember]; }

    | Macro
      {
        header : PFunHeader;
        synt : list [PExpr];
        expr : PExpr;
      }

    | Delegate
      {
        header : PFunHeader;
        [RecordIgnore] ReturnValueModifiers : AttributesAndModifiers  { get; set; }
      }

    | Enum
      {
        t_extends : list [PExpr];
        decls : list[ClassMember];
      }

    public GetTypeReferences() : Seq[PExpr]
    {
      foreach (x in GetSubtypesReferences())
        yield x;

      foreach (x in GetMembersTypeReferences())
        yield x;
    }

    public GetSubtypesReferences() : Seq[PExpr]
    {
      match (this)
      {
        | Class        (t_extends = types)
        | Interface    (t_extends = types)
        | Variant      (t_extends = types)
        | Enum         (t_extends = types) => types
        | Alias(ty)     => [ty]
        | Delegate      => []
        | Macro         => []
        | VariantOption => []
      }
    }

    public GetMembersTypeReferences() : Seq[PExpr]
    {
      foreach (member in GetMembers())
      {
        | TypeDeclaration => ()
        | Field(ty)  => yield ty;
        | Property as prop =>
          foreach (parameter in prop.parameters)
            foreach (x in parameter.GetTypeReferences())
              yield x;

          yield prop.returnType;

        | Function as fn   =>
          foreach (x in fn.implemented)
            yield x;

          foreach (x in fn.header.GetTypeReferences())
            yield x;
        | Event as e => yield e.ty;
        | EnumOption(value) =>
          when (value is Some(x))
            yield x;
      }
    }

    [RecordIgnore]
    public DeclaredTypeParameters : TypePparms;

    public DeclaredTypeParametersCount : int
    {
      get { if (DeclaredTypeParameters != null) DeclaredTypeParameters.tyvars.Length else 0 }
    }

    public mutable typarms : TypePparms;

    public TypeParameters : TypePparms { get { typarms } set { typarms = value; } }

    public TypeParametersCount : int
    {
      get { if (typarms != null) typarms.tyvars.Length else 0 }
    }
    /// If this TopDeclaration nested in other TopDeclaration
    /// this property contain referens to it.  This property set to null
    /// if it is top level declaration.
    [Accessor, RecordIgnore] internal mutable _definedIn : TopDeclaration;
    [Accessor, RecordIgnore] internal mutable _typeBuilder : TypeBuilder;
    /// This location used to outlining tegion as start of outpining
    [Accessor, RecordIgnore] internal mutable _headerLocation  : Location;

    public new this(loc : Location, name : Splicable, modifiers : AttributesAndModifiers, typarms : TypePparms)
    {
      base(loc, name, modifiers);

      this.typarms                = typarms;
      this.DeclaredTypeParameters = typarms;
    }

    public new this(name : Splicable, modifiers : AttributesAndModifiers, typarms : TypePparms)
    {
      base(name, modifiers);

      this.typarms                = typarms;
      this.DeclaredTypeParameters = typarms;
    }

    public new this(name : Name, modifiers : AttributesAndModifiers, typarms : TypePparms)
    {
      base(Splicable.Name(name), modifiers);

      this.typarms                = typarms;
      this.DeclaredTypeParameters = typarms;
    }

    public this (tp : TypePparms)
    {
      this ();
      typarms = tp;
    }

    public this () { base (Splicable.Name (Name ("")), AttributesAndModifiers()) }

    public FullQualifiedName : string
    {
      get
      {
        def makeName(td)
        {
          if (td.DefinedIn != null)
            makeName(td.DefinedIn) + "." + td.Name
          else
            td.Name
        }

        match (TryGetEnv())
        {
          | Some(env) when env != null =>
            def msName = env.CurrentNamespace.GetDisplayName();
            if (string.IsNullOrEmpty(msName))
              makeName(this)
            else
              msName + "." + makeName(this);

          | _ => makeName(this)
        }
      }
    }

    public FullName : string
    {
      get
      {
        def makeName(td)
        {
          def tyParam = if (td.typarms == null) "" else td.typarms.ToString();

          if (td.DefinedIn != null)
            $"$(makeName(td.DefinedIn)).$(td.Name)$tyParam"
          else
            td.Name + tyParam
        }

        match (TryGetEnv())
        {
          | Some(env) when env != null =>
            def msName = env.CurrentNamespace.GetDisplayName();
            if (string.IsNullOrEmpty(msName))
              makeName(this)
            else
              msName + "." + makeName(this);

          | _ => makeName(this)
        }
      }
    }

    public GetMembers() : list[ClassMember]
    {
      match (this)
      {
        | Class        (decls   = decls)
        | Interface    (methods = decls)
        | Variant      (decls   = decls)
        | VariantOption(decls   = decls)
        | Enum         (decls   = decls) => decls
        | Delegate | Macro | Alias       => []
      }
    }

    public GetAllInnerTypes() : list[TopDeclaration]
    {
      mutable res = [];
      def getInner(x)
      {
        | Class        (decls   = decls)
        | Interface    (methods = decls)
        | Variant      (decls   = decls)
        | VariantOption(decls   = decls)  =>
          foreach (ClassMember.TypeDeclaration(td) in decls)
          {
            res ::= td;
            getInner(td);
          }

        | Enum | Delegate | Macro | Alias => ()
      }

      getInner(this);
      res
    }

    public override ToString() : string
    {
      def name = this.Name;
      match (this)
      {
        | Class                => $"class $name"
        | Alias(ty)            => $"type $name = $ty"
        | Interface            => $"interface $name"
        | Variant              => $"variant $name"
        | VariantOption        => $"| $name"
        | Macro (header, _, _) => $"macro $name($header)"
        | Delegate (header)    => $"delegate $name: $header"
        | Enum                 => $"enum $name"
      }
    }
  }
} // namespace
