using Nemerle.Compiler;
using Nemerle.Collections;
using Nemerle.Utility;

using System.Diagnostics;

namespace Nemerle.Compiler.Parsetree
{
  [Record (Exclude = [_env, _tokens, _bodyLocation, _definedIn, _builder, _userData])]
  public variant ClassMember : MemberBase
  {
    | TypeDeclaration
      {
        td : TopDeclaration;

        public this(name : Splicable, td : TopDeclaration) { this(td.Location, name, td.modifiers, td) }
        public this(td : TopDeclaration)                   { this(td.Location, td.name, td.modifiers, td) }
      }

    | Field
      {
        mutable ty : PExpr;
        [RecordIgnore] Initializer    : PExpr    { get; internal set; }
        [RecordIgnore] ParsedType     : PExpr    { get; internal set; }
        [RecordIgnore] ColonLocation  : Location { get; internal set; }

        public new Builder : FieldBuilder    { get { _builder :> FieldBuilder } }

        public new this(
          loc : Location,
          name : Nemerle.Compiler.Parsetree.Splicable,
          modifiers : Nemerle.Compiler.AttributesAndModifiers,
          colonLoc : Location,
          ty : PExpr)
        {
          base(loc, name, modifiers);
          this.ty         = ty;
          this.ParsedType = ty;
          ColonLocation   = colonLoc;
        }

        public this(
          loc : Location,
          name : Nemerle.Compiler.Parsetree.Splicable,
          modifiers : Nemerle.Compiler.AttributesAndModifiers,
          ty : PExpr,
          initializer : PExpr)
        {
          this(loc, name, modifiers, ty);
          this.Initializer = initializer;
        }
      }

    | Function
      {
        header : PFunHeader;
        mutable implemented : list[PExpr];
        mutable body        : FunBody;

        [RecordIgnore] ParsedImplemented    : list[PExpr] { get; internal set; }
        [RecordIgnore] ParsedBody           : FunBody     { get; set; }
        [RecordIgnore] IsExtension          : bool        { get; set; }
        [RecordIgnore] ReturnValueModifiers : AttributesAndModifiers  { get; set; }

        public new Builder : MethodBuilder   { get { _builder :> MethodBuilder } }

        public new this(
          loc : Location,
          name : Nemerle.Compiler.Parsetree.Splicable,
          modifiers : Nemerle.Compiler.AttributesAndModifiers,
          header : PFunHeader,
          implemented : list[PExpr],
          body : FunBody)
        {
          base(loc, name, modifiers);
          this.header = header;

          this.implemented = implemented;
          this.ParsedImplemented = implemented;

          this.body = body;
          this.ParsedBody = body;
        }
      }

    | Property
      {
        public new this(
          name : Nemerle.Compiler.Parsetree.Splicable,
          modifiers : Nemerle.Compiler.AttributesAndModifiers,
          returnType : Nemerle.Compiler.Parsetree.PExpr,
          parameters : list[Nemerle.Compiler.Parsetree.PParameter],
          getter : option[Nemerle.Compiler.Parsetree.ClassMember.Function],
          setter : option[Nemerle.Compiler.Parsetree.ClassMember.Function])
        {
          this(Location.Default, name, modifiers, returnType, parameters, getter, setter)
        }

        public new this(
          loc : Location,
          name : Nemerle.Compiler.Parsetree.Splicable,
          modifiers : Nemerle.Compiler.AttributesAndModifiers,
          returnType : Nemerle.Compiler.Parsetree.PExpr,
          parameters : list[Nemerle.Compiler.Parsetree.PParameter],
          getter : option[Nemerle.Compiler.Parsetree.ClassMember.Function],
          setter : option[Nemerle.Compiler.Parsetree.ClassMember.Function])
        {
          this(loc, name, modifiers, returnType, parameters, getter, setter, None());
        }

        public new this(
          loc : Location,
          name : Nemerle.Compiler.Parsetree.Splicable,
          modifiers : Nemerle.Compiler.AttributesAndModifiers,
          returnType : Nemerle.Compiler.Parsetree.PExpr,
          parameters : list[Nemerle.Compiler.Parsetree.PParameter],
          getter : option[Nemerle.Compiler.Parsetree.ClassMember.Function],
          setter : option[Nemerle.Compiler.Parsetree.ClassMember.Function],
          initializer : option[PExpr])
        {
          base(loc, name, modifiers);

          this.parsedReturnType    = returnType;
          this.returnType          = returnType;

          this.parsedParameters    = parameters;
          this.parameters          = parameters;

          this.parsedGetter        = getter;
          this.getter              = getter;

          this.parsedSetter        = setter;
          this.setter              = setter;

          this.initializer         = initializer;
        }

        public this(
          loc : Location,
          name : Nemerle.Compiler.Parsetree.Splicable,
          modifiers : Nemerle.Compiler.AttributesAndModifiers,
          returnType : Nemerle.Compiler.Parsetree.PExpr,
          parameters : list[Nemerle.Compiler.Parsetree.PParameter],
          getter : option[Nemerle.Compiler.Parsetree.ClassMember.Function],
          setter : option[Nemerle.Compiler.Parsetree.ClassMember.Function],
          implemented : list[PExpr])
        {
          this(loc, name, modifiers, returnType, parameters, getter, setter);
          this.ParsedImplemented = implemented;
        }

        public mutable        returnType          : PExpr;
        [RecordIgnore] public parsedReturnType    : PExpr;

        public mutable        parameters          : list[PParameter]; // parameters of indexer property
        [RecordIgnore] public parsedParameters    : list[PParameter];

        public mutable        getter              : option[ClassMember.Function];
        [RecordIgnore] public parsedGetter        : option[ClassMember.Function];

        public mutable        setter              : option[ClassMember.Function];
        [RecordIgnore] public parsedSetter        : option[ClassMember.Function];

        public mutable        initializer         : option[PExpr];

        [Accessor(flags=WantSetter), RecordIgnore] internal mutable _parsedParametersOpenLocation  : Location;
        [Accessor(flags=WantSetter), RecordIgnore] internal mutable _parsedParametersCloseLocation : Location;
        [RecordIgnore] public ParsedImplemented             : list[PExpr] { get; internal set; }

        public SignatureType : PExpr
        {
          get
          {
            match (parameters)
            {
              | [parm]     => Util.locate(parm.Location + returnType.Location,
                                <[ $(parm.Type) -> $returnType ]>)

              | [] | null  => returnType

              | first :: _ => def input_parms = parameters.Map(_.Type);
                              Util.locate(first.Location + returnType.Location,
                                <[ @*(..$input_parms) -> $returnType ]>)
            }
          }
        }

        public ParsedSignatureType : PExpr
        {
          get
          {
            match (parsedParameters)
            {
              | [parm]     => Util.locate(parm.Location + parsedReturnType.Location,
                                <[ $(parm.Type) -> $parsedReturnType ]>)
              | []         => parsedReturnType
              | first :: _ => def input_parms = parsedParameters.Map(_.Type);
                              Util.locate(first.Location + parsedReturnType.Location,
                                <[ @*(..$input_parms) -> $parsedReturnType ]>)
            }
          }
        }

        public new Builder : PropertyBuilder { get { _builder :> PropertyBuilder } }
      }

    | Event
      {
        ty     : PExpr;
        field  : ClassMember.Field;
        add    : ClassMember.Function;
        remove : ClassMember.Function;
        public new Builder : EventBuilder    { get { _builder :> EventBuilder } }
        [RecordIgnore]
        public ColonLocation : Location { get; internal set; }
      }

    | EnumOption { value : option [PExpr]; }

    // It's prevent esers from fortuitous modification of Env property.
    public SetEnv(env : GlobalEnv) : void { _env = env; }
    [Accessor] internal mutable _env          : GlobalEnv;
    [Accessor] internal mutable _tokens       : Token.BracesGroup;
    /// This property contain referens to TopDeclaration where defined this member.
    [Accessor] internal mutable _definedIn    : TopDeclaration;
    //  This field set to MemberBuilder where it will be created. (null for EnumOption & TypeDeclaration)
    [Accessor] internal mutable _builder      : MemberBuilder;
    [Accessor(flags = WantSetter)]
    mutable _userData : object;

    /** accessible only for ClassMember.Function, when its FunBody is not typed or compiled */
    public Body : PExpr
    {
      get {
        match (this) {
          | ClassMember.Function (body = bd) =>
            match (bd) {
              | FunBody.Parsed (expr) => expr
              | FunBody.Typed =>
                Message.Error ("Body of typed method is not accessible");
                null
              | FunBody.ILed =>
                Message.Error ("Body of compiled method is not accessible");
                null
              | FunBody.Abstract => <[ () ]>
            }
          | _ =>
            Message.Error ("Body is accessible only for ClassMember.Function variant option");
            null
        }
      }
      set {
        match (this) {
          | ClassMember.Function as fn =>
            fn.body = FunBody.Parsed (value);
          | _ =>
            Message.Error ("Body is accessible only for ClassMember.Function variant option")
        }
      }
    }

    public IsMutable () : bool { modifiers.mods %&& NemerleModifiers.Mutable }

    internal PrintBody (writer : LocatableTextWriter) : void
    {
      match (this) {
        | Function (body = bd) =>
          match (bd) {
              | FunBody.Parsed (expr) =>
                PrettyPrint.SprintExpr(None(), expr, "", writer);
              | _ => ()
          }

        | Property (getter = getter, setter = setter, initializer = initializer) =>
          def print(accessor, acc_type)
          {
            | (Some(Function (body = FunBody.Parsed (expr))), _) =>
              writer.Write($"\n$acc_type");
              PrettyPrint.SprintExpr (None(), expr, "", writer);
              writer.Write("\n");
            | _ => ()
          }
          print(getter, "get");
          print(setter, "set");

          when (initializer is Some(initExpr))
          {
            writer.Write("\ndefault");
            PrettyPrint.SprintExpr(None(), initExpr, "", writer);
            writer.Write("\n");
          }
        | _ => ()
      }
    }
    public HeaderToString() : string
    {
      def squareLst(lst) { if (lst.IsEmpty) "" else lst.ToString() }
      def attrs = if (modifiers == null) "" else Attributes.ToString().ToLower().Replace(",", "");
      def attrs = if (attrs == "") attrs else attrs + " ";
      def ifMutable () { if (IsMutable ()) "mutable " else "" }
      def prefix() { $"$(attrs)$(ifMutable())" }
      def name = this.name;

      match (this)
      {
        | TypeDeclaration(td)             => $"$(prefix())$td"
        | Field(ty)                       => $"$(prefix())$name : $ty"
        | Function(header, _, _)          => $"$(prefix())$header"
        | Property(returnType = ty, parameters = dims)  => $"$(prefix())$name$(squareLst(dims)) : $ty"
        | Event(ty, _, _, _)              => $"$(prefix())$name : $ty"
        | EnumOption(value)               => $"$name" + match (value) { | Some(v) => $" = $v" | None => "" }
      }
    }

    public override ToString() : string
    {
      def attrs = if (modifiers == null) "" else Attributes.ToString().ToLower().Replace(",", "");
      def attrs = if (attrs == "") attrs else attrs + " ";
      def ifMutable () { if (IsMutable ()) "mutable " else "" }
      def prefix() { $"$(attrs)$(ifMutable())" }
      def name = this.name;

      match (this)
      {
        | TypeDeclaration(td)         => $"TopDeclaration: $(prefix())Name=$name ($td)"
        | Field(ty)                   => $"Field: $(prefix())$name : $ty;"
        | Function(header, _, _)      => $"Function: $(prefix())$header;"
        | Property(returnType = ty, parameters = dims, getter = get, setter = set, initializer = init) =>

          // Write "get; set; default;" or ";" if nothing exist.
          mutable getSetInit = "{ ";
          when (get.IsSome) getSetInit += "get; ";
          when (set.IsSome) getSetInit += "set; ";
          when (init.IsSome) getSetInit += "default; ";
          if (getSetInit.Length > 2) getSetInit += "}";
          else                       getSetInit = ";";

          $"Property: $(prefix())$name : $ty" + (if (dims.IsEmpty) "" else dims.ToString()) + getSetInit

        | Event(ty, _, _, _)          => $"Event: $(prefix())$name : $ty"
        | EnumOption(value)           => $"$name" + match (value) { | Some(v) => $" = $v" | None => "" }
      }
    }
  } // variant
} // namespace
