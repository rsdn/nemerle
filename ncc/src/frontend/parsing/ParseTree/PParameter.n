using Nemerle.Compiler;
using Nemerle.Collections;
using Nemerle.Utility;

using System.Diagnostics;

using T = Nemerle.Compiler.Typedtree;

namespace Nemerle.Compiler.Parsetree
{
  public class PParameter : DeclarationBase
  {
    public mutable Type       : PExpr;
    // when parse_header() sees a pattern as a function parameters,
    // it generates a dummy name and puts the pattern in this field
    public PatternHack : PExpr { get; private set; }
    public ResetPatternHack() : void { PatternHack = null; }

    public ParsedType        : PExpr;
    public ParsedPatternHack : PExpr;

    public DefaultValue      : option[PExpr] {get; set;}
    public ParsedDefaultValue  : option[PExpr];

    public new TypedObject : T.TParameter { get { base.TypedObject :> T.TParameter } }

    public this(name : Name, modifiers : AttributesAndModifiers, Type : PExpr, DefaultValue : option[PExpr])
    {
      this(Splicable.Name(name), modifiers, Type, DefaultValue)
    }

    public this(name : Splicable, modifiers : AttributesAndModifiers, Type : PExpr, DefaultValue : option[PExpr])
    {
      base(LocationStack.Top(), name, modifiers);
      this.Type  = Type;
      ParsedType = Type;
      this.DefaultValue = DefaultValue;
      ParsedDefaultValue = DefaultValue;
    }

    public this(name : Splicable, modifiers : AttributesAndModifiers, Type : PExpr)
    {
      base(LocationStack.Top(), name, modifiers);
      this.Type  = Type;
      ParsedType = Type;
      DefaultValue = None();
      ParsedDefaultValue = None();
    }

    public this(name : Name, modifiers : AttributesAndModifiers, Type : PExpr)
    {
      this(Splicable.Name(name), modifiers, Type)
    }

    public this(name : Splicable, ty : PExpr, modifiers : AttributesAndModifiers, defval : option[PExpr])
    {
      base(LocationStack.Top(), name, modifiers);

      this.Type  = ty;
      ParsedType = ty;
      this.DefaultValue = defval;
      ParsedDefaultValue = defval;
    }

    public this(name : Name, ty : PExpr, modifiers : AttributesAndModifiers, defval : option[PExpr])
    {
      this(Splicable.Name(name), ty, modifiers, defval)
    }

    public this(name : Splicable, ty : PExpr, modifiers : AttributesAndModifiers)
    {
      base(LocationStack.Top(), name, modifiers);

      this.Type  = ty;
      ParsedType = ty;
      DefaultValue = None();
      ParsedDefaultValue = None();
    }

    public this(name : Name, ty : PExpr, modifiers : AttributesAndModifiers)
    {
      this(Splicable.Name(name), ty, modifiers)
    }

    public this(loc : Location, name : Splicable, ty : PExpr, modifiers : AttributesAndModifiers, patternHack : PExpr = null)
    {
      base(loc, name, modifiers);

      this.Type         = ty;
      ParsedType        = ty;
      this.PatternHack  = patternHack;
      ParsedPatternHack = patternHack;
      DefaultValue = None();
      ParsedDefaultValue = None();
    }

    public this(loc : Location, name : Name, ty : PExpr, modifiers : AttributesAndModifiers, patternHack : PExpr = null)
    {
      this(loc, Splicable.Name(name), ty, modifiers, patternHack)
    }

    public this(loc : Location, name : Name, ty : PExpr, modifiers : AttributesAndModifiers, defval : option[PExpr], patternHack : PExpr = null)
    {
      this(loc, Splicable.Name(name), ty, modifiers, defval, patternHack)
    }

    public this(loc : Location, name : Splicable, ty : PExpr, modifiers : AttributesAndModifiers, defval : option[PExpr], patternHack : PExpr = null)
    {
      base(loc, name, modifiers);

      this.Type          = ty;
      ParsedType         = ty;
      this.PatternHack   = patternHack;
      ParsedPatternHack  = patternHack;
      DefaultValue       = defval;
      ParsedDefaultValue = defval;
    }

    public this(from : PExpr)
    {
      base(from.Location, null, AttributesAndModifiers(NemerleModifiers.None, []));

      def from_expr(e)
      {
        | PExpr.Ref(n)     =>
          def name       = Splicable.Name(n);
          def Type       = PExpr.Wildcard(from.Location);
          (name, Type)
        | PExpr.Spliced(s) =>
          def name       = Splicable.Expression(s);
          def Type       = PExpr.Wildcard(from.Location);
          (name, Type)

        | PExpr.TypeEnforcement(PExpr.Ref(n), t) =>
          def name = Splicable.Name(n);
          def Type = t;
          (name, Type)

        | PExpr.TypeEnforcement(PExpr.Spliced(s), t) =>
          def name = Splicable.Expression(s);
          def Type = t;
          (name, Type)
        | _ => throw System.ArgumentException($"incorrect expression supplied for parameter creation: $from")
      }

      match (from)
      {
        | <[ $x = $d ]> with defval = Some(d) => def (name, type) = from_expr(x);
                                                  this.name = name;
                                                  this.Type = type;
                                                  this.ParsedType = type;
                                                  this.DefaultValue = defval;
                                                  this.ParsedDefaultValue = defval;

        | x                                    => def (name, type) = from_expr(x);
                                                  this.name = name;
                                                  this.Type = type;
                                                  this.ParsedType = type;
                                                  this.DefaultValue = None();
                                                  this.ParsedDefaultValue = None();

      }

    }

    public ReferencingExpr : PExpr
    {
      get
      {
        match (name)
        {
          | HalfId(n)
          | Name(n) => PExpr.Ref(name.Location.AsGenerated(), n)
          | Expression(e) => e
          | null => PExpr.Error()
        }
      }
    }

    public GetTypeReferences() : Seq[PExpr]
    {
      yield Type;
      when (DefaultValue is Some(x))
        yield x;
    }

    public override ToString() : string
    {
      def str = $"$(this.Name) : $Type";
      match (DefaultValue)
      {
        | Some(d) => $"$str = $d"
        | _       => str
      }
    }
  }
} // namespace
