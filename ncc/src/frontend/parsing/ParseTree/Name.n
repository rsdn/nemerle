using Nemerle.Compiler;
using Nemerle.Collections;
using Nemerle.Utility;

using System.Diagnostics;

namespace Nemerle.Compiler.Parsetree
{
  /// class encapsulating name of variable for purpose of quotation and renaming
  public class Name : ParsedBase, System.IComparable[Name], System.IEquatable[Name]
  {
    public idl : string;
    public color : int;
    public context : GlobalEnv;
    public ParsedId : string;

    public this(other : Name)
    {
      base(other.Location);

      idl       = other.idl;
      color     = other.color;
      context   = other.context;
      ParsedId  = other.ParsedId;
    }

    public this(id : string)
    {
      this(id, LocationStack.Top())
    }

    public this(id : string, loc : Location)
    {
      this(id, loc, id)
    }

    public this(id : string, color : int, context : GlobalEnv)
    {
      this(id, LocationStack.Top(), color, context, id)
    }

    public this(id : string, loc : Location, color : int, context : GlobalEnv)
    {
      this(id, loc, color, context, id)
    }

    public this(id : string, loc : Location, parsedId : string)
    {
      this(id, loc, ManagerClass.Instance.MacroColors.Color, null, // no global context
        parsedId);
    }

    public this(id : string, loc : Location, color : int, context : GlobalEnv, parsedId : string)
    {
      base(loc);

      this.color    = color;
      this.context  = context;
      idl           = id;
      this.ParsedId = parsedId;
    }

    static public NameInCurrentColor(id : string, context : GlobalEnv) : Name
    {
      Name(id, context.Manager.MacroColors.Color, context)
    }

    static public NameInCurrentColor(id : string, loc : Location, context : GlobalEnv) : Name
    {
      Name(id, loc, context.Manager.MacroColors.Color, context)
    }

    static public NameInCurrentColor(id : string, parsedId : string, loc : Location, context : GlobalEnv) : Name
    {
      Name(id, loc, context.Manager.MacroColors.Color, context, parsedId)
    }

    static public Global(mgr : ManagerClass, id : string) : Name
    {
      Name(id, 1, mgr.CoreEnv)
    }

    public NewName(id : string) : Name
    {
      Name(id, color, context);
    }

    /** Returns plain identifier string of this name.
     */
    public Id : string
    {
      [DebuggerNonUserCode] get { idl }
    }

    public override ToString() : string
    {
      Id
    }

    public override GetHashCode() : int
    {
      unchecked(idl.GetHashCode() * (color + 1))
    }

    [Nemerle.OverrideObjectEquals]
    public Equals(other : Name) : bool
      implements System.IEquatable[Name].Equals
    {
      this.CompareTo(other) == 0
    }

    public CompareTo(other : Name) : int
    {
      def res = string.CompareOrdinal(idl, other.idl);
      if (res == 0)
      {
        if (color < 0 || other.color < 0)
          0
        else
          color - other.color
      }
      else
        res
    }

    public GetEnv(default : GlobalEnv) : GlobalEnv
    {
      if (context != null)
        context
      else
        default
    }
  }
} // namespace
