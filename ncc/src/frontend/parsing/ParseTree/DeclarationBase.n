using Nemerle.Compiler;
using Nemerle.Collections;
using Nemerle.Utility;

using System.Diagnostics;

namespace Nemerle.Compiler.Parsetree
{
  public class DeclarationBase : ParsedBase
  {
    public mutable name : Splicable;
    public mutable modifiers : AttributesAndModifiers;

    [RecordIgnore] public ParsedSplicableName         : Splicable;
    [RecordIgnore] public ParsedAttributsAndModifiers : AttributesAndModifiers;

    public this(name : Splicable, modifiers : AttributesAndModifiers)
    {
      this(LocationStack.Top(), name, modifiers)
    }

    public this(loc : Location, name : Splicable, modifiers : AttributesAndModifiers)
    {
      base(loc);

      this.name                   = name;
      ParsedSplicableName         = name;
      this.modifiers              = modifiers;
      ParsedAttributsAndModifiers = modifiers;
    }

    public TryGetEnv() : option[GlobalEnv]
    {
        match (name)
        {
          | Splicable.Name(x)
          | Splicable.HalfId(x)         => Some(x.context)
          | null
          | Splicable.Expression(_expr) => None() //TODO: Try find GlobalEnv in _expr
        }
    }

    public GetEnv(defaulteGlobalEnv : GlobalEnv) : GlobalEnv
    {
        match (name)
        {
          | Splicable.Name(x)
          | Splicable.HalfId(x)         => x.context
          | null
          | Splicable.Expression(_expr) => defaulteGlobalEnv //TODO: Try find GlobalEnv in _expr
        }
    }

    public PName      : Name    { get { name.GetName() } }
    public Name       : string  { get { if (name == null) "" else name.ToString() } }
    public ParsedName : string  { get { ParsedSplicableName.ToString() } }

    public NameLocation : Location
    {
      get
      {
        if (ParsedSplicableName == null) this.Location
        else ParsedSplicableName.Location
      }
    }

    public Attributes : NemerleModifiers
    {
      get { modifiers.mods }
      set { modifiers.mods = value }
    }

    public GetCustomAttributes () : list [PExpr]
    {
      modifiers.custom_attrs
    }

    public AddCustomAttribute (e : PExpr) : void
    {
      modifiers.custom_attrs = e :: modifiers.custom_attrs
    }
  }
} // namespace
