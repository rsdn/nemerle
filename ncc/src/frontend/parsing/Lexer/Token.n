using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.Text;

using Nemerle.Collections;
using Nemerle.Utility;

using NStack = Nemerle.Collections.Stack;

namespace Nemerle.Compiler
{
  public variant Token : IEnumerable [Token]
  {
    | Identifier { name : string; }
    | QuotedIdentifier { name : string; }
    | IdentifierToComplete { prefix : string; }
    | Keyword { name : string; }
    | Operator { name : string; }
    | StringLiteral { value : string; rawString : string; this(val : string) { this(val, "") } }
    | CharLiteral { value : char; }
    | IntegerLiteral { lit : Literal.Integer; }
    | FloatLiteral { value : float; }
    | DoubleLiteral { value : Double; }
    | DecimalLiteral { value : Decimal; }
    | Comment { value : string; }
    | Semicolon { generated : bool; }
    | Comma
    | BeginBrace { generated : bool; }   // {
    | EndBrace { generated : bool; }     // }
    | BeginRound    // (
    | EndRound      // )
    | BeginSquare   // [
    | EndSquare     // ]
    | BeginQuote    // <[
    | EndQuote      // ]>
    | Indent     { value : string; }
    | WhiteSpace { value : string; }
    | NewLine    { value : string; }
    | RoundGroup  {         Child : Token; OpenBrace : Token.BeginRound; CloseBrace : Token.EndRound; }  // ( ... )
    | BracesGroup {
                    public this(child : Token) { Child = child; }
                            Child : Token;
                            OpenBrace  : Token.BeginBrace;
                            CloseBrace : Token.EndBrace;
                            generated : bool;
                  }                           // { ... }
    | SquareGroup { mutable Child : Token; OpenBrace : Token.BeginSquare; CloseBrace : Token.EndSquare; }  // [ ... ]
    | QuoteGroup  {         Child : Token; OpenBrace : Token.BeginQuote; CloseBrace : Token.EndQuote; }  // <[ ... ]>
    | LooseGroup  { mutable Child : Token;
                    [RecordIgnore]
                    public SeparatorToken : Token;

                    public this(loc : Location, child : Token, separatorToken : Token)
                    {
                      base(loc);
                      Child          = child;
                      SeparatorToken = separatorToken;
                    }
                  }  // ; ... ;

    | Namespace { Env : GlobalEnv; KeywordToken : Token; Body : Token; OpenBrace : Token.BeginBrace; CloseBrace : Token.EndBrace; }
    | Using { Env : GlobalEnv; KeywordToken : Token; Body : Token; }
    | EndOfFile
    | EndOfGroup

    public mutable Location : Nemerle.Compiler.Location;
    public mutable Next : Token;

    public this () { }

    public this (loc : Location)
    {
      this.Location = loc;
    }

    public override ToString () : string
    {
      match (this)
      {
        | QuotedIdentifier (name) => "@" + name
        | Identifier (name) => name
        | IdentifierToComplete (name) => $"<COMPLETE '$name'>";
        | Keyword (name) => name
        | Operator (name : string) => name

        | StringLiteral (_, raw) => raw;
        | CharLiteral (value) => "'" + value.ToString () + "'"
        | IntegerLiteral  (value) => value.ToString ()
        | FloatLiteral   (value) => value.ToString ()
        | DoubleLiteral  (value) => value.ToString ()
        | DecimalLiteral (value) => value.ToString ()

        | Comment => this.Location.GetText()
        | EndOfFile => " /*EOF*/ "
        | EndOfGroup => " /*EOG*/ "

        | Semicolon      => ";"
        | Comma          => ","
        | BeginBrace     => "{"
        | EndBrace       => "}"
        | BeginRound     => "("
        | EndRound       => ")"
        | BeginSquare    => "["
        | EndSquare      => "]"
        | BeginQuote     => "<["
        | EndQuote       => "]>"

        | Indent => "indentation"

        | RoundGroup | BracesGroup | SquareGroup | QuoteGroup | LooseGroup =>
          PreParser.Dump (this, "")

        | Namespace (env, _, body, _, _) =>
          "namespace " + env.CurrentNamespace.GetDisplayName ()
          + " { " + PreParser.Dump (body, "") + " }"

        | Using => "using import;"
        | WhiteSpace(name) => name
        | NewLine => "\\r\\n";

      }
    }

    public GetEnumerator () : IEnumerator [Token]
    {
      match (this)
      {
        | RoundGroup (child, _, _) | BracesGroup (child, _, _, _) | SquareGroup (child, _, _)
        | QuoteGroup (child, _, _) | LooseGroup (child)  | Namespace (_, _, child, _, _)
        | Using (_, _, child) =>
          def loop(current)
          {
            when (current != null)
            {
              yield current;
              loop (current.Next)
            }
          }

          loop(child)

        | _ => throw System.ArgumentException ("this is not a group token")
      }
    }

    public ToString (describe : bool) : string {
      if (describe)
        match (this) {
          | Keyword (x) => "keyword `" + x + "'"
          | QuotedIdentifier (x) => "quoted identifier `" + x + "'"
          | Identifier (x) => "identifier `" + x + "'"
          | IdentifierToComplete (x) => "identifier to complete `" + x + "'"
          | Operator (x) => "operator `" + x + "'"
          | StringLiteral => "string literal"
          | IntegerLiteral => "integer number literal"
          | FloatLiteral => "float literal"
          | DoubleLiteral => "double literal"
          | DecimalLiteral => "decimal literal"
          | CharLiteral => "character literal"
          | EndOfFile => "end of file"
          | EndOfGroup => "separator or closing bracket"
          | Comment => "documentation comment"
          | Comma       | BeginRound | EndRound
          | BeginSquare | EndSquare  | BeginQuote
          | EndQuote  =>
            "operator `" + ToString () + "'"

          | BeginBrace (generated) =>
            if (generated)
              "group begin"
            else
              "operator `" + ToString () + "'"

          | EndBrace (generated) =>
            if (generated)
              "group end"
            else
              "operator `" + ToString () + "'"

          | Semicolon (generated) =>
            if (generated)
              "end of statement"
            else
              "operator `" + ToString () + "'"

          | Indent (value) => $"indentation `$value'"
          | WhiteSpace => ""
          | NewLine(value) => $"newline char: '$value'";

          | BracesGroup => "`{...}' group"
          | RoundGroup => "`(...)' group"
          | SquareGroup => "`[...]' group"
          | QuoteGroup => "`<[...]>' group"
          | LooseGroup (body) =>
            if (body == null) "token group"
            else body.ToString (true)

          | Namespace => "namespace scoping"
          | Using => "using declaration"
        }
      else
        ToString ()
    }
  }
}
