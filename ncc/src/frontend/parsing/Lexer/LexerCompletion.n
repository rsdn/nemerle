using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.Text;

using Nemerle.Collections;
using Nemerle.Utility;

using NStack = Nemerle.Collections.Stack;

namespace Nemerle.Compiler
{
  public class LexerCompletion : Lexer
  {
    protected mutable CompletionMarkPos : int;

    public this(manager : ManagerClass, remappingLocation : Location, completionMarkPos : int)
    {
      base(manager, remappingLocation);
      CompletionMarkPos = completionMarkPos;
    }

    public override GetToken() : Token
    {
      def tok = base.GetToken();
      def resetCompletionMark() { CompletionMarkPos = -1; }
      def loc = tok.Location;

      if (loc.IntersectsWith(CompletionMarkPos, CompletionMarkPos))
        //TODO: Extract substring from token.
        match (tok)
        {
          | Token.StringLiteral => tok
          | Token.Identifier(name) =>
            resetCompletionMark();
            Token.IdentifierToComplete(tok.Location, name)

          | Token.Operator =>
            def loc = Location(Source, CompletionMarkPos);
            resetCompletionMark();
            tok_pending = Token.IdentifierToComplete(loc, "");
            tok

          | Token.Keyword =>
            resetCompletionMark();
            Token.IdentifierToComplete(tok.Location, tok.ToString())

          | _ =>
            def loc = Location(Source, CompletionMarkPos);
            resetCompletionMark();
            tok_pending = tok;
            Token.IdentifierToComplete(loc, "")
        }
      else if (CompletionMarkPos >= 0 && loc.StartPos >= CompletionMarkPos && loc.EndPos < CompletionMarkPos)
      {
        resetCompletionMark ();
        tok_pending = tok;
        Token.IdentifierToComplete ("");
      }
      else
        tok
    }
  }
}
