using System;
using SCG = System.Collections.Generic;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Assertions;
using Nemerle.Utility;

namespace Nemerle.Compiler
{
  public interface IParser
  {
    Parse(source : SourceSnapshot) : ParseResult;
  }

  [Record]
  public class ParseResult
  {
    public TopDeclarations : list[TopDeclaration]
    {
      get
    }

    public virtual CommentLocations : SCG.List[Location * bool]
    {
      get { SCG.List() }
    }

    public virtual Location : Location
    {
      get { Location.Default }
    }

    public virtual Regions : list[Region]
    {
      get { [] }
    }

    public virtual LinesLengths : array[int]
    {
      get { array(0) }
    }
  }

  [Record]
  public sealed class DefaultParseResult : ParseResult
  {
    private lexer : Lexer;

    public override CommentLocations  : SCG.List[Location * bool]
    {
      get { lexer.CommentLocations }
    }

    public override Location : Location
    {
      get { lexer.Location }
    }

    public override Regions : list[Region]
    {
      get { lexer.Regions }
    }
  }

  [Record]
  public sealed class DefaultParser : IParser
  {
    [Accessor] manager : ManagerClass;

    public Parse(source : SourceSnapshot) : ParseResult
    {
      def lexer = Lexer(manager, source);
      when(manager.Options.IndentationSyntax)
        lexer.SwitchToIndentationMode();
      DefaultParseResult(MainParser.Parse(lexer), lexer)
    }
  }

  public sealed class DispatchingFileParser : IParser
  {
    public this(manager : ManagerClass)
    {
      this(manager, DefaultParser(manager))
    }

    public this(manager : ManagerClass, defaultParser : IParser)
    {
      this.manager = manager;
      this.registeredParsers[NormalizeExtension("n")] = Some(defaultParser);
    }

    public Register(parserType : Type, fileExtension : string) : void
    {
      def fileExtension = NormalizeExtension(fileExtension);
      if (registeredParsers.ContainsKey(fileExtension))
        Message.Warning("parser for '$fileExtension' files already registered");
      else
      {
        def ctor = parserType.GetConstructor(array[typeof(ManagerClass)]);
        if (ctor != null)
        {
          try
          {
            def parser = ctor.Invoke(array[manager : object]) :> IParser;
            registeredParsers[fileExtension] = Some(parser);
          }
          catch
          {
            | e =>
              Message.Warning($"failed to create instance of '$fileExtension' file parser '$parserType': $(e.Message)");
              registeredParsers[fileExtension] = None();
          }
        }
        else
        {
          Message.Warning($"can't find proper constructor for '$fileExtension' file parser '$parserType'");
          registeredParsers[fileExtension] = None();
        }
      }
    }

    public IsExtensionRegistered(fileExtension : string) : bool
    {
      registeredParsers.ContainsKey(NormalizeExtension(fileExtension))
    }

    public Parse(source : SourceSnapshot) : ParseResult
    {
      def fileName = source.File.FullName;
      def extension =
        if(!string.IsNullOrEmpty(fileName))
          NormalizeExtension(System.IO.Path.GetExtension(fileName))
        else
          "";
      match (registeredParsers.TryGetValue(extension))
      {
        | (_, false) =>
          Message.Error(Location(source.FileIndex, 1, 1), $"can't parse file with extension '$extension', parser not registered");
          ParseResult([])

        | (None, true) =>
          Message.Error(Location(source.FileIndex, 1, 1), $"can't parse file with extension '$extension', see parser initialization warnings");
          ParseResult([])

        | (Some(parser), true) => parser.Parse(source)
      }
    }

    private static NormalizeExtension(extension : string) : string
    {
      if (string.IsNullOrEmpty(extension))
        ""
      else if (extension[0] == '.')
        extension.Substring(1).ToLowerInvariant()
      else
        extension.ToLowerInvariant()
    }

    manager : ManagerClass;
    registeredParsers : Hashtable[string, option[IParser]] = Hashtable();
  }
}