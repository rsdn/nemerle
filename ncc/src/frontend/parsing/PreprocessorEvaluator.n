/*
 * Copyright (c) 2003-2008 The University of Wroclaw.
 * Copyright (c) 2008-2011 Nemerle Team.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using System;

using Nemerle.Collections;
using Nemerle.Utility;

namespace Nemerle.Compiler
{
  internal module PreprocessorEvaluator
  {
    public EvalCondition(defines : Map[string, bool], str : string) : bool
    {
      assert(defines != null);
      
      def traverse (line : string, acc)
      {
        mutable i = 0;
        while (i < line.Length && Char.IsWhiteSpace (line [i]))
          ++i;
        def line = line.Substring (i);
  
        match (line)
        {
          | x when x.StartsWith ("false") =>
            traverse (x.Substring (5), "false" :: acc)
          | x when x.StartsWith ("true") =>
            traverse (x.Substring (4), "true" :: acc)
          | x when x.StartsWith ("||") =>
            traverse (x.Substring (2), "||" :: acc)
          | x when x.StartsWith ("&&") =>
            traverse (x.Substring (2), "&&" :: acc)
          | x when x.StartsWith ("==") =>
            traverse (x.Substring (2), "==" :: acc)
          | x when x.StartsWith ("!=") =>
            traverse (x.Substring (2), "!=" :: acc)
          | x when x.StartsWith ("(") =>
            traverse (x.Substring (1), "(" :: acc)
          | x when x.StartsWith (")") =>
            traverse (x.Substring (1), ")" :: acc)
          | x when x.StartsWith ("!") =>
            traverse (x.Substring (1), "!" :: acc)
          | "" => NList.Rev (acc)
          | x =>
            mutable j = 0;
            while (j < x.Length && (Lexer.IsIdBeginning (x[j]) || Char.IsDigit (x[j]))) ++j;
            when (j == 0)
              throw Lexer.Error ("bad preprocessing condition format");
            def val =
              match (defines.Find (x.Substring (0, j))) {
                | Some (v) => v
                | None => false
              };
            if (val) traverse (x.Substring (j), "true" :: acc)
            else traverse (x.Substring (j), "false" :: acc)
        }
      };
      mutable tokens = traverse (str, []);
  
      def lowest () {
        match (tokens) {
          | "(" :: xs =>
            tokens = xs;
            def res = highest ();
            match (tokens) {
              | ")" :: xs => tokens = xs
              | _ =>
                throw Lexer.Error ("unbalanced parenthesis in preprocessing expression")
            };
            res
          | "!" :: xs => tokens = xs; !lowest ();
          | "false" :: xs => tokens = xs; false
          | "true" :: xs => tokens = xs; true
          | _ => throw Lexer.Error ("bad expression")
        }
      }
      and low () {
        mutable res = lowest ();
        def loop () {
          match (tokens) {
            | "&&" :: xs =>
              tokens = xs; res = lowest () && res; loop ()
            | _ => ()
          }
        };
        loop ();
        res
      }
      and high () {
        mutable res = low ();
        def loop () {
          match (tokens) {
            | "||" :: xs =>
              tokens = xs; res = low () || res; loop ()
            | _ => ()
          }
        };
        loop ();
        res
      }
      and highest () {
        mutable res = high ();
        def loop () {
          match (tokens) {
            | "==" :: xs =>
              tokens = xs; res = high () == res; loop ()
            | "!=" :: xs =>
              tokens = xs; res = high () != res; loop ()
            | _ => ()
          }
        }
        loop ();
        res
      };
      def res = highest ();
      when (tokens != [])
        throw Lexer.Error ("Unexpected token after expression");
      res
    }

    public EvalConditions(this conditionalMember : IMember, env : GlobalEnv) : bool
    {
      assert(env != null);
      match(conditionalMember.GetConditions())
      {
        | [] =>
          // this is non-conditional member - return `true'
          true
        | conditions =>
          // any of conditional expressions evals `true'
          conditions.Exists(fun(condition)
          {
            try
            {
              EvalCondition(env.Defines, condition)
            }
            catch
            {
              | _ is Lexer.Error => false
            }
          })
      }
    }
  }
}