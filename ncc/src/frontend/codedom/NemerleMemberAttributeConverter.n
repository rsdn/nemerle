//
// Permission is hereby granted,  free of charge,  to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"),  to deal in the Software without restriction,  including
// without limitation the rights to use,  copy,  modify,  merge,  publish, 
// distribute,  sublicense,  and/or sell copies of the Software,  and to
// permit persons to whom the Software is furnished to do so,  subject to
// the following conditions:
// 
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS",  WITHOUT WARRANTY OF ANY KIND, 
// EXPRESS OR IMPLIED,  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY,  FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM,  DAMAGES OR OTHER LIABILITY,  WHETHER IN AN ACTION
// OF CONTRACT,  TORT OR OTHERWISE,  ARISING FROM,  OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.ComponentModel;
using System.CodeDom;
using System.Globalization;

namespace Nemerle.Compiler
{
  //
  // This type converter provides supported values for MemberAttributes
  //
  internal class NemerleMemberAttributeConverter : TypeConverter
  {
    public override CanConvertFrom (context : ITypeDescriptorContext, sourceType : Type) : bool
    {
      typeof (string).Equals (sourceType) || base.CanConvertFrom (context, sourceType);
    }

    public override ConvertFrom (_ : ITypeDescriptorContext, _ : CultureInfo, value : object) : object
    {
      match (value)
      {
      | name is string =>
        def idx = Array.IndexOf (_names, name);
        if (idx < 0) _values[0] else _values[idx];
      | _ => _values[0];
      }
    }

    public override ConvertTo (context : ITypeDescriptorContext, culture : CultureInfo, value : object, destinationType : Type) : object
    {
      when (destinationType == null)
        throw ArgumentNullException("destinationType");

      if (typeof (string).Equals (destinationType))
      {
        def idx = Array.IndexOf (_values, value);
        if (idx < 0) _names[0] else _names[idx];
      }
      else
        base.ConvertTo (context, culture, value, destinationType);
    }

    public override GetStandardValuesExclusive (_ : ITypeDescriptorContext) : bool
    {
      true;
    }

    public override GetStandardValuesSupported (_ : ITypeDescriptorContext) : bool
    {
      true;
    }

    public override GetStandardValues (_ : ITypeDescriptorContext) : StandardValuesCollection
    {
      StandardValuesCollection (_values);
    }

    public static Default : NemerleMemberAttributeConverter
      = NemerleMemberAttributeConverter();

    private _names  : array [string] = array [ "Public", "Protected", "Protected Internal", "Internal", "Private" ];
    private _values : array [object] = array [ MemberAttributes.Public : object, MemberAttributes.Family,
       MemberAttributes.FamilyOrAssembly, MemberAttributes.Assembly, MemberAttributes.Private ];
  }
}
