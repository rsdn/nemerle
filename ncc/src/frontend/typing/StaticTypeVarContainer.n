using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using System;

using NC  = Nemerle.Compiler;
using PT  = Nemerle.Compiler.Parsetree;
using GenericParameterAttributes = dnlib.DotNet.GenericParamAttributes;

namespace Nemerle.Compiler 
{
  [Record]
  public variant StaticTypeVarContainer
  {
    | Parsed
      {
        typesToCheckBounds : list[TypeVar];
        constraints        : Hashtable[int, GenericParameterAttributes * list[FixedType]];
      }
    | Clone  { sourceTypeParms : list[StaticTypeVar] }
    | Copy

    public TypeVarEnv : TypeVarEnv;
    public TypeParams : list[StaticTypeVar];

    public HasConstraints : bool
    {
      get 
      {
        match (this)
        {
          | Parsed(_, constraints) => TypeParams.Exists(tp => constraints.Contains(tp.id))
          | Clone(sourceTypeParms) => sourceTypeParms.Exists(_.HasConstraints)
          | Copy                   => TypeParams.Exists(_.HasConstraints)
        }
      }
    }

    public IsConstraintsSet : bool
    {
      get { TypeParams.Exists(_.IsConstraintsSet) }
    }

    public SetConstraints() : void
    {
      match (this)
      {
        | Parsed(typesToCheckBounds, constraints) =>
          foreach (tv in TypeParams)
            tv.SetConstraints(constraints.GetValueOrDefault(tv.id, (GenericParameterAttributes.NoSpecialConstraint, [])));
          foreach (tv in typesToCheckBounds)
            TypeBuilder.check_bound_type(tv);

        | Clone(sourceTypeParms) =>
          NList.Iter2(sourceTypeParms, TypeParams, (sourceTp, targetTp) =>
            targetTp.SetConstraints(sourceTp.SpecialConstraints, sourceTp.Constraints));

        | Copy => ()
      }
    }
  }
}
