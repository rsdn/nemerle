using Nemerle.Compiler;
using Nemerle.Utility;
using Nemerle.Assertions;

using PExpr = Nemerle.Compiler.Parsetree.PExpr;

namespace Nemerle.Compiler.Typedtree
{
  public class CacheDesc
  {
    p_indices : PExpr;
    [Accessor] p_expr : PExpr;

    mutable t_indices : TExpr;
    [Accessor] mutable t_expr : TExpr;
    [Accessor] mutable ref_is : TExpr;

    public Type : TypeVar
    {
      get { t_expr.Type }
    }

    public Resolve (par : Typer) : void
    {
      when (t_expr == null)
      {
        when (p_indices != null)
          t_indices = par.TypeExpr (p_indices, par.Solver.FreshTypeVar (), is_toplevel_in_seq = true);
        t_expr = par.TypeExpr (p_expr);
      }
    }

    public Finalize (fun_header : TFunHeader, mutable body : TExpr) : TExpr
    {
      assert(ref_is == null);

      def unfold(e : TExpr) : TExpr
      {
        | Delayed(Typer.DelayedTyping where (DtKind = Resolved(e))) => unfold(e).CopyDebugInfo(fun_header, e)
        | Delayed => Util.ice ()
        | _ => e
      }

      when (t_indices != null)
      {
        match (t_indices)
        {
          | DefValIn as d =>
            assert(d.body == null);
            d.body = body;

          | Match(_, [case]) =>
            assert(case.body == null);
            case.body = body;

          | _ => Util.ice()
        }
        body = t_indices;
      }

      def cache_obj(obj)
      {
        match (unfold (obj))
        {
          | LocalRef
          | This => obj // skip caching

          | obj =>
            def val = LocalValue (fun_header, Util.tmpname ("cached_obj"),
                                  obj.Type, LocalValue.Kind.Plain (), false);
            val.IsCache = true;
            body = TExpr.DefValIn (body.Location, body.Type, val, obj, body);
            TExpr.LocalRef (obj.Location, obj.Type, val)
        }
      }

      def get_ref (expr : TExpr)
      {
        | LocalRef
        | This
        | StaticRef
        | StaticPropertyRef
        | StaticEventRef =>
          expr

        | FieldMember   (obj, fld) => TExpr.FieldMember   (cache_obj(obj), fld)
        | PropertyMember(obj, fld) => TExpr.PropertyMember(cache_obj(obj), fld)
        | EventMember   (obj, fld) => TExpr.EventMember   (cache_obj(obj), fld)
        | ArrayIndexer  (obj, fld) => TExpr.ArrayIndexer  (cache_obj(obj), fld)
        | PointerIndexer(obj, fld) => TExpr.PointerIndexer(cache_obj(obj), fld)
        | Call (expr, parms, tail) =>
          match (unfold (expr))
          {
            | PropertyMember (obj, fld) as expr =>
              def inner = TExpr.PropertyMember(expr.Location, expr.Type, cache_obj (obj), fld);
              TExpr.Call(inner, parms, tail)

            | _ => Util.ice ()
          }

        | _ => Util.ice ($ "invalid cached expr: $expr")
      }

      def expr        = unfold(t_expr);
      ref_is          = get_ref(expr).CopyDebugInfo(fun_header, t_expr);
      ref_is.Location = t_expr.Location;
      ref_is.ty       = t_expr.ty;
      body
    }

    public this (e : PExpr, i : PExpr)
    {
      p_expr = e;
      p_indices = i;
    }
  }
} // namespace
