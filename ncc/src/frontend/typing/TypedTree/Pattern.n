using Nemerle.Compiler;
using Nemerle.Utility;
using Nemerle.Assertions;

namespace Nemerle.Compiler.Typedtree
{
  [Record]
  public variant Pattern : TypedBase
  {
    | Wildcard
    | As          { pat : Pattern; decl : LocalValue; }
    | HasType     { typ : FixedType; }
    | Tuple       { args : list [Pattern]; }
    | Record      { args : list [IMember * Pattern]; }
    | Application { name : TypeInfo; arg : Pattern; }
    | Enum        { fld : IField; val : Nemerle.Compiler.Literal; }
    | Literal     { lit : Nemerle.Compiler.Literal; }
    | Error

    public mutable ty : TypeVar;

    public this () { }
    public this (loc : Location) { base(loc) }

    public Type : TypeVar
    {
      get
      {
        if (ty == null)
          FixedType.Void()
        else
          ty
      }
    }

    public StripEnums(walker : Walker) : Pattern
    {
      def walk(_)
      {
        | Enum(_, literal) => Literal(literal)
        | _ => null
      }
      Walk(walker, walk)
    }


    /// Walk [this] with the function [f].
    ///
    /// The function is applied to each and every pattern node.
    ///
    /// If [f] returns a value different than [null], the value is
    /// returned, from this [Walk] function.
    ///
    /// If it returns [null], the walking function descends into tree
    /// elements in a map-like fashion.
    ///
    /// If the type of pattern returned was to be [null], it is set to
    /// the type of the original pattern.
    ///
    /// This function implements the visitor pattern.
    public Walk([NotNull] walker : Walker, f : Pattern -> Pattern) : Pattern
    {
      def do_walk(pat)
      {
        | Enum
        | Pattern.Literal
        | Error
        | HasType
        | Wildcard => pat
        | As(p, decl) => As(pat.Location, walk (p), decl)
        | Tuple(args) => Tuple(pat.Location, args.Map(walk))

        | Record (args) => Record (pat.Location, args.Map (fun (f, p) { (f, walk (p)) }))
        | Application (c, a) => Application (pat.Location, c, walk (a))
      }
      and walk(pat)
      {
        def res = Util.locate(pat.Location, 
        {
          def res = f(pat);
          if (res == null)
            do_walk(pat)
          else
            res
        });
        when (res.ty == null)
          res.ty = pat.ty;
        res
      }

      walk(this)
    }

    public override ToString () : string { PrettyPrint.SprintPattern (this) }
  } // variant
} // namespace
