using Nemerle.Compiler;
using Nemerle.Compiler.Typedtree.TExpr;
using Nemerle.Compiler.Util;
using Nemerle.Internal;
using Nemerle.Utility;
using Nemerle.Assertions;

using PExpr = Nemerle.Compiler.Parsetree.PExpr;

namespace Nemerle.Compiler.Typedtree
{
  public class Walker
  {
    mutable _funHeader : TFunHeader;

    public this([NotNull] funHeader : TFunHeader)
    {
      _funHeader = funHeader;
    }

    public SetTFunHeader([NotNull] funHeader : TFunHeader) : void
    {
      _funHeader = funHeader;
    }

    public RemoveDebugInfo(tExpr : TExpr) : void
    {
      _funHeader.RemoveDebugInfo(tExpr);
    }

    public CheckDebugInfo(tExpr : TExpr) : void
    {
      _funHeader.CheckDebugInfo(tExpr);
    }

    /// Walk [this] with the function [f].
    ///
    /// The function is applied to each and every expression node.
    ///
    /// If [f] returns a value different than [null], the value is
    /// returned, from this [Walk] function.
    ///
    /// If it returns [null], the walking function descends into tree
    /// elements in a map-like fashion.
    ///
    /// If the type of expression returned was to be [null], it is set
    /// to the type of the original expression.
    ///
    /// This function implements the visitor pattern.
    public Walk(f : TExpr -> TExpr, tExpr : TExpr) : TExpr
    {
      walk(f, tExpr)
    }

    walk(f : TExpr -> TExpr, expr : TExpr) : TExpr
    {
      def res =
        locate(expr.Location)
        {
          def res1 = f(expr);
          def res2 =
            if (res1 == null)
              do_walk(f, expr)
            else
              res1;

          if (res2 == null) expr else res2
        };

      _funHeader.CopyDebugInfo(expr, res);

      when (res.ty == null)
        res.ty = expr.ty;
      when (res : object != expr)
      {
        when (res._N_GetVariantCode() == expr._N_GetVariantCode())
          res.SetParsedObject(expr.ParsedObject);
        //res.IsStatement = expr.IsStatement;
      }
      //Message.Debug ($"walk: $expr -> $res");
      res
    }

    null_walk(f : TExpr -> TExpr, expr : TExpr) : TExpr
    {
      def res =
        locate (expr.Location)
        {
          def res2 = f(expr);
          if (res2 == null)
            do_walk(f, expr)
          else
            res2;
        };

      _funHeader.CopyDebugInfo(expr, res);

      when (res != null)
      {
        when (res.ty == null)
          res.ty = expr.ty;

        when (res : object != expr && res._N_GetVariantCode() == expr._N_GetVariantCode())
        {
          res.SetParsedObject(expr.ParsedObject);
          //res.IsStatement = expr.IsStatement;
        }
      }
      //Message.Debug ($"null_walk: $expr -> $res");
      res
    }


    walks(f : TExpr -> TExpr, exprs : list[TExpr]) : list[TExpr]
    {
      mutable cnt = 0;
      mutable total = 0;
      mutable first_expr = null;

      foreach (expr in exprs)
      {
        when (first_expr == null)
        {
          def expr2 = null_walk(f, expr);
          when (expr2 != null)
            first_expr = expr2;
          cnt++;
        }
        total++;
      }

      if (first_expr == null)
        exprs
      else
      {
        def loop(res, n, lst)
        {
            match (lst)
            {
              | [] => Util.ice()
              | x :: xs =>
                if (n == 0)
                  xs.RevAppend(first_expr :: res)
                else
                  loop(walk(f, x) :: res, n - 1, xs)
            }
        }

        loop([], total - cnt, exprs.Rev())
      }
    }

    do_walk(f : TExpr -> TExpr, expr : TExpr) : TExpr
    {
      match (expr)
      {
        | Cache
        | CacheRef
        | Delayed
        | PropertyMember
        | StaticPropertyRef
        | EventMember
        | Block
        | StaticEventRef =>
          // this is supposed to be run after Typer2
          Message.Warning (expr.Location, $"invalid expr in walk: $(expr.GetType()): $expr");
          assert(false)


        | This
        | LocalRef
        | LocalFunRef
        | StaticRef
        | Error
        | OpCode
        | TypeOf
        | MethodOf | CtorOf | FieldOf
        | TExpr.Literal
        | Base
        | ImplicitValueTypeCtor
        | MethodAddress
        | Goto
        | DefaultValue
        | ConstantObjectRef => null

        | DefFunctionsIn (funs, body) =>
          foreach (fn in funs)
          {
            match (fn.body)
            {
              | FunBody.Typed(body2) =>
                fn.CheckDebugInfo();
                fn.body = FunBody.Typed(Walker(fn).Walk(f, body2))

              | _ => ()
            }
          }
          DefFunctionsIn(funs, walk(f, body))

        | ClosureObjectOf(e)  => ClosureObjectOf(walk(f, e))
        | ClosureFieldOf(e)   => ClosureFieldOf(walk(f, e))

        | MethodRef (obj, meth, tp, notvirt) =>
          def obj = null_walk(f, obj);
          if (obj == null) null
          else
            MethodRef(obj, meth, tp, notvirt)


        | FieldMember (obj, fld) =>
          def obj = null_walk(f, obj);
          if (obj == null) null
          else
            FieldMember (obj, fld)


        | Call (func, parms, is_tail) =>
          def func = walk (f, func);
          mutable rev_parms = [];
          foreach (p in parms)
            rev_parms = Param (p.kind, walk (f, p.expr), p.name, p.required_type) :: rev_parms;
          Call (func, rev_parms.Rev (), is_tail)


        | SelfTailCall (_, parms) =>
          foreach (p in parms)
            p.expr = walk (f, p.expr);
          null

        | Assign(target, source) =>
          def target2 = walk(f, target);
          def source2 = walk(f, source);
          if (target2 : object == target && source2 : object == source)
            null
          else
            Assign(target2, source2)

        | MultipleAssign (assigns) =>
          MultipleAssign (assigns.Map (fun (s, t) { (s, walk (f, t)) }))


        | DefValIn (name, val, body) =>
          def val' = walk (f, val);
          def body' = walk (f, body);
          if (val' : object == val && body' : object == body)
            null
          else
            DefValIn (name, val', body')


        | Match (matched_value, cases) =>
          foreach (case in cases) {
            mutable pats = [];
            foreach ((pat, expr, assigns) in case.patterns) {
              def assigns =
                assigns.Map (fun (v, e) { (v, walk (f, e)) });
              pats = (pat, walk (f, expr), assigns) :: pats
            }
            case.patterns = pats.Rev ();
            case.body = walk (f, case.body);
          }
          def matched_value = null_walk(f, matched_value);
          if (matched_value == null) null
          else
            Match (matched_value, cases)


        | If (cond, e1, e2, l1, l2) =>
          def cond' = walk (f, cond);
          def e1'   = walk (f, e1);
          def e2'   = walk (f, e2);

          if (cond' : object == cond &&
              e1'   : object == e1   &&
              e2'   : object == e2)
            null
          else
            If (cond', e1', e2', l1, l2)


        | Switch (ind, defl, cases) =>
          Switch (walk (f, ind),
                  match (defl) {
                    | Some (d) => Some (walk (f, d))
                    | None => defl
                  },
                  cases.Map (fun (n, e) { (n, walk (f, e)) }))


        | HasType (e, t) =>
          def e = null_walk(f, e);
          if (e == null) null
          else
            HasType (e, t)


        | Throw (exn) =>
          // exception can be null for `throw;' rethrow expression
          if (exn != null)
          {
            def exn = null_walk(f, exn);
            if (exn == null) null
            else Throw(exn)
          }
          else
            null

        | TryFinally (body, handler) =>
          TryFinally (walk (f, body), walk (f, handler))

        | Try (body, cases) =>
          def walk_case(case) {
            | TryCase.Fault (handler) => TryCase.Fault (walk (f, handler))
            | TryCase.Catch (exn, handler) => TryCase.Catch (exn, walk (f, handler))
            | TryCase.Filter (exn, filter, handler) => TryCase.Filter (exn, walk (f, filter), walk (f, handler))
          }
          Try (walk (f, body), cases.Map (walk_case))

        | TypeConversion (expr, t, kind, tl) =>
          def expr = null_walk (f, expr);
          if (expr == null) null
          else
            TypeConversion (expr, t, kind, tl)

        | Sequence(e1, e2) =>
          def res_e1 = walk(f, e1);
          def res_e2 = walk(f, e2);
          if (res_e1 : object == e1 && res_e2 : object == e2)
            null
          else
            Sequence(res_e1, res_e2)


        | Tuple (args) =>
          Tuple (walks (f, args))


        | TupleIndexer (obj, k, n) =>
          def obj = null_walk (f, obj);
          if (obj == null) null
          else
            TupleIndexer (obj, k, n)


        | Array (args, dimensions) =>
          Array (walks (f, args), walks (f, dimensions))


        | ArrayIndexer(obj, args)    => ArrayIndexer(  walk(f, obj), walks(f, args))
        | PointerIndexer(obj, index) => PointerIndexer(walk(f, obj), walk(f, index))
        | MacroEnvelope (id, orig, body, epe) =>
          def body = null_walk (f, body);
          if (body == null) null
          else
            MacroEnvelope (id, orig, body, epe)

        | Label (id, body) =>
          def body = null_walk (f, body);
          if (body == null) null
          else
            Label (id, body)

        | Def
        | Use
           => assert(false)
      }
    }

    public FixupMatchCase(case : TMatchCase) : void
    {
      case.patterns = case.patterns.Map((p, e, a) => (p.StripEnums(this), e, a));
    }
  } // struct
} // namespace
