using System;
using System.Runtime;
using System.Runtime.ConstrainedExecution;

using Nemerle.Assertions;
using Nemerle.Extensions;
using Nemerle.Imperative;
using Nemerle.Utility;

using SCG = System.Collections.Generic;

namespace Nemerle.Compiler
{
  [StructuralEquality]
  public struct Location : IEquatable[string], IComparable[Location]
  {
    public static Default    : Location { get; default Location() }
    public static NoLocation : Location { get Default };

    public Source   : SourceSnapshot { get; }
    public StartPos : int            { get; }
    public EndPos   : int            { get; }

    #region ctors

    public this(fileIndex : int, line : int, col : int)
    {
      def source = FileUtils.GetSource(fileIndex);
      def pos    = source.LineColumnToPosition(LineColumn(line, col));
      StartPos   = pos;
      EndPos     = pos;
      Source     = source;
    }

    public this (fileIndex : int, line : int, col : int, endLine : int, endCol : int)
    {
      def source = FileUtils.GetSource(fileIndex);
      StartPos   = source.LineColumnToPosition(LineColumn(line, col));
      EndPos     = source.LineColumnToPosition(LineColumn(endLine, endCol));
      Source     = source;
    }

    public this ([NotNull] fileName : string, line : int, col : int, endLine : int, endCol : int)
    {
      def source = FileUtils.GetSource(fileName);
      StartPos   = source.LineColumnToPosition(LineColumn(line, col));
      EndPos     = source.LineColumnToPosition(LineColumn(endLine, endCol));
      Source     = source;
    }

    public this([NotNull] source : SourceSnapshot, pos : int)
    {
      this(source, pos, pos)
    }

    public this([NotNull] source : SourceSnapshot, startPos : int, endPos : int)
    {
      assert2(startPos <= endPos);
      Source   = source;
      StartPos = startPos;
      EndPos   = endPos;
    }

    public this([NotNull] source : SourceSnapshot, tok : NSpan)
    {
      this(source, tok.StartPos, tok.EndPos)
    }

    public this([NotNull] source : SourceSnapshot, a : NSpan, b : NSpan)
    {
      this(source, Math.Min(a.StartPos, b.StartPos), Math.Max(a.EndPos, b.EndPos))
    }

    #endregion ctors

    public Span                  : NSpan        { get NSpan(StartPos, EndPos) }
    public Length                : int          { get EndPos - StartPos }
    public FileIndex             : int          { get Source?.FileIndex }
    public IsGenerated           : bool         { get Source?.IsGenerated }
    public IsSourceAvailable     : bool         { get Source?.IsSourceAvailable == true }
    public IsDefault             : bool         { get Source == null }
    public IsEmpty               : bool         { get StartPos == EndPos }
    public IsGeneratedOrEmpty    : bool         { get IsGenerated || IsEmpty }
    public StartLineColumn       : LineColumn   { get Source?.PositionToLineColumn(StartPos) }
    public EndLineColumn         : LineColumn   { get Source?.PositionToLineColumn(EndPos) }
    public LinesColumns          : LinesColumns { get LinesColumns(StartLineColumn, EndLineColumn) }
    public Line                  : int          { get StartLineColumn.Line }
    public Column                : int          { get StartLineColumn.Column }
    public EndLine               : int          { get EndLineColumn.Line }
    public EndColumn             : int          { get EndLineColumn.Column }
    public IsSourceFileAvailable : bool         { get Source?.IsSourceFileAvailable }
    public File                  : string       { get Source?.File?.FullName ?? "" }
    public IsTextAvailable       : bool
    {
      get
      {
        try
        {
          def len = Source?.Text?.Length;
          StartPos >= 0 && EndPos >= 0 && StartPos < len && EndPos <= len
        }
        catch
        {
          | ex => assert2(false, ex.ToString());
          false
        }
      }
    }

    public Contains(other : Location)             : bool                { IntersectsWith(other) }
    public Contains(pos : int)                    : bool                { IntersectsWith(pos, pos) }
    public Contains(start : int, end : int)       : bool                { IntersectsWith(start, end) }
    public GetText()                              : string              { assert2(StartPos >= 0); Source?.Text?.Substring(StartPos, EndPos - StartPos) ?? "" }
    public FromStart()                            : Location            { if (Source == null) this else Location(Source, StartPos) }
    public FromStartAsGenerated()                 : Location            { if (Source == null) this else Location(FileUtils.MakeGeneratedSource(Source), StartPos) }
    public FromEnd ()                             : Location            { if (Source == null) this else Location(Source, EndPos) }
    public FromEndAsGenerated()                   : Location            { if (Source == null) this else Location(FileUtils.MakeGeneratedSource(Source), EndPos) }
    public AsGenerated () : Location                                    { if (Source == null) this else Location(FileUtils.MakeGeneratedSource(Source), StartPos, EndPos) }
    public IntersectsWith(start : int, end : int) : bool                { start <= EndPos && end >= StartPos }
    public IntersectsWith(other : Location)       : bool                { other.Source == Source && IntersectsWith(other.StartPos, other.EndPos) }
    public IntersectsWith(other : NSpan)          : bool                { IntersectsWith(other.StartPos, other.EndPos) }
    public IsNestedIn(other : Location)           : bool                { Source == other.Source && this != other && StartPos >= other.StartPos && EndPos <= other.EndPos }
    public IsNestedInOrEquals(other : Location)   : bool                { Source == other.Source && StartPos >= other.StartPos && EndPos <= other.EndPos }
    public Intersection(start : int, end : int)   : ValueOption[Location]
    {
      def start = Math.Max(StartPos, start);
      def end   = Math.Min(EndPos, end);

      if (start <= end)
        VSome(Location(Source, start, end))
      else
        VNone()
    }

    public Move(startPos : int, endPos : int) : Location
    {
      def source   = Source;
      when (source == null)
        return this;
      Location(source, startPos, endPos)
    }

    public SetLineColumn(line : int, col : int, endLine : int, endCol : int) : Location
    {
      def source   = Source;
      when (source == null)
        return this;
      def startPos = source.LineColumnToPosition(LineColumn(line, col));
      def endPos   = source.LineColumnToPosition(LineColumn(endLine, endCol));
      Location(source, startPos, endPos)
    }

    public override ToString() : string
    {
      $<#V$(Source.Version) $StartPos-$(EndPos - StartPos) $(this.LinesColumns) «$(if (IsTextAvailable) GetText() else "<not available>")»#>
    }

    public MessageString : string { get { ToMessageString() } }

    public ToMessageString() : string
    {
      if (this.Source == null)
        ""
      else
      {
        def sourceFileName       = Source.File.FullName;
        def file                 = if (string.IsNullOrEmpty(sourceFileName)) "<unknown source>" else sourceFileName;
        def (line, column)       = StartLineColumn;
        def (endLine, endColumn) = EndLineColumn;
        if (line != 0)
          $"$file($line,$column,$endLine,$endColumn):"
        else
          file + ": "
      }
    }

    public Equals(str : string) : bool
      implements IEquatable[string].Equals
    {
      if (str : object != null && IsTextAvailable && EndPos - StartPos == str.Length)
        string.CompareOrdinal(Source.Text, StartPos, str, 0, str.Length) == 0
      else
        false
    }

    public Combine(other : Location) : Location
    {
      def source = this.Source;
      when (source == null)
        return other;

      def otherSource = other.Source;
      when (otherSource == null)
        return this;

      if (source != otherSource)
        if (source.IsGenerated && otherSource.IsGenerated)
          this
        else
          other
      else
        Location(source, Math.Min(StartPos, other.StartPos), Math.Max(EndPos, other.EndPos))
    }

    public static @+(a : Location, b : Location) : Location
    {
      a.Combine(b)
    }

    public static @==(a : Location, b : string) : bool
    {
      a.Equals(b)
    }

    public static @==(a : string, b : Location) : bool
    {
      b.Equals(a)
    }

    public static @!=(a : Location, b : string) : bool
    {
      !a.Equals(b)
    }

    public static @!=(a : string, b : Location) : bool
    {
      !b.Equals(a)
    }

    public WithSpan(newSpan : NSpan) : Location
    {
      Location(Source, newSpan)
    }

    public CompareTo(other : Location) : int
    {
      def otherSource = other.Source;
      def source      = this.Source;

      when (otherSource : object == null)
        return if (source == null) 0 else 1;

      when (source : object == null)
        return -1;

      def result = other.Source.File.FullName.CompareTo(Source.File.FullName);
      when (result != 0)
        return result;

      Span.CompareTo(other.Span)
    }

    public TruncateToEndLine() : Location
    {
      when (IsEmpty || Source == null || Source.IsFake)
        return this;

      def text = Source.Text;

      when (string.IsNullOrEmpty(text))
        return this;

      for (mutable i = StartPos;  i < EndPos && i < text.Length; i++)
      {
        def ch = text[i];
        when (ch == '\r' || ch == '\n')
          return Location(Source, StartPos, i);
      }

      this
    }

    // TODO: Убрать после бутстрапинга!
    public static GetFileIndex(filePath : string) : int { FileUtils.GetFile(filePath).Id }
  }
}
