using System.Text;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Compiler
{
  [Record]
  public sealed class GeneratorSourceSnapshot : SourceSnapshot
  {
    private mutable _builder : StringBuilder = StringBuilder();
    private mutable _text : string = "";

    public this(builder : StringBuilder, file : File)
    {
      base(textOffset=0, hashCode=0);
      _builder = builder;
      File     = file;
    }

    public override File              : Nemerle.Compiler.File { get; }
    public override IsGenerated       : bool                  { get true }
    public override IsSourceAvailable : bool                  { get true }
    public override OriginalText      : string                { get Text }
    public override Version           : int                   { get; private set; default 1; }
    public override IsFake            : bool                  { get false }
    public override Text              : string
    {
      get
      {
        UpdateText();
        _text
      }
    }

    public UpdateText() : void
    {
      when (_text.Length != _builder.Length)
      {
        Version++;
        _text     = _builder.ToString();
        _hashCode = _text.GetHashCode();
      }
    }

    public FinishGeneration() : void
    {
      UpdateText();
      _builder = null;
    }

    public override GetHashCode() : int { _builder.GetHashCode() ^ File.GetHashCode() }
  }
}
