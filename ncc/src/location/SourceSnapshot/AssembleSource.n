using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Compiler
{
  internal class AssembleSource : SourceSnapshot
  {
    public this(assembleFullPath : string)
    {
      File = FileUtils.GetFile(assembleFullPath);
      base(textOffset=0, hashCode=File.FullName.GetHashCode());
    }

    [OverrideObjectEquals]
    public new Equals(other : SourceSnapshot) : bool
    {
      when (other == this)
        return true;

      other != null && _hashCode == other._hashCode && other.File == this.File && this.Text.Equals(other.Text, StringComparison.Ordinal)
    }

    public override File                  : File   { get; }
    public override OriginalText          : string { get "" }
    public override Text                  : string { get "" }
    public override Version               : int    { get 1 }
    public override IsFake                : bool   { get false }
    public override IsGenerated           : bool   { get false }
    public override IsSourceAvailable     : bool   { get false }
    public override IsSourceFileAvailable : bool   { get false }
  }
}
