using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Compiler
{
  public partial module FileUtils
  {
    this()
    {
      DefaultFile = GetFile("");
      DefaultSource = FakeSourceSnapshot(DefaultFile);
    }

    public DefaultFile   : File           { get; private set; }
    public DefaultSource : SourceSnapshot { get; private set; }

    private _isFileInIndentationSyntax : List[bool]                    = List();
    private _filesMap                  : Hashtable[string, File]       = Hashtable();
    private _sourceSnapshots           : List[SourceSnapshot]          = List();
    private _generatedSnapshots        : List[GeneratedSourceSnapshot] = List();
    private _files                     : List[File]                    = List();

    public SetIndentationSyntaxForFile(fileIndex : int, isIndntSyntax : bool) : void
    {
      lock (_isFileInIndentationSyntax)
        _isFileInIndentationSyntax[fileIndex] = isIndntSyntax;
    }

    public IsFileInIndentationSyntax(fileIndex : int) : bool
    {
      _isFileInIndentationSyntax[fileIndex]
    }

    public GetSource(filePath : string) : SourceSnapshot
    {
      GetSource(GetFile(filePath))
    }

    public GetSource(fileIndex : int) : SourceSnapshot
    {
      assert2(fileIndex > 0 && fileIndex < _sourceSnapshots.Count);
      mutable source = _sourceSnapshots[fileIndex];
      when (source : object == null)
      {
        def file = _files[fileIndex];
        def path = file.FullName;
        if (IO.File.Exists(path))
        {
          def ext = IO.Path.GetExtension(path).ToLowerInvariant();
          if (ext == ".dll" || ext == ".exe")
          {
            source = AssembleSource(path);
            _sourceSnapshots[fileIndex] = source;
          }
          else
          {
            source = FileSourceSnapshot(file, version=1, isGenerated=false);
            _sourceSnapshots[fileIndex] = source;
          }
        }
        else
        {
          source = FakeSourceSnapshot(file);
          _sourceSnapshots[fileIndex] = source;
        }
      }
      source
    }

    public MakeGeneratedSource(source : SourceSnapshot) : SourceSnapshot
    {
      | x is GeneratedSourceSnapshot => x
      | _ =>
        def index = source.File.Id;
        mutable generated = _generatedSnapshots[index];

        when (generated != null && generated.Base : object == source)
          return generated;

          generated = GeneratedSourceSnapshot(source);
        _generatedSnapshots[index] = generated;
        generated
    }

    public GetSource([NotNull] file : File) : SourceSnapshot { GetSource(file.Id) }

    public GetFile([NotNull] fullPath : string) : File
    {
      mutable file;
      unless (_filesMap.TryGetValue(fullPath, out file))
      {
        file = File(if (fullPath == "") "" else IO.Path.GetFullPath(fullPath), _files.Count);
        _files.Add(file);
        _isFileInIndentationSyntax.Add(false);
        _sourceSnapshots.Add(null);
        _generatedSnapshots.Add(null);
        _filesMap.Add(fullPath, file);
      }
      file
    }

    public GetIndexArrayLength() : int { _files.Count; }
  }
}
