using Nemerle.Collections;
using Nemerle.Compiler.Typedtree;
using Nemerle.Utility;

using SC = System.Collections;
using SCS = System.Collections.Specialized;
using DN = dnlib.DotNet;

namespace Nemerle.Compiler
{
  public partial class LocalValue : TypedBase, System.IComparable[LocalValue], System.IEquatable[LocalValue]
  {
    variant ILKind
    {
      | None
      | Param { parameter : DN.Parameter; }
      | Local { builder : DN.Emit.Local; }
    }

    mutable _ilKind : ILKind = ILKind.None();

    CheckIL() : void
    {
      when (postponed_declaration)
      {
        postponed_declaration = false;
        when (declare != null)
          declare();
      }
      assert(!(_ilKind is ILKind.None));
      Util.cassert(!(_ilKind is ILKind.None), $"_ilKind is none for $this (id=$id)");
    }

    internal IsByRefParm : bool
    {
      get
      {
        CheckIL();
        if (_ilKind is ILKind.Param(p))
          p.Type is DN.ByRefSig
        else
          false
      }
    }

    internal IsParm : bool
    {
      get
      {
        CheckIL();
        _ilKind is ILKind.Param
      }
    }

    internal LocalSlot : DN.Emit.Local
    {
      get
      {
        CheckIL();

        if (_ilKind is ILKind.Local(slot))
          slot
        else
          Util.ice()
      }
      set
      {
        Util.cassert(_ilKind is ILKind.None);
        _ilKind = ILKind.Local(value);
      }
    }

    internal Parameter : DN.Parameter
    {
      get
      {
        CheckIL();
        if (_ilKind is ILKind.Param(p))
          p
        else
          Util.ice()
      }
      set
      {
        Util.cassert(_ilKind is ILKind.None);
        _ilKind = ILKind.Param(value);
      }
    }
  } // class
} // namespace
