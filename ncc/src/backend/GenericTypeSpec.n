using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Utility;

using DN = dnlib.DotNet;
using SCG = System.Collections.Generic;

namespace Nemerle.Compiler
{
  public class GenericTypeSpec : TypeSpec[DN.GenericInstSig]
  {
    private mutable _memberReferences : SCG.Dictionary[IMember, DN.MemberRef];

    public this(owner : TypeInfo, typeargs : array[DN.TypeSig])
    {
      base(DN.GenericInstSig((owner :> IBackendType).TypeSig :> DN.ClassOrValueTypeSig, typeargs));
    }

    public override MakeFieldRef(field : IField) : DN.IField
    {
      when (_memberReferences == null)
        _memberReferences = SCG.Dictionary();

      mutable memberRef;
      unless (_memberReferences.TryGetValue(field, out memberRef))
      {
        def fieldRef = (field :> IBackendField).FieldRef;
        memberRef = DN.MemberRefUser(fieldRef.Module, fieldRef.Name, fieldRef.FieldSig, TypeRef);
        _memberReferences.Add(field, memberRef);
      }

      memberRef
    }

    public override MakeMethodRef(method : IMethod) : DN.IMethod
    {
      when (_memberReferences == null)
        _memberReferences = SCG.Dictionary();

      mutable memberRef;
      unless (_memberReferences.TryGetValue(method, out memberRef))
      {
        def methodRef = (method :> IBackendMethod).MethodRef;
        memberRef = DN.MemberRefUser(methodRef.Module, methodRef.Name, methodRef.MethodSig, TypeRef);
        _memberReferences.Add(method, memberRef);
      }

      memberRef
    }
  } // class
} // namespace
