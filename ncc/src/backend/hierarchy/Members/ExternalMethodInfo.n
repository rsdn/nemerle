using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler.Typedtree;
using Nemerle.IO;
using Nemerle.Late;
using Nemerle.Utility;
using System.IO;

using DN = dnlib.DotNet;
using PT = Nemerle.Compiler.Parsetree;  
using SCG = System.Collections.Generic;

namespace Nemerle.Compiler 
{
  public class ExternalMethodInfo : ExternalMemberInfo, IMethod, IBackendMember, IBackendMethod
  {
    [Accessor]
    protected handle      : DN.MethodDef;
    [Accessor (Header)]
    protected fun_header  : TFunHeader;
    protected is_var_args : bool;
    
    public this (tenv : Map [string, StaticTypeVar], lib : LibraryReference, h : DN.MethodDef, rawInternals : bool)
    {
      handle = h;
      base(lib);

      def (tyvars, tenv)  = TyCodec.ReflectTyparms (lib, tenv, h);
      def genericResolver = tenv.ToGenericResolver();
      
      def ret_type =
        if (handle.IsConstructor)
          InternalType.Void
        else
          library.TypeOfType(genericResolver, handle.ReturnType, rawInternals);
      
      def parms      = handle.Parameters;
      def firstIndex = parms.MethodSigIndexBase;

      when (parms.Count - firstIndex > 0)
        is_var_args = parms.Item[parms.Count - 1].ParamDef.IsDefined(InternalType.ParamArrayAttribute_tc);

      mutable fparms = [];

      for (mutable i = parms.Count - 1; i >= firstIndex; i--)
      {
        def p        = parms.Item[i];
        def paramDef = p.ParamDef;

        mutable paramType = p.Type;
        while (paramType is DN.ModifierSig)
          paramType = paramType.Next;

        def (parmkind, ty) =
          if (paramType is DN.ByRefSig as byRefSig)
          {
            def ty = library.TypeOfType(genericResolver, byRefSig.Next, rawInternals);

            if (paramDef.IsOut) (ParamKind.Out, FixedType.Out(ty))
            else                (ParamKind.Ref, FixedType.Ref(ty))
          } 
          else           (ParamKind.Normal, library.TypeOfType(genericResolver, paramType, rawInternals));

        def attrs      = LibraryReference.ConvertCustomAttributesData(paramDef, library)
                                         .Map((name, args) => <[ $name(..$args)]>);

        def fp = TParameter(
          loc          = lib.Location,
          name         = p.Name,
          nameLocation = Location.Default,
          color        = 0,
          ty           = ty,
          typeLocation = lib.Location,
          kind         = parmkind,
          modifiers    = AttributesAndModifiers(NemerleModifiers.None, attrs)
        );

        when (paramDef.HasDefault)
        {
          fp.default_value = Some(
            if (paramDef.HasConstant)
              TExpr.Literal(ty, Literal.FromObject(paramDef.Constant.Value))
            else
              TExpr.DefaultValue(ty));
        }

        fparms ::= fp;
      }
      
      fun_header = TFunHeader(
          loc          = library.Location,
          name         = Name,
          ret_type     = ret_type,
          ret_type_loc = library.Location,
          parms        = fparms,
          typarms      = tyvars,
          tenv         = null
        );

      attributes = NemerleModifiers.None;
      when (handle.IsAbstract)    attributes |= NemerleModifiers.Abstract;
      when (handle.IsVirtual)     attributes |= NemerleModifiers.Virtual;
      when (handle.IsFinal)       attributes |= NemerleModifiers.Sealed;
      when (handle.IsStatic)      attributes |= NemerleModifiers.Static;
      when (handle.IsSpecialName) attributes |= NemerleModifiers.SpecialName;
     
      when (handle.IsPrivate)     attributes |= NemerleModifiers.Private;
      when (handle.IsPublic)      attributes |= NemerleModifiers.Public;
      when (handle.IsAssembly || (handle.IsFamilyOrAssembly && lib.IsFriend))    
                                  attributes |= NemerleModifiers.Internal;
      when (handle.IsFamily || handle.IsFamilyOrAssembly)
                                  attributes |= NemerleModifiers.Protected;

      when(InternalType.Conditional_tc != null)
        IsConditional = HasAttribute(InternalType.Conditional_tc);
    }
    
    public DeclaringType : TypeInfo
    {
      //[Nemerle.Memoize (InvalidValue = null)]
      get { library.ReferenceManager.TypeInfoOfType(handle.DeclaringType) }
    }
    
    //[Nemerle.Memoize (InvalidValue = null)]
    public GetMemType () : FixedType.Fun { FixedType.ConstructFunctionType (GetHeader ()) }

    public GetFreshType () : FixedType * list [TypeVar]
    {
      if (fun_header.TypeParameters.IsEmpty)
        (GetMemType (), [])
      else 
      {
        def (subst, vars) = Subst.Fresh (fun_header.TypeParameters);
        (subst.MonoApply (GetMemType ()), vars)
      }
    }
    
    public Name        : string      { get { handle.Name } }
    public IsFinal     : bool        { get { handle.IsFinal } }
    public MemberKind  : MemberKinds { get { if (handle.IsConstructor) MemberKinds.Constructor else MemberKinds.Method } }
    public IsVarArgs   : bool        { get { is_var_args } }
    public IsExtension : bool        { get; internal set; }

    public override IsConditional : bool { get }

    [Memoize(Scope = Instance, Synchronized = false)]
    public override GetConditions() : list[string]
    {
      handle.GetConditions()
    }

    public override ToString()    : string        { MemberBuilder.DescribeMember (this) }

    public override IsConstructor : bool          { get { handle.IsConstructor } }

    public GetHeader()     : TFunHeader     { fun_header }
    public GetParameters() : list[TParameter] { fun_header.Parameters }

    public BuiltinKind : BuiltinMethodKind { get { BuiltinMethodKind.NotBuiltin() } }
    public ReturnType  : TypeVar             { get { fun_header.ReturnType } }
    
    public CanAccess(source : TypeInfo) : bool
    {
      handle.IsPublic 
        || source.IsDerivedFrom(DeclaringType) && (handle.IsFamily || handle.IsFamilyOrAssembly)
        || this.library.IsFriend && (handle.IsFamilyOrAssembly ||  handle.IsAssembly);
    }

    public MethodRef : DN.IMethodDefOrRef
    {
      mutable methodRef : DN.MemberRef;
      get
      {
        when (methodRef == null)
        {
          def moduleBuilder = Library.Manager.Hierarchy.GetModuleBuilder();
          // TODO: support C modifiers
          def methodSig = DN.MethodSig(handle.MethodSig.CallingConvention, fun_header.TypeParameters.Length :> uint,
            fun_header.ReturnType.ToTypeSig(), fun_header.Parameters.MapToArray(p => p.Type.ToTypeSig()));
          def owner     = DeclaringType.ToTypeRef();
          methodRef     = DN.MemberRefUser(moduleBuilder, handle.Name, methodSig, owner) |> moduleBuilder.UpdateRowId;
        }
        methodRef
      }
    }

    GetMethodInfo() : DN.MethodDef
      implements IBackendMember.GetHandle, IBackendMethod.get_MethodDef
    {
      handle
    }
  } // class
} // namespace
