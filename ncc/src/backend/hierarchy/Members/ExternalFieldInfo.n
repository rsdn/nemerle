using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler.Typedtree;
using Nemerle.IO;
using Nemerle.Late;
using Nemerle.Utility;
using System.IO;

using DN = dnlib.DotNet;
using PT = Nemerle.Compiler.Parsetree;  
using SCG = System.Collections.Generic;

namespace Nemerle.Compiler 
{
  public class ExternalFieldInfo : ExternalMemberInfo, IField, IBackendMember, IBackendField
  {
    [Accessor]
    protected handle  : DN.FieldDef;
    protected tt_type : FixedType;

    public this (tenv : Map [string, StaticTypeVar], lib : LibraryReference, h : DN.FieldDef)
    {
      handle = h;
      base (lib);

      tt_type = library.TypeOfType (tenv, handle.FieldType);

      attributes = NemerleModifiers.None;
      unless (handle.IsInitOnly || handle.IsLiteral) attributes |= NemerleModifiers.Mutable;
      when (handle.IsStatic)                         attributes |= NemerleModifiers.Static;
      when (handle.IsSpecialName)                    attributes |= NemerleModifiers.SpecialName;

      when (handle.IsPrivate)            attributes |= NemerleModifiers.Private;
      when (handle.IsPublic)             attributes |= NemerleModifiers.Public;
      when (handle.IsFamily)             attributes |= NemerleModifiers.Protected;
      when (handle.IsAssembly)           attributes |= NemerleModifiers.Internal;
      when (handle.IsFamilyAndAssembly)  attributes |= NemerleModifiers.Internal %| NemerleModifiers.Protected;

      when (!handle.IsInitOnly && !handle.IsLiteral)
      {
        foreach (a in handle.CustomAttributes)
        {
          match (a.TypeFullName)
          {
            | "Nemerle.Internal.VolatileModifier"   => IsVolatile = true;
            | "Nemerle.Internal.ImmutableAttribute" => attributes |= NemerleModifiers.CompilerMutable;
            | _ => ()
          }
        }

        def readModifiers(t : DN.TypeSig)
        {
          | t is DN.CModReqdSig =>
            when (t.Modifier.FullName == "System.Runtime.CompilerServices.IsVolatile")
              IsVolatile = true;
            readModifiers(t.Next)

          | t is DN.CModOptSig => readModifiers(t.Next)
          | _ => ()
        }
        readModifiers(handle.FieldType);
      }
    }

    public DeclaringType : TypeInfo
    {
      //[Nemerle.Memoize (InvalidValue = null)]
      get { library.ReferenceManager.TypeInfoOfType(handle.DeclaringType) }
    }
    
    public Name : string { get { handle.Name } }

    public override ToString () : string { MemberBuilder.DescribeMember (this) }

    public MemberKind : MemberKinds { get { MemberKinds.Field } }

    public GetMemType () : FixedType { tt_type }
    
    public HasBeenAssigned : bool
    {
      get { true }
      set { base.HasBeenUsed = value }
    }
    
    public IsLiteral : bool { get { handle.IsLiteral } }

    public GetValue () : Literal
    {
      assert(IsLiteral);
      def lit = 
        match (handle.Constant.Value) 
        {
          | val is ulong  => Literal.Integer(val, false, null).WithProperType ()
          | val is double => Literal.Double(val)
          | val is float  => Literal.Float(val)
          | val is string => Literal.String(val)
          | val is DN.UTF8String => Literal.String(val)
          | val is char   => Literal.Char(val)
          | val is bool   => Literal.Bool(val)
          | val =>
            def val = System.Convert.ToInt64(val);
            if (val == long.MinValue)
              Literal.Integer (0x8000000000000000UL, true, InternalType.Int64)
            else
              Literal.Integer (System.Math.Abs(val) :> ulong, val < 0, null).WithProperType ()
        };

      if (tt_type is FixedType.Class(TypeInfo(IsEnum = true, UnderlyingType = FixedType.Class as enum_subtype), []))
      {
        def lit = lit :> Literal.Integer;
        def lit = Literal.Integer (lit.val, lit.is_negative, enum_subtype);
        Literal.Enum (lit, library.ReferenceManager.TypeInfoOfType(handle.DeclaringType), this)
      } else
        lit
    }

    public IsMutable : bool
    {
      get
      {
        !handle.IsInitOnly && !handle.IsLiteral && !(attributes %&& NemerleModifiers.CompilerMutable)
      }
    }

    public IsVolatile : bool { get; }

    public CanAccess (source : TypeInfo) : bool
    {
      handle.IsPublic 
        || source.IsDerivedFrom(DeclaringType) && (handle.IsFamily || handle.IsFamilyOrAssembly)
        || (this.library.IsFriend && (handle.IsAssembly || handle.IsFamilyOrAssembly));
    }

    public FieldRef : DN.IField
    {
      mutable fieldRef : DN.MemberRef;
      get
      {
        when (fieldRef == null)
        {
          def moduleBuilder = Library.Manager.Hierarchy.GetModuleBuilder();
          // TODO: support C modifiers
          def fieldSig = DN.FieldSig(tt_type.ToTypeSig());
          def owner    = DeclaringType.ToTypeRef();
          fieldRef     = DN.MemberRefUser(moduleBuilder, handle.Name, fieldSig, owner) |> moduleBuilder.UpdateRowId;
        }
        fieldRef
      }
    }

    GetHandle() : DN.IMemberDef
      implements IBackendMember.GetHandle
    {
      handle
    }
  } // class 
} /* namespace */
