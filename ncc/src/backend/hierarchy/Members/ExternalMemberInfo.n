using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler.Typedtree;
using Nemerle.IO;
using Nemerle.Late;
using Nemerle.Utility;
using System;
using System.IO;

using DN = dnlib.DotNet;
using PT = Nemerle.Compiler.Parsetree;
using SCG = System.Collections.Generic;

namespace Nemerle.Compiler
{
  public abstract class ExternalMemberInfo : MemberInfo, System.IEquatable[ExternalMemberInfo], IBackendMember
  {
    GetHandle() : DN.IMemberDef
      implements IBackendMember.GetHandle
    { throw NotImplementedException() }
    
    public virtual NameLocation : Location { get { this.Location } }

    [Accessor]
    protected library : LibraryReference;
    protected id      : int;

    protected InternalType    : InternalTypeClass { get { library.Manager.InternalType } }
    protected SystemTypeCache : SystemTypeClass   { get { library.Manager.SystemTypeCache } }

    public this(lib : LibraryReference)
    {
      library = lib;
      id = lib.Manager.GetNewId();

      when (InternalType.Obsolete_tc != null)
        is_obsolete = HasAttribute (InternalType.Obsolete_tc);
    }

    internal override GetObsoletionDetails() : string * bool
    {
      (this : IBackendMember).GetHandle().GetObsoletionDetails()
    }

    public HasAttribute (attribute : TypeInfo) : bool
    {
      (this : IBackendMember).GetHandle().IsDefined(attribute)
    }

    public Location : Location { get { library.Location } }

    public override GlobalEnv : GlobalEnv { get { library.Manager.CoreEnv } }

    [Memoize]
    public override GetModifiers () : AttributesAndModifiers
    {
      def attrs     = LibraryReference.ConvertCustomAttributesData((this : IBackendMember).GetHandle(), library);
      def attrAsts  = attrs.Map((name, args) => <[ $name(..$args)]>);
      AttributesAndModifiers(Attributes, attrAsts)
    }

    public override IsCustomAttributeDefined(attributeFullName : string) : bool
    {
      GetModifiers().IsCustomAttributeDefined(attributeFullName, library.Manager.CoreEnv)
    }

    [Nemerle.OverrideObjectEquals]
    public Equals (o : ExternalMemberInfo) : bool
      implements System.IEquatable[ExternalMemberInfo].Equals
    {
      assert(o != null);
      def x = (this : IBackendMember).GetHandle();
      def y = (o : IBackendMember).GetHandle();
      try { id == o.id || y.Equals(x) }
      catch
      { _ =>
        try { x.Equals(y) }
        catch
        { _ =>
          false
        }
      }
    }

    public override GetHashCode () : int { id }

    protected CreateMethodInfo(tenv : Map[string, StaticTypeVar], meth : DN.MethodDef) : ExternalMethodInfo
    {
      assert(meth != null);
      ExternalMethodInfo(tenv, library, meth, false)
    }
  }
} /* namespace */
