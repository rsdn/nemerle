using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler.Typedtree;
using Nemerle.IO;
using Nemerle.Late;
using Nemerle.Utility;
using System.IO;

using DN = dnlib.DotNet;
using PT = Nemerle.Compiler.Parsetree;  
using SCG = System.Collections.Generic;

namespace Nemerle.Compiler 
{
  public class ExternalPropertyInfo : ExternalMemberInfo, IProperty, IBackendMember, IBackendProperty
  {
    [Accessor]
    protected handle     : DN.PropertyDef;
    [Accessor]
    protected getter     : ExternalMethodInfo;
    [Accessor]  
    protected setter     : ExternalMethodInfo;
    protected any_method : ExternalMethodInfo;
    protected mem_type   : FixedType;

    public this (tenv : Map [string, StaticTypeVar], lib : LibraryReference, h : DN.PropertyDef, hasGet : bool, hasSet : bool)
    {
      handle = h;
      base (lib);

      when (hasGet)
        getter = CreateMethodInfo(tenv, handle.GetMethod);

      when (hasSet)
        setter = CreateMethodInfo(tenv, handle.SetMethod);

      if (getter == null)
        any_method = setter;
      else
        any_method = getter;

      assert(any_method != null);

      def ret_type = library.TypeOfType (tenv, handle.PropertySig.RetType);

      def (args, ret_type) =
        if (getter != null)
          match (getter.GetMemType()) 
          {
            | FixedType.Fun (t, r) => (t.FixedValue.GetFunctionArguments (), r.FixedValue)
          }
        else if (setter != null)
          match (setter.GetMemType ())
          {
            | FixedType.Fun (t, _) =>
              def (args, r) = NList.DivideLast (t.FixedValue.GetFunctionArguments ());
              (args, r)
          }
        else ([], ret_type);

      if (args.IsEmpty)
        mem_type = ret_type;
      else
        mem_type = FixedType.ConstructFunctionType (args, ret_type);
        
      attributes = any_method.Attributes;
    }

    public DeclaringType : TypeInfo
    {
      //[Nemerle.Memoize (InvalidValue = null)]
      get { library.ReferenceManager.TypeInfoOfType(handle.DeclaringType) }
    }
    
    public Name       : string      { get { handle.Name } }
    public MemberKind : MemberKinds { get { MemberKinds.Property } }
    public IsMutable  : bool        { get { setter != null } }

    public GetGetter()                  : IMethod         { getter }
    public GetSetter()                  : IMethod         { setter }
    public GetMemType()                 : FixedType       { mem_type }
    public CanAccess(source : TypeInfo) : bool            { any_method.CanAccess (source) }

    GetPropertyInfo() : DN.PropertyDef
      implements IBackendMember.GetHandle, IBackendProperty.GetPropertyInfo
    { handle }
    
    public override ToString()  : string        { MemberBuilder.DescribeMember (this) }

    public IsIndexer : bool
    {
      //[Nemerle.Memoize]
      get
      {
        if (getter != null)
          getter.GetParameters() is _ :: _
        else if (setter != null)
          setter.GetParameters() is _ :: _ :: _
        else
          false
      }
    }
  } // class
} /* namespace */
