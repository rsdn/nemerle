using Nemerle.IO;
using Nemerle.Collections;

using Nemerle.Compiler.Typedtree;

using SRC = System.Runtime.CompilerServices;

namespace Nemerle.Compiler
{
  public class TupleType
  {
    internal tycon : TypeInfo;
    internal fields : array [IField];
    internal ctor : IMethod;

    public GetField (pos : int) : IField
    {
      fields [pos]
    }

    public Ctor : IMethod
    {
      get { ctor }
    }

    public TyCon : TypeInfo
    {
      get { tycon }
    }

    public static Make (ty : TypeVar) : FixedType.Class
    {
      match (ty.Fix ()) {
        | Tuple (types) =>
            def inst = ty.Manager.InternalType.GetTupleType (types.Length);
            FixedType.Class (inst.tycon, types)
        | _ => Util.ice ()
      }
    }

    get_field (pos : int) : IField
    {
      match (tycon.LookupMember (sprintf ("Field%d", pos - 1))) {
        | [x] => x :> IField
        | _ => assert(false)
      }
    }

    static name = ["Nemerle", "Builtins", "Tuple"] : list [string];

    public static IsTupleMember (ty : IMember) : bool
    {
      def dt = ty.DeclaringType;
      def typarmsCount = dt.TyparmsCount;
      typarmsCount > 1 && dt.Equals (dt.Manager.InternalType.GetTupleType (typarmsCount).tycon)
    }

    internal this (m : ManagerClass, size : int)
    {
      tycon = m.NameTree.LookupInternalType (name, size);
      fields = array (size + 1);
      for (mutable i = 1; i <= size; ++i)
        fields [i] = get_field (i);
      ctor = tycon.LookupMember (".ctor").Head :> IMethod;
    }
  }
} // end ns
