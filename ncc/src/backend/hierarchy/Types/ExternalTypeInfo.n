using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler.Typedtree;
using Nemerle.IO;
using Nemerle.Imperative;
using Nemerle.Late;
using Nemerle.Utility;
using System.IO;

using DN = dnlib.DotNet;
using PT = Nemerle.Compiler.Parsetree;
using SCG = System.Collections.Generic;

namespace Nemerle.Compiler
{
  internal class ExternalTypeInfo : TypeInfo, IBackendMember, IBackendType
  {
    [Accessor]
    protected system_type : DN.TypeDef;

    protected GetHandle() : DN.IMemberDef implements IBackendMember.GetHandle { system_type }

    protected         library                       : LibraryReference;
    internal          tenv                          : Map [string, StaticTypeVar] = Map ();
    protected mutable direct_supertypes             : list [FixedType.Class];
    private   mutable _isDirectSupertypesNormalized : bool;

    public this(lib : LibraryReference, h : DN.TypeDef, ns_node : NamespaceTree.Node)
    {
      base(ns_node, lib.Manager, ns_node.GetDisplayName());

      TyparmsCount = h.GenericParameters.Count;

      // first cache ourself to avoid loops
      LibraryReferenceManager.CacheTypeInfo (h, this, ns_node);

      //_typesTreeVersion = lib.Manager.TypesTreeVersion;

      library     = lib;
      system_type = h;

      when (system_type.DeclaringType != null)
        tenv = (lib.ReferenceManager.TypeInfoOfType(system_type.DeclaringType) :> ExternalTypeInfo).tenv;

      // init typarms and self_type
      (typarms, tenv, direct_supertypes, _superTypes) = TyCodec.ReflectTypeBuilder(library, tenv, system_type);

      when (h.Namespace == "Nemerle.Builtins" && h.Name.StartsWith ("Array"))
      {
        direct_supertypes = [InternalType.Array];
        _superTypes ::= InternalType.Array;
      }

      foreach (t in _superTypes)
      {
        _superTypesLookup.Add(t, 0);

        if (_superTypeInfosLookup.Contains(t.tycon))
          _superTypeInfosLookup[t.tycon] = t :: _superTypeInfosLookup[t.tycon];
        else
          _superTypeInfosLookup[t.tycon] = [t];
      }

      def parms = typarms.Map(FixedType.StaticTypeVarRef(_));
      self_type = FixedType.Class(this, parms);

      //_superTypeInfosLookup[InternalType.Object_tc] = [InternalType.Object]; // FIXME: В этот момент еще нет InternalType.Object
      _superTypeInfosLookup[this] = [GetMemType()];
      _superTypesCalculated = true;

      TyCodec.ReflectConstraints(library, tenv, system_type, self_type, typarms);

      attributes = NemerleModifiers.None;

      when (system_type.IsAbstract)    attributes |= NemerleModifiers.Abstract;
      when (system_type.IsSealed)      attributes |= NemerleModifiers.Sealed;
      when (system_type.IsValueType)   attributes |= NemerleModifiers.Struct;
      when (system_type.IsSpecialName) attributes |= NemerleModifiers.SpecialName;

      if (system_type.DeclaringType == null)
      {
        if (system_type.IsPublic) attributes |= NemerleModifiers.Public
        else                      attributes |= NemerleModifiers.Internal;
      }
      else
      {
        when (system_type.IsNestedPrivate)  attributes |= NemerleModifiers.Private;
        when (system_type.IsNestedPublic)   attributes |= NemerleModifiers.Public;
        when (system_type.IsNestedFamily)   attributes |= NemerleModifiers.Protected;
        when (system_type.IsNestedAssembly) attributes |= NemerleModifiers.Internal;
      }

      AttributeTargets = System.AttributeTargets.All;

      foreach (a in system_type.CustomAttributes)
      {
        match (a.TypeFullName)
        {
          | "System.Reflection.DefaultMemberAttribute" when a.ConstructorArguments.Count == 1 =>
            // there can be indexer in the base type, let DefaultIndexer property handle it
            default_indexer = a.ConstructorArguments[0].Value :> DN.UTF8String;

          | "System.AttributeUsageAttribute" when a.ConstructorArguments.Count == 1 =>
            AttributeTargets = System.Convert.ToInt32(a.ConstructorArguments[0].Value) :> System.AttributeTargets;

          | "System.ObsoleteAttribute"                => is_obsolete = true;
          | "System.Diagnostics.ConditionalAttribute" => _isConditional = true;
          | _ => ()
        }
      }

      when (lib.ReferenceManager.add_buildins)
        AddBuiltins();

      decode_extension_methods(lib.ReferenceManager);
    }

    public override IsNotPublicExternal : bool { get { SystemType?.IsNotPublic } }

    public override TyparmsCount : int { get; }

    #region Special numeric overloads

    internal static numeric_types : Hashtable [string, NumericKind];

    static this ()
    {
      numeric_types = Hashtable ();
      numeric_types.Add ("SByte", NumericKind.Signed);
      numeric_types.Add ("Int16", NumericKind.Signed);
      numeric_types.Add ("Int32", NumericKind.Signed);
      numeric_types.Add ("Int64", NumericKind.Signed);
      numeric_types.Add ("Byte", NumericKind.Unsigned);
      numeric_types.Add ("UInt16", NumericKind.Unsigned);
      numeric_types.Add ("UInt32", NumericKind.Unsigned);
      numeric_types.Add ("UInt64", NumericKind.Unsigned);
      numeric_types.Add ("Single", NumericKind.Float);
      numeric_types.Add ("Double", NumericKind.Float);
      numeric_types.Add ("Char", NumericKind.Char);
    }


    FixupEquality (name : string) : void
    {
      FixupCompare (name);
      #if 0
      match (special_members [name])
      {
        | [elem : IMethod] =>
          def tv = StaticTypeVar ("'a");
          tv.Constraints = [];
          def hd = elem.GetHeader ();
          hd.typarms = [tv];
          match (hd.parms)
          {
            | [parm1, parm2] =>
              parm1.ty = FixedType.StaticTypeVarRef (tv);
              parm2.ty = FixedType.StaticTypeVarRef (tv);
            | _ => assert(false)
          }
        | _ => assert(false)
      }
      #endif
    }

    FixupShift (name : string) : void
    {
      match (special_members [name])
      {
        | [elem is IMethod] =>
          match (elem.GetParameters ())
          {
            | [_, parm2] =>
              assert(InternalType.Int32 != null);
              parm2.ty = InternalType.Int32;

            | _ => assert(false)
          }

        | _ => assert(false)
      }
    }

    internal AddBuiltins () : void
    {
      InitBuiltinMembers();

      def name = system_type.ReflectionName;
      when (name == "Nullable`1")
      {
        def retType = library.InternalType.Boolean;

        AddBuiltin("op_Equality",           retType, "==");
        AddBuiltin("op_Inequality",         retType, "!=");
        AddBuiltin("op_LessThan",           retType, "<");
        AddBuiltin("op_LessThanOrEqual",    retType, "<=");
        AddBuiltin("op_GreaterThan",        retType, ">");
        AddBuiltin("op_GreaterThanOrEqual", retType, ">=");

        //AddBuiltin("op_Addition",     "+");
//          AddBuiltin("op_Subtraction",  "-");
//          AddBuiltin("op_Multiply",     "*");
//          AddBuiltin("op_Division",     "/");
//          AddBuiltin("op_Modulus",      "%");
//          AddBuiltin("op_BitwiseAnd",   "&");
//          AddBuiltin("op_BitwiseOr",    "|");
//          AddBuiltin("op_ExclusiveOr",  "^");
//          AddBuiltin("op_LeftShift",    "<<");
//          AddBuiltin("op_RightShift",   ">>");
//
//          AddBuiltin("op_Increment",      "++");  MakeSingleParm("op_Increment");
//          AddBuiltin("op_Decrement",      "--");  MakeSingleParm("op_Decrement");
//          AddBuiltin("op_LogicalNot",     "!");   MakeSingleParm("op_LogicalNot");
//          AddBuiltin("op_UnaryPlus",      "+");   MakeSingleParm("op_UnaryPlus");
//          AddBuiltin("op_UnaryNegation",  "-");   MakeSingleParm("op_UnaryNegation");
//          AddBuiltin("op_OnesComplement", "~");   MakeSingleParm ("op_OnesComplement");
      }

      when (system_type.IsPrimitive || this : object == InternalType.Object_tc || this : object == InternalType.String_tc)
      {
        if (name == "String")
        {
          // == and != are surprisingly properly overloaded
          // and this is done in LookupMemberImpl, because otherwise
          // we would use uninitialized InternalType.String_Concat
          // AddBuiltin ("op_Addition", InternalType.String_Concat);
        }
        else if (name == "Boolean")
        {
          AddBuiltin ("op_LogicalNot", "bool.!");
          MakeSingleParm ("op_LogicalNot");
          AddBuiltin ("op_Equality",   "==");
          AddBuiltin ("op_Inequality", "!=");
          AddBuiltin ("op_BitwiseAnd", "&");
          AddBuiltin ("op_BitwiseOr",  "|");
          AddBuiltin ("op_ExclusiveOr", "^");
          // FixupEquality not needed here -- return type is already correct
          // and InternalType.Boolean is here null
        }
        else if (name == "Object")
        {
          AddBuiltin ("op_Equality", "==.ref");
          AddBuiltin ("op_Inequality", "!=.ref");
          FixupEquality ("op_Equality");
          FixupEquality ("op_Inequality");
        }
        else when (numeric_types.Contains (name))
        {
          def kind = numeric_types [name];
          def suff =  match (kind)
                      {
                        | NumericKind.Float => ".f"
                        | NumericKind.Char
                        | NumericKind.Signed => ".s"
                        | NumericKind.Unsigned => ".u"
                      };
          def is_small_type = name == "SByte" || name == "Byte" || name == "Int16" || name == "UInt16";

          unless (kind == NumericKind.Char)
          {
            //         method name       checked OpCode  unchecked OpCode
            AddBuiltin("op_Addition",    "+" + suff,     "+.f");
            AddBuiltin("op_Subtraction", "-" + suff,     "-.f");
            AddBuiltin("op_Multiply",    "*" + suff,     "*.f");

            // no checked version:
            AddBuiltin("op_Division", "/" + suff);
            AddBuiltin("op_Modulus",  "%" + suff);

            // unary
            AddBuiltin("op_UnaryPlus", "unary.+" + suff);
            MakeSingleParm("op_UnaryPlus");

            when (is_small_type)
            {
              ForceIntType("op_Addition");
              ForceIntType("op_Subtraction");
              ForceIntType("op_Multiply");
              ForceIntType("op_Division");
              ForceIntType("op_Modulus");
              ForceIntType("op_UnaryPlus");
            }
          }

          def one_size =  match (name)
                          {
                            | "Int64" | "UInt64" => "i8"
                            | "Float"            => "r4"
                            | "Double"           => "r8"
                            | _                  => "i4"
                          };

          def incdec_suff = match (name)
                            {
                              | "Byte"   => ".u.i1"
                              | "SByte"  => ".s.i1"
                              | "Int16"  => ".s.i2"
                              | "UInt16" => ".u.i2"
                              | _        => suff
                            };

          //         method name      checked OpCode                   unchecked OpCode
          AddBuiltin("op_Increment",  "++." + one_size + incdec_suff,  "++." + one_size + ".f");
          AddBuiltin("op_Decrement",  "--." + one_size + incdec_suff,  "--." + one_size + ".f");

          MakeSingleParm("op_Increment");
          MakeSingleParm("op_Decrement");


          when (kind == NumericKind.Signed || kind == NumericKind.Unsigned)
          {
            AddBuiltin("op_BitwiseAnd",  "&" + suff);
            AddBuiltin("op_BitwiseOr",   "|" + suff);
            AddBuiltin("op_ExclusiveOr", "^" + suff);

            AddBuiltin("op_LeftShift",  "<<" + suff);
            AddBuiltin("op_RightShift", ">>" + suff);
            when (Name != "Int32")
            {
              FixupShift("op_LeftShift");
              FixupShift("op_RightShift");
            }

            when (is_small_type)
            {
              ForceIntType("op_LeftShift");
              ForceIntType("op_RightShift");
              ForceIntType("op_BitwiseAnd");
              ForceIntType("op_BitwiseOr");
              ForceIntType("op_ExclusiveOr");
            }

            AddBuiltin("op_OnesComplement", "unary.~" + suff);
            MakeSingleParm("op_OnesComplement");

            when (is_small_type)
              ForceIntType ("op_OnesComplement");
          }

          unless (kind == NumericKind.Unsigned || kind == NumericKind.Char)
          {
            //        method name           checked OpCode     unchecked OpCode
            AddBuiltin("op_UnaryNegation",  "unary.-" + suff,  "unary.-.f");

            MakeSingleParm ("op_UnaryNegation");

            when (is_small_type)
              ForceIntType ("op_UnaryNegation");
          }

          // comparisions
          AddBuiltin ("op_Equality",           "==");
          AddBuiltin ("op_Inequality",         "!=");
          AddBuiltin ("op_LessThan",           "<"  + suff);
          AddBuiltin ("op_LessThanOrEqual",    "<=" + suff);
          AddBuiltin ("op_GreaterThan",        ">"  + suff);
          AddBuiltin ("op_GreaterThanOrEqual", ">=" + suff);

          FixupCompare ("op_Equality");
          FixupCompare ("op_Inequality");
          FixupCompare ("op_LessThan");
          FixupCompare ("op_LessThanOrEqual");
          FixupCompare ("op_GreaterThan");
          FixupCompare ("op_GreaterThanOrEqual");
        }
      }
    }

    #endregion

    /// Count of type parameters declared in this type (without type parameters of outer types)
    public override DeclaredTypeParametersCount : int { get { TyparmsCount } }

    /// Checks if underlying .NET type is value type
    public override IsValueType : bool { get { system_type.IsValueType } }

    public override IsInterface : bool { get { system_type.IsInterface } }

    public override Name : string { get { NamespaceNode.PartName } }

    public override GetLibraryReference() : LibraryReference { library }

    public override IsDelegate : bool
    {
      //[Nemerle.Memoize]
      get { system_type.IsDelegate }
    }

    public override GetConstantObject () : IField { null }

    public override DeclaringType : TypeInfo
    {
      //[Nemerle.Memoize]
      get
      {
        if (system_type.DeclaringType == null)
          null
        else
          library.ReferenceManager.TypeInfoOfType(system_type.DeclaringType)
      }
    }

    public override Location : Location
    {
      get { library.Location }
    }

    [Memoize]
    public override GetModifiers () : AttributesAndModifiers
    {
      def attrs     = LibraryReference.ConvertCustomAttributesData(system_type, library);
      def attrAsts  = attrs.Map((name, args) => <[ $name(..$args)]>);
      AttributesAndModifiers(Attributes, attrAsts)
    }

    public override IsCustomAttributeDefined(attributeFullName : string) : bool
    {
      foreach (a in system_type.CustomAttributes)
        when (a.TypeFullName == attributeFullName)
          return true;
      false
    }

    public override AttributeTargets : System.AttributeTargets { get; }

    public override HasAttribute (attribute : TypeInfo) : bool
    {
      system_type.IsDefined(attribute)
    }

    public override Accessibility : Accessibility
    {
      get
      {
        match (system_type.Attributes %& DN.TypeAttributes.VisibilityMask)
        {
          | DN.TypeAttributes.NestedAssembly    => Accessibility.Internal
          | DN.TypeAttributes.NestedFamANDAssem => Accessibility.ProtectedAndInternal
          | DN.TypeAttributes.NestedFamily      => Accessibility.Protected
          | DN.TypeAttributes.NestedFamORAssem  => Accessibility.ProtectedOrInternal
          | DN.TypeAttributes.Public
          | DN.TypeAttributes.NestedPublic      => Accessibility.Public
          | DN.TypeAttributes.NestedPrivate
          | DN.TypeAttributes.NotPublic         => Accessibility.Internal
          | _ => Util.ice ("system type returned invalid attributes")
        }
      }
    }

    public override IsExternallyAccessible : bool
    { // if it wasn't, we wouldn't have reflected it?
      get { true }
    }

    public override GetTydecl () : TypeDeclaration
    {
      if (system_type.IsInterface) TypeDeclaration.Interface()
      else if (system_type.IsEnum) TypeDeclaration.Enum()
      else                         TypeDeclaration.Class ()
    }

    public override GetDirectSuperTypes() : list[FixedType.Class]
    {
      if (_isDirectSupertypesNormalized)
        direct_supertypes
      else
      {
        when (direct_supertypes is _ :: _ :: _) // has more then 1 elems
          direct_supertypes = NormalizeSupertypes(direct_supertypes);

        _isDirectSupertypesNormalized = true;
        direct_supertypes
      }
    }

    public override BaseType : TypeInfo
    {
      //[Nemerle.Memoize]
      get
      {
        if (system_type.BaseType == null) null
        else library.ReferenceManager.TypeInfoOfType(system_type.BaseType)
      }
    }

    public override SuperClass() : option[TypeInfo]
    {
      //assert2(!IsInterface);

      def candidates = direct_supertypes.Filter(supertype => !supertype.TypeInfo.IsInterface);

      match (candidates)
      {
        | FixedType.Class(tc, _) :: _ => Some(tc)
        | [] => None()
        | _ => Util.ice()
      }
    }

    public override GetMembers () : list [IMember]
    {
      LookupMemberImpl ("")
    }

    public override GetMembers (bindingAttr : BindingFlags) : list [IMember]
    {
      def check (x : IMember)
      {
        if (bindingAttr %&& BindingFlags.DeclaredOnly)
          this.Equals (x.DeclaringType) &&
          TypeBuilder.constrain_member (x, bindingAttr)
        else
          TypeBuilder.constrain_member (x, bindingAttr)
      }

      GetMembers().RevFilter(check)
    }

    static constrain_with_membertype[MT](memType : MemberKinds) : IMember * list[MT] -> list[MT]
      where MT : IMember
    {
      (x, acc) => if (x.MemberKind == memType) x :> MT :: acc
                  else                         acc;
    }

    public override GetFields (bindingAttr : BindingFlags) : list [IField]
    {
      GetMembers (bindingAttr).FoldLeft ([], constrain_with_membertype (MemberKinds.Field))
    }

    public override GetConstructors (bindingAttr : BindingFlags) : list [IMethod]
    {
      GetMembers (bindingAttr).FoldLeft ([], constrain_with_membertype (MemberKinds.Constructor))
    }

    private collect_members () : void
    {
      def rawInternals = system_type.Namespace == "Nemerle.Builtins" && system_type.Name.Contains("FromTuple");

      member_map = Hashtable ();

      //Message.Debug ($"{collect_members, '$name' in $this len=$(member_array.Length)");
      mutable collected_now = [];

      def addMember(memberInfo : IMember)
      {
        collected_now ::= memberInfo;
        add_member_by_name(memberInfo);
      }

      def restrictInternals = !library.IsFriend;

      def members = system_type.Fields;
      for (mutable i = members.Count - 1; i >= 0; --i)
      {
        def d = members[i];
        unless (d.IsPrivate || ((d.IsAssembly || d.IsFamilyAndAssembly) && restrictInternals))
          addMember(ExternalFieldInfo(tenv, library, d))
      }

      def methodIsVisible(d : DN.MethodDef)
      {
        d != null && !(d.IsPrivate || ((d.IsAssembly || d.IsFamilyAndAssembly) && restrictInternals))
      }

      def members = system_type.Properties;
      for (mutable i = members.Count - 1; i >= 0; --i)
      {
        def d = members[i];
        def hasGet = methodIsVisible(d.GetMethod);
        def hasSet = methodIsVisible(d.SetMethod);
        when (hasGet || hasSet)
          addMember(ExternalPropertyInfo(tenv, library, d, hasGet, hasSet));
      }

      def members = system_type.Events;
      for (mutable i = members.Count - 1; i >= 0; --i)
      {
        def d = members[i];
        when (methodIsVisible(d.AddMethod) && methodIsVisible(d.RemoveMethod))
          addMember(ExternalEventInfo(library, d));
      }

      def members = system_type.Methods;
      for (mutable i = members.Count - 1; i >= 0; --i)
      {
        def d = members[i];
        when (methodIsVisible(d))
          addMember(ExternalMethodInfo(tenv, library, d, rawInternals));
      }

      def members = system_type.NestedTypes;
      for (mutable i = members.Count - 1; i >= 0; --i)
      {
        def d = members[i];
        unless (d.IsNestedPrivate || ((d.IsNestedAssembly || d.IsNestedFamilyAndAssembly) && restrictInternals))
          addMember(library.ReferenceManager.TypeInfoOfType(d));
      }

      def res =
        if (IsInterface)
        {
          def superTypes = GetDirectSuperTypes();

          (if (superTypes.IsEmpty)
             [InternalType.Object_tc.GetMembers ()]
           else
             superTypes.Map(t => t.tycon.GetMembers())) + [collected_now]
        }
        else match (SuperClass ())
        {
          | Some (ti) => [ti.GetMembers(), collected_now]
          | None      => [collected_now]
        };

      collected_now = RemoveHiddenMembers (res);

      member_map[""] = collected_now;
   }

    public override LookupMemberImpl (name : string) : list [IMember]
    {
      if (this.Equals (InternalType.String_tc) && name == "op_Addition") //FixMe: ValdD2: Convert this to buildin fanction
      {
        assert(InternalType.String_Concat != null);
        AddBuiltin ("op_Addition", InternalType.String_Concat);
        LookupMember (name)
      }
      else
      {
        when (member_map == null)
          collect_members();

        if (member_map.Contains (name))
          member_map[name]
        else
        {
          member_map[name] = [];
          []
        }
      }
    }

    public override CanAccess (source : TypeInfo) : bool
    {
      system_type.IsPublic || system_type.IsNestedPublic
        || (system_type.DeclaringType != null
            && source.IsDerivedFrom(DeclaringType)
            && (system_type.IsNestedFamily || system_type.IsNestedFamilyOrAssembly))
        || (this.library.IsFriend
            && (system_type.IsNotPublic || system_type.IsNestedAssembly
        || system_type.IsNestedPublic || system_type.IsNestedFamilyOrAssembly));
    }

    public override UnderlyingType : FixedType
    {
      //[Nemerle.Memoize (InvalidValue = null)]
      get
      {
        assert(system_type.IsEnum);
        library.TypeOfType(tenv, system_type.GetField("value__").FieldType)
      }
    }

    decode_extension_methods (mgr : LibraryReferenceManager) : void
    {
      when (LibraryReferenceManager.IsExtension(system_type))
        foreach (m is IMethod in GetMembers())
          when (m.IsStatic && LibraryReferenceManager.IsExtension(SystemHelpers.GetSystemMemberInfo(m)))
            mgr.AddExtensionMethod(m);
    }

    internal override GetObsoletionDetails () : string * bool
    {
      system_type.GetObsoletionDetails()
    }

    public override GlobalEnv : GlobalEnv
    {
      get { library.Manager.CoreEnv }
    }

    private _isConditional : bool;
    public override IsConditional : bool { get { _isConditional } }

    [Memoize(Scope = Instance, Synchronized = false)]
    public override GetConditions() : list[string]
    {
      system_type.GetConditions()
    }

    public TypeRef : DN.ITypeDefOrRef
    {
      get { TypeSig.TypeDefOrRef }
    }

    public TypeSig : DN.TypeDefOrRefSig
    {
      mutable _typeSig : DN.TypeDefOrRefSig;
      get
      {
        when (_typeSig == null)
        {
          def moduleBuilder = Manager.Hierarchy.GetModuleBuilder();
          _typeSig = DN.Extensions.GetCorLibTypeSig(moduleBuilder.CorLibTypes, system_type);
          when (_typeSig == null)
          {
            def declaringType = DeclaringType;
            def resolutionScope : DN.IResolutionScope =
              if (declaringType != null)
                declaringType.ToTypeRef() :> DN.IResolutionScope
              else if (DN.UTF8String.CaseInsensitiveEquals(system_type.DefinitionAssembly.Name, moduleBuilder.Assembly.Name))
                library.ModuleRef
              else
                library.AssemblyRef;
            def typeRef = DN.TypeRefUser(moduleBuilder, system_type.Namespace, system_type.Name, resolutionScope) |> moduleBuilder.UpdateRowId;
            _typeSig  = if (system_type.IsValueType) DN.ValueTypeSig(typeRef) else DN.ClassSig(typeRef);
          }
        }
        _typeSig
      }
    }

    private mutable _typeSpecCache : TypeSpecCache;

    public MakeGenericType(specialization : array[DN.TypeSig]) : IBackendType
    {
      when (_typeSpecCache == null)
        _typeSpecCache = TypeSpecCache(this);

      _typeSpecCache.GetTypeSpec(specialization)
    }

    MakeFieldRef(field : IField) : DN.IField
      implements IBackendType.MakeFieldRef
    {
      (field :> IBackendField).FieldRef
    }

    MakeMethodRef(method : IMethod) : DN.IMethod
      implements IBackendType.MakeMethodRef
    {
      (method :> IBackendMethod).MethodRef
    }
  } // class
} // namespace
