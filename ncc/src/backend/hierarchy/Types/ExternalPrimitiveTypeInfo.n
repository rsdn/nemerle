using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler.Typedtree;
using Nemerle.IO;
using Nemerle.Late;
using Nemerle.Utility;
using System.IO;

using DN = dnlib.DotNet;
using PT = Nemerle.Compiler.Parsetree;  
using SCG = System.Collections.Generic;

namespace Nemerle.Compiler 
{
  internal class ExternalPrimitiveTypeInfo : ExternalTypeInfo 
  {
    mutable implicit_conversion : list [TypeInfo];
    is_longsize  : bool;
    [Accessor(flags=Override)] is_floating  : bool;
    [Accessor(flags=Override)] is_numeric   : bool;
    [Accessor(flags=Override)] size         : int;
    [Accessor(flags=Override)] unsigned     : bool;

    public override IsPrimitive : bool { get { true } }

    public this (lib : LibraryReference, h : DN.TypeDef, ns_node : NamespaceTree.Node)
    {
      base (lib, h, ns_node);
      
      is_longsize = false;
      is_numeric  = true;

      match (Name)
      {
        | "SByte"  => size = 8;  unsigned = false;
        | "Int16"  => size = 16; unsigned = false;
        | "Int32"  => size = 32; unsigned = false;
        | "Int64"  => size = 64; unsigned = false; is_longsize = true;
        | "Byte"   => size = 8;  unsigned = true;
        | "UInt16" => size = 16; unsigned = true;
        | "UInt32" => size = 31; unsigned = true;
        | "UInt64" => size = 64; unsigned = true;  is_longsize = true;
        | "Single" => size = 32; unsigned = false; is_floating = true;
        | "Double" => size = 64; unsigned = false; is_floating = true;
        | "Char"   => size = 16; unsigned = true;  is_numeric = false;
        | _        => is_numeric = false;
      }
    }

    public override LookupMemberImpl (name : string) : list [IMember]
    {
      if (implicit_conversion == null)
      {
        AddConversions ();
        LookupMember (name);
      } 
      else base.LookupMemberImpl (name);
    }
    
    public CanOmmitConversionTo (target : ExternalPrimitiveTypeInfo) : bool
    {
      if (target.Equals (this)) true
      else if (is_longsize != target.is_longsize || is_floating != target.is_floating) false
      else
      {
        when (implicit_conversion == null)
          AddConversions ();
        implicit_conversion.Contains (target) 
          || Equals (InternalType.Char_tc) 
             && (InternalType.UInt16_tc :> ExternalPrimitiveTypeInfo).CanOmmitConversionTo (target)
      }
    }
    
    protected AddConversions () : void
    {
      mutable is_numeric = true;
      def name = system_type.ReflectionName;
      
      implicit_conversion =
        match (name)
        {
          | "SByte"  => [InternalType.Int16_tc, InternalType.Int32_tc, InternalType.Int64_tc, InternalType.Single_tc, InternalType.Double_tc]
          | "Int16"  => [InternalType.Int32_tc, InternalType.Int64_tc, InternalType.Single_tc, InternalType.Double_tc]
          | "Int32"  => [InternalType.Int64_tc, InternalType.Single_tc, InternalType.Double_tc]
          | "Int64"  => [InternalType.Single_tc, InternalType.Double_tc]
          | "Byte"   => [InternalType.Int16_tc, InternalType.Int32_tc, InternalType.Int64_tc, InternalType.UInt16_tc, InternalType.UInt32_tc,
                         InternalType.UInt64_tc, InternalType.Single_tc, InternalType.Double_tc]
          | "UInt16" => [InternalType.Int32_tc, InternalType.Int64_tc, InternalType.UInt32_tc, InternalType.UInt64_tc, 
                         InternalType.Single_tc, InternalType.Double_tc]
          | "UInt32" => [InternalType.Int64_tc, InternalType.UInt64_tc, InternalType.Single_tc, InternalType.Double_tc]
          | "UInt64" => [InternalType.Single_tc, InternalType.Double_tc]
          | "Char"   => [InternalType.UInt16_tc, InternalType.Int32_tc, InternalType.UInt32_tc, InternalType.Int64_tc,
                         InternalType.UInt64_tc, InternalType.Single_tc, InternalType.Double_tc]
          | "Single" => [InternalType.Double_tc]
          | "Double" => []
          | _ =>
            is_numeric = false;
            []
        }

      when (is_numeric)
      {
        foreach (target in implicit_conversion)
          AddConversion ("op_Implicit", target);

        // add remaining as explicit
        foreach (target in numeric_types.Keys)
        {
          def t = library.ReferenceManager.NameTree.LookupInternalType (["System", target]);

          when (!Equals (t) && !implicit_conversion.Contains(t))
            AddConversion ("op_Explicit", t);
        }
      }
    }
  }
} /* namespace */
