using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler.Typedtree;
using Nemerle.IO;
using Nemerle.Late;
using Nemerle.Utility;
using System.IO;

using DN = dnlib.DotNet;
using PT = Nemerle.Compiler.Parsetree;
using SCG = System.Collections.Generic;

namespace Nemerle.Compiler
{
  internal class ExternalNemerleTypeInfo : ExternalTypeInfo
  {
    tydecl          : TypeDeclaration;
    constant_object : IField;

    public this (lib : LibraryReference, h : DN.TypeDef, ns_node : NamespaceTree.Node)
    {
      base(lib, h, ns_node);

      foreach (a in system_type.CustomAttributes)
      {
        match (a.TypeFullName)
        {
          | "Nemerle.Internal.VariantAttribute" when a.ConstructorArguments.Count == 1 =>
            mutable variantOptions = [];

            def names = ((a.ConstructorArguments[0].Value :> DN.UTF8String) : string).Split(array[','], System.StringSplitOptions.None);
            for (mutable index = names.Length - 1; index >= 0; --index)
            {
              def name = names[index];
              match (library.ReferenceManager.NameTree.LookupExactType(NString.Split(name, array['.', '+'])))
              {
                | Some (tc is ExternalNemerleTypeInfo) =>
                  tc.VariantOptionCode = index;
                  variantOptions ::= tc

                | _ => Util.ice($"cannot find variant option named $name")
              }
            }

            tydecl = TypeDeclaration.Variant(variantOptions);

          | "Nemerle.Internal.VariantOptionAttribute" =>
            tydecl = TypeDeclaration.VariantOption();

          | "Nemerle.Internal.ConstantVariantOptionAttribute" =>
            tydecl = TypeDeclaration.VariantOption();

            match (LookupMember("_N_constant_object"))
            {
              | [fld] => constant_object = fld :> IField
              | _     => Util.ice ("cannot find _N_constant_object")
            }

          | "Nemerle.Internal.TypeAliasAttribute" =>
            def aliasedType = a.ConstructorArguments[0].Value :> DN.UTF8String;
            tydecl = TypeDeclaration.Alias(TyCodec.DecodeType (lib, tenv, aliasedType));

          | "Nemerle.Internal.ExtensionPatternEncodingAttribute" when a.ConstructorArguments.Count == 3 =>
            def name        = a.ConstructorArguments[0].Value :> DN.UTF8String;
            def identifiers = a.ConstructorArguments[1].Value :> DN.UTF8String;
            def pattern     = a.ConstructorArguments[2].Value :> DN.UTF8String;
            def ext = ExtensionPattern (parent      = this,
                                        identifiers = NString.Split(identifiers, [',']),
                                        pattern     = MainParser.ParseExpr(Manager.CoreEnv, pattern),
                                        name        = name,
                                        temporary   = false);
            AddExtensionPattern(ext);

          | _ => ()
        }
      }
    }

    //TODO: ValdD2: Rename this
    public override GetTydecl()         : TypeDeclaration { tydecl ?? base.GetTydecl() }
    public override GetConstantObject() : IField          { constant_object }
  }
} /* namespace */
