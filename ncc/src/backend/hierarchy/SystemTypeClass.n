using Nemerle.IO;
using Nemerle.Collections;
using Nemerle.Compiler.Typedtree;
using Nemerle.Utility;

using DN = dnlib.DotNet;
using SCG = System.Collections.Generic;

namespace Nemerle.Compiler
{
  [ManagerAccess]
  public class SystemTypeClass
  {
    private mutable _arrayTypeCache   : array[SCG.Dictionary[DN.TypeSig, ArrayTypeSpec]] = array(4);
    private mutable _byRefTypeCache   : SCG.Dictionary[DN.TypeSig, ByRefTypeSpec]   = SCG.Dictionary(DN.TypeEqualityComparer.Instance : SCG.IEqualityComparer[DN.TypeSig]);
    private mutable _pointerTypeCache : SCG.Dictionary[DN.TypeSig, PointerTypeSpec] = SCG.Dictionary(DN.TypeEqualityComparer.Instance : SCG.IEqualityComparer[DN.TypeSig]);

    internal this(man : ManagerClass) { Manager = man; }

    public GetArrayTypeSpec(elementType : DN.TypeSig, rank : int) : ArrayTypeSpec
    {
      def cacheIndex = rank - 1;
      when (cacheIndex >= _arrayTypeCache.Length)
        System.Array.Resize(ref _arrayTypeCache, rank);

      mutable cache = _arrayTypeCache[cacheIndex];
      when (cache == null)
      {
        cache = SCG.Dictionary(DN.TypeEqualityComparer.Instance : SCG.IEqualityComparer[DN.TypeSig]);
        _arrayTypeCache[cacheIndex] = cache;
      }

      mutable arrayInfo;
      unless (cache.TryGetValue(elementType, out arrayInfo))
      {
        arrayInfo = ArrayTypeSpec(Manager.Hierarchy.GetModuleBuilder(), elementType, rank);
        cache.Add(elementType, arrayInfo);
      }
      arrayInfo
    }

    public GetByRefTypeSpec(itemType : DN.TypeSig) : ByRefTypeSpec
    {
      mutable result;
      unless (_byRefTypeCache.TryGetValue(itemType, out result))
        result = ByRefTypeSpec(itemType);
      result
    }

    public GetPointerTypeSpec(itemType : DN.TypeSig) : PointerTypeSpec
    {
      mutable result;
      unless (_pointerTypeCache.TryGetValue(itemType, out result))
        result = PointerTypeSpec(itemType);
      result
    }
  }
} // end ns
