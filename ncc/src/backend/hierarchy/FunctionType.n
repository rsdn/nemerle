using Nemerle.IO;
using Nemerle.Collections;
using Nemerle.Compiler.Typedtree;

using SRC = System.Runtime.CompilerServices;

namespace Nemerle.Compiler
{
  public class FunctionType
  {
    internal tycon : TypeInfo;
    internal void_tycon : TypeInfo;
    internal apply : IMethod;
    internal apply_void : IMethod;
    internal apply_tupled : IMethod;
    internal apply_tupled_void : IMethod;

    public ApplyMethod : IMethod
    {
      get { apply }
    }

    public ApplyVoidMethod : IMethod
    {
      get { apply_void }
    }

    public TyCon : TypeInfo
    {
      get { tycon }
    }

    public VoidTyCon : TypeInfo
    {
      get { void_tycon }
    }

    public FromTupleTyCon : TypeInfo;
    public FromTupleVoidTyCon : TypeInfo;
    public FromTupleCtor : IMethod;
    public FromTupleVoidCtor : IMethod;

    public GetMethodWithReturnType (ret_type : TypeVar) : IMethod
    {
      if (ret_type.Fix () is FixedType.Void)
        apply_void
      else
        apply
    }

    public GetTupledMethodWithReturnType (ret_type : TypeVar) : IMethod
    {
      if (ret_type.Fix () is FixedType.Void)
        apply_tupled_void
      else
        apply_tupled
    }

    public static Make (ty : TypeVar) : FixedType.Class
    {
      match (ty.Fix ().FunReturnTypeAndParms ()) {
        | Some ((parms, ret)) =>
            def inst = ty.Manager.InternalType.GetFunctionType (parms.Length);
            if (ret.Fix () is FixedType.Void)
              FixedType.Class (inst.VoidTyCon, parms)
            else
              FixedType.Class (inst.TyCon, parms + [ret])
        | None => Util.ice ()
      }
    }

    static function_name = ["Nemerle", "Builtins", "Function"] : list [string];
    static function_void_name = ["Nemerle", "Builtins", "FunctionVoid"] : list [string];
    static function_from_tuple_name = ["Nemerle", "Builtins", "FunctionFromTuple"] : list [string];
    static function_void_from_tuple_name = ["Nemerle", "Builtins", "FunctionVoidFromTuple"] : list [string];

    internal this (m : ManagerClass, size : int)
    {
      tycon = m.NameTree.LookupInternalType (function_name, size + 1);
      foreach (meth :> IMethod in tycon.LookupMember ("apply"))
      {
        if (meth.GetParameters ().Length == size)
        {
          assert(apply == null);
          apply = meth
        }
        else
        {
          assert(apply_tupled == null);
          apply_tupled = meth
        }
      }
      assert(apply != null);
      assert(size <= 1 || apply_tupled != null);

      void_tycon = m.NameTree.LookupInternalType (function_void_name, size);
      apply_void = void_tycon.LookupMember ("apply_void").Head :> IMethod;
      apply_tupled_void = if (size > 1) void_tycon.LookupMember ("apply_void").Tail.Head :> IMethod else null;

      when (size > 1)
      {
        FromTupleTyCon     = m.NameTree.LookupInternalType(function_from_tuple_name, size + 1);
        FromTupleVoidTyCon = m.NameTree.LookupInternalType(function_void_from_tuple_name, size);
        FromTupleCtor      = FromTupleTyCon.LookupMember(".ctor").Head :> IMethod;
        FromTupleVoidCtor  = FromTupleVoidTyCon.LookupMember(".ctor").Head :> IMethod;
      }
    }
  }
} // end ns
