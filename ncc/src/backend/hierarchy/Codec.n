/*
 * Copyright (c) 2004-2008 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle.Collections;

using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Typedtree;

using DN = dnlib.DotNet;
using SCG = System.Collections.Generic;

namespace Nemerle.Compiler
{
/// This module is used to decode and encode Nemerle specific information about types,
/// methods, etc. which are not directly expressible in .NET metadata.
/// 
/// We use custom attributes to save / read this data in emitted / loaded assemblies.
/// 
/// This module is stateless.
module TyCodec 
{
  variant Term
  {
    | App { name : string; args : list [Term]; }
  }

  // --------------- DECODING -------------------------  

  ParseTerm (s : string) : Term
  {
    def get_name (pos)
    {
      def idx = s.IndexOf ('(', pos);
      assert(idx != -1);
      (idx + 1, s.Substring (pos, idx - pos))
    }
    
    def maybe_get (pos)
    {
      if (s[pos] == ')') (pos + 1, None ())
      else
      {
        def (pos, name) = get_name (pos);
        def (pos, args) = get_list ([], pos);
        (pos, Some (Term.App (name, args)))
      }
    } 
    and get_list (acc, pos)
    {
      match (maybe_get (pos))
      {
        | (pos, None)    => (pos, acc.Rev())
        | (pos, Some(x)) => get_list(x :: acc, pos)
      }
    }
    
    match (maybe_get (0))
    {
      | (pos, Some (ret)) =>
        assert(pos == s.Length);
        ret

      | (_, None) =>
        assert(false);
    }
  }  

  decode (lib : LibraryReference, tenv : Map [string, StaticTypeVar], t : Term) : FixedType
  {
    def self (t) { decode (lib, tenv, t) : TypeVar }
    match (t)
    {
      | Term.App (name, args) when name[0] != '.' =>
        match (lib.Manager.NameTree.LookupExactType (NString.Split (name, array ['.', '+'])))
        {
          | Some (tc) =>
            if (tc.FullName == "System.Void") lib.Manager.InternalType.Void
            else                              FixedType.Class(tc, args.Map(self)).Expand ()
          | None =>
            match (lib.LookupInternalType (name))
            {
              | Some (tc) => FixedType.Class (tc, args.Map(self)).Expand ()
              | None => 
                Message.Error($"unbound type name: $name, are you missing a reference?");
                lib.Manager.InternalType.Void
            }
        }

      | Term.App (".a", [Term.App (srank, []), t]) =>
        FixedType.Array (decode (lib, tenv, t), System.Int32.Parse (srank))

      | Term.App (".r", [t])      => FixedType.Ref (decode (lib, tenv, t))
      | Term.App (".o", [t])      => FixedType.Out (decode (lib, tenv, t))
      | Term.App (".f", [t1, t2]) => FixedType.Fun (decode (lib, tenv, t1), decode (lib, tenv, t2))
      | Term.App (".v", [Term.App (no, [])]) =>
        match (tenv.Find (no))
        {
          | Some (tv) => FixedType.StaticTypeVarRef (tv)
          | None => Util.ice ("unboud type variable in encoded type " + no)
        }

      | Term.App (".p", types) => FixedType.Tuple(types.Map(self))
      | Term.App (name, _)     => Util.ice ("invalid encoded type opcode " + name)
    }
  }

  reflect_typarms (lib : LibraryReference, 
                   mutable tenv : Map [string, StaticTypeVar], 
                   vars : SCG.IList[DN.GenericParam]) : list [StaticTypeVar] * Map [string, StaticTypeVar]
  {
    mutable tyvars = [];

    for (mutable i = vars.Count - 1; i >= 0; --i)
    {
      def gparm = vars.Item[i];
      def tv = StaticTypeVar(lib.Manager, gparm.Name, gparm);
      tyvars = tv :: tyvars;
      tenv = tenv.Replace (gparm.Name, tv)
    }

    (tyvars, tenv)
  }

  
  public ReflectConstraints (_lib : LibraryReference, tenv : Map [string, StaticTypeVar], 
                  sys_type : DN.TypeDef, self_type : FixedType,  tyvars : list [StaticTypeVar]) : void
  {
    def tenvResolver = tenv.ToGenericResolver();
    def vars         = sys_type.GenericParameters;
    foreach (tv in tyvars with i)
    {
      def t = vars.Item[i];
      def constraints = t.GenericParamConstraints;
      tv.SetConstraints(t.Flags, constraints.Map(t =>
        if (DN.TypeEqualityComparer.Instance.Equals(t.Constraint, sys_type))
          self_type
        else
          _lib.TypeOfType(tenvResolver, t.Constraint)))
    }
  }

  
  /// Used to decode Nemerle types extracted from assembly metadata
  public DecodeType (lib : LibraryReference, tenv : Map [string, StaticTypeVar], tokens : string) : FixedType
  {
    decode (lib, tenv, ParseTerm (tokens))
  }

  public ReflectTypeBuilder (lib : LibraryReference, 
                             tenv : Map [string, StaticTypeVar], 
                             original : DN.TypeDef) 
    : list [StaticTypeVar] * Map [string, StaticTypeVar] * list [FixedType.Class] * list [FixedType.Class]
  {
    def (tyvars, tenv) = reflect_typarms(lib, tenv, original.GenericParameters);

    def tenvResolver = tenv.ToGenericResolver();

    mutable allInterfaces = original.Interfaces.Map(i => lib.TypeOfType(tenvResolver, i.Interface, rawInternals = true) :> FixedType.Class);

    def minimizeInterfaces() { Typer.GetMinimal(allInterfaces, _.TryRequire(_)).Rev() }

    def (directSuperTypes, allSuperTypes) =
      if (original.BaseType == null)
        (minimizeInterfaces(), allInterfaces)
      else
      {
        def baseType = lib.TypeOfType(tenvResolver, original.BaseType, rawInternals = true) :> FixedType.Class;

        def instantiateSuperType =
          if (baseType.args is []) fun (t) { t }
          else
          {
            def subst = baseType.tycon.MakeSubst(baseType.args, check_parms = false);
            fun (t : FixedType.Class) : FixedType.Class
            {
              if (t.IsInterface)
                if (t.args is []) t else FixedType.Class(t.tycon, t.args.Map(a => subst.Apply(a.Fix())))
              else
                baseType.GetInstantiatedSuperType(t.tycon, check_parms = false)
            }
          };

        def superTypes = SCG.HashSet(allInterfaces);
        foreach (t in baseType.tycon.GetSuperTypes())
        {
          def superType = instantiateSuperType(t);
          when (superTypes.Add(superType))
          when (t.IsInterface)
            allInterfaces ::= superType;
        }

        (baseType :: minimizeInterfaces(), baseType :: NList.ToList(superTypes))
      };

    (tyvars, tenv, directSuperTypes, allSuperTypes)
  }

  public ReflectTyparms (lib : LibraryReference,
                         tenv : Map [string, StaticTypeVar],
                         meth : DN.MethodDef)
                         : list [StaticTypeVar] * Map [string, StaticTypeVar]
  {
    if (meth.HasGenericParameters)
    {
      def vars            = meth.GenericParameters;
      def (tyvars, tenv)  = reflect_typarms(lib, tenv, vars);
      def genericResolver = tenv.ToGenericResolver();

      foreach (tv in tyvars with i)
      {
        def t = vars.Item[i];
        def constraints = t.GenericParamConstraints;
        tv.SetConstraints (t.Flags, constraints.Map(t => lib.TypeOfType(genericResolver, t.Constraint)))
      }

      (tyvars, tenv)
    }
    else
      ([], tenv)
  }

  // -------------- ENCODING ----------------------

  FlattenTerm (t : Term) : string
  {
    def ret = System.Text.StringBuilder ();
    def walk (t)
    {
      | Term.App (name, args) =>
        ignore (ret.Append (name));
        ignore (ret.Append ('('));
        foreach (arg in args)
          walk(arg);
        ignore (ret.Append (')'));
    }

    walk (t);
    ret.ToString ()
  }

  encode_tvs (t : list [TypeVar]) : list [Term]
  {
    t.Map(encode_tv)
  }
  
  encode_tv (t : TypeVar) : Term
  {
    encode (t.Fix ())
  }
  
  encode (t : FixedType) : Term
  {
    | FixedType.Array(t, rank)  => Term.App(".a", [Term.App (rank.ToString (), []), encode_tv (t)])
    | FixedType.StaticTypeVarRef(tv)    => Term.App(".v", [Term.App (tv.Name.ToString (), [])])
    | FixedType.Void            => Term.App("System.Void", [])
    | FixedType.Fun(arg, rt)    => Term.App(".f", [encode_tv (arg), encode_tv (rt)])
    | FixedType.Tuple(args)     => Term.App(".p", encode_tvs (args))
    | FixedType.Class(ti, args) => Term.App(ti.FrameworkTypeName, encode_tvs (args))
    | FixedType.Ref(t)          => Term.App(".r", [encode_tv (t)])
    | FixedType.Out(t)          => Term.App(".o", [encode_tv (t)])
    | FixedType.Intersection    => assert(false)
  }
    
  /// Used to emit Nemerle types in assembly metadata
  ///
  /// <remarks>
  ///   The type tree is converted to prefix, term-like notation.
  /// </remarks>
  public EncodeType (t : FixedType) : string
  {
    FlattenTerm (encode (t))
  }
}
} // ns
