using System;
using System.Diagnostics;
using Nemerle.Collections;
using Nemerle.Utility;

using DN = dnlib.DotNet;
using PT = Nemerle.Compiler.Parsetree;
using SCG = System.Collections.Generic;

namespace Nemerle.Compiler
{
  public partial class NamespaceTree
  {
    public partial class Node
    {
      internal LoadValue(val : TypeInfoCache.NotLoadedList) : list[TypeInfo]
      {
        def by_parms_amount = Hashtable();
        def cached = val.elems.FoldLeft([], fun (e, acc)
        {
          // eliminate ambiguous types, store only those differing
          // on amount of generic parameters
          def count = e.SystemType.GenericParameters.Count;
          if (by_parms_amount.Contains (count))
          {
            def used = by_parms_amount[count] : DN.TypeDef;
            Message.Warning($"using type `[$(used.DefinitionAssembly)]$(used.ReflectionFullName)' that was defined in more than one assembly: "
                             " `[$(e.SystemType.DefinitionAssembly)]$(e.SystemType.ReflectionFullName)' (the first version was used)");
            acc
          }
          else {
            by_parms_amount.Add(count, e.SystemType);

            e.ConstructTypeInfo(this, false);
            e.tycon :: acc
          }
        });
        Value = TypeInfoCache.CachedAmbiguous(cached);
        cached
      }
    } // class Node
  } // class NamespaceTree
} // ns
