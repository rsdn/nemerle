using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Utility;

using System.IO;

using DN = dnlib.DotNet;
using PT = Nemerle.Compiler.Parsetree;
using SCG = System.Collections.Generic;
using Nemerle.Compiler.Typedtree;

namespace Nemerle.Compiler
{
  public partial class AttributesAndModifiers
  {
    internal SaveCustomAttributes([NotNull] ti : TypeBuilder, adder : System.AttributeTargets * DN.CustomAttribute * bool -> string) : void
    {
      foreach (expr in custom_attrs)
      {
        try
        {
          def error = adder (ti.Manager.AttributeCompiler.CompileAttribute(ti.GlobalEnv, ti, expr));
          when (error != null)
            Message.Error (expr.Location, $"custom attribute $expr is not valid on " + error);
        }
        catch { | _ is Recovery => () }
      }

      foreach ((suff, expr) in macro_attrs)
      {
        try
        {
          def (m, parms) =
            match (MacroRegistry.lookup_macro (ti.GlobalEnv, expr, suff))
            {
              | Some ((_, m, parms)) => (m, parms)
              | _ => Util.ice ("macro is not a macro?" +
                               PrettyPrint.SprintExpr (None (), expr))
            };

          // check if macro needs to be saved in metadata
          // it should be done only if it will be inherited in some derived class
          def inherited = m.IsInherited && !ti.IsSealed;

          when (inherited) {
            def concatenated = parms.ToString ("@");
            def name = m.GetNamespace () + "." + m.GetName ();
            def serialized = <[
              Nemerle.Internal.MacroAttribute ($(name : string),
                                              0,
                                              $(concatenated : string))
            ]>;
            def error = adder (ti.Manager.AttributeCompiler.CompileAttribute(ti.GlobalEnv, ti, serialized));
            when (error != null)
              Message.Error ($"macro attribute $name is not valid on " + error);
          }
        } catch { | _ is Recovery => () }
      }
    }
  } // class
} // namespace
