using Nemerle.Compiler.Typedtree;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Utility;

using System.IO;
using System.Diagnostics.SymbolStore;
using System.Diagnostics;
using System.Security;

using DN = dnlib.DotNet;
using NC = Nemerle.Compiler;

namespace Nemerle.Compiler
{
  public partial class PropertyBuilder : MemberBuilder, IProperty, IBackendMember
  {
    internal mutable property_builder : DN.PropertyDef;

    public GetPropertyInfo() : DN.PropertyDef
      implements IBackendMember.GetHandle
    {
      assert(property_builder != null);
      property_builder
    }

    /**
     * Adds a property builder
     */
    internal override CreateEmitBuilder(tb : DN.TypeDef) : void
    {
      // Converts Nemerle modifiers to the CLI property attributes.
      def make_property_attributes (attrs)
      {
        mutable result = 0 :> DN.PropertyAttributes;

        when (attrs %&& NemerleModifiers.SpecialName)
          result |= DN.PropertyAttributes.SpecialName %| DN.PropertyAttributes.RTSpecialName;

        result
      }

      def attrs = make_property_attributes (Attributes);
      def ty    = (if (IsIndexer) (GetMemType() :> FixedType.Fun).to else GetMemType()).ToTypeSig();
      def parms = parms.MapToArray (_.ToTypeSig());

      property_builder = DN.PropertyDefUser(Name);
      property_builder.Attributes = attrs;
      property_builder.PropertySig = DN.PropertySig(!IsStatic, ty, parms);

      tb.Properties.Add(property_builder);
    }

    internal override Compile () : void
    {
      base.Compile ();
      unless (modifiers.IsEmpty) {
        modifiers.SaveCustomAttributes (declaring_type, fun (target, a, shouldEmit) {
          if (target %&& System.AttributeTargets.Property) {
            when(shouldEmit)
              property_builder.CustomAttributes.Add(a);
            null
          }
          else "property " + ToString ()
        })
      }

      def declaring = DeclaringType : object;

      // emit getter only if it was defined in this type, not derived
      when (getter != null && getter.DeclaringType == declaring)
        property_builder.GetMethod = getter.GetMethodBuilder();

      // emit setter only if it was defined in this type, not derived
      when (setter != null && setter.DeclaringType == declaring)
        property_builder.SetMethod = setter.GetMethodBuilder();
    }
  }
}
