using Nemerle.Compiler.Typedtree;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Utility;

using System.Reflection;
using System.IO;
using System.Diagnostics.SymbolStore;
using System.Diagnostics;
using System.Security;

using DN = dnlib.DotNet;
using PE = dnlib.PE;
using NC = Nemerle.Compiler;
using SCG = System.Collections.Generic;
using SR = System.Reflection;

namespace Nemerle.Compiler
{
  public enum Platform
  {
    | AnyCpu = 0
    | X86
    | X64
    | IA64
    | AnyCpu32bitPreferred
  }
  
  public enum PdbType
  {
    | Windows
    | Portable
    | Embedded
  }

   /// This part of TypesManages is responsible for generation of System.Reflection.Emit structures
   /// composing program hierarchy. It executes emission of all classes and their members.
  [ManagerAccess]
  public partial class TypesManager
  {
    private   mutable _strongNameKey              : DN.StrongNameKey;
    private   mutable _assembly_builder           : DN.AssemblyDef;
    private   mutable _module_builder             : DN.ModuleDef;
    internal  mutable contains_nemerle_specifics  : bool = false;

    internal          _need_entry_point           : bool;
    /// updated when method with static Main signature is met
    internal  mutable _entry_point                : option[DN.MethodDef];

    private           _OutputFileName             : string;
    private   mutable _cgil_phase                 : int;

    private _moduleReferences : SCG.Dictionary[string, DN.ModuleRef]       = SCG.Dictionary();
    private _pdbDocuments     : SCG.Dictionary[string, DN.Pdb.PdbDocument] = SCG.Dictionary();

    public this(man : ManagerClass)
    {
      Manager = man;
      _OutputFileName = Manager.Options.OutputFileName;

      unless (Manager.Options.TargetIsLibrary)
      {
        _need_entry_point = true;
        _entry_point = None ();
      }
    }

    public CreateAssembly () : void
    {
      def name = Path.GetFileNameWithoutExtension (_OutputFileName);
      when (name == "")
        Message.FatalError("name of output assembly cannot be empty");

      def dir = Path.GetDirectoryName(Path.GetFullPath (_OutputFileName));
      unless (Directory.Exists (dir))
        Message.FatalError ($"specified output directory `$dir' does not exist");

      mutable version;
      mutable locale;

      when (Manager.Options.StrongAssemblyKeyName != null)
        _strongNameKey = LoadStrongNameKey(Location.Default, Manager.Options.StrongAssemblyKeyName);

      // we need to process global assembly attributes before creating assembly name
      foreach ((env, attr) in assembly_attributes)
      {
        /* store resolved attribute */
        def (tc, parms) = Manager.AttributeCompiler.CheckAttribute (env, attr);

        def take_string (pars) {
          | [ <[ $(x : string) ]> ] => x
          | _ =>
              Message.FatalError (attr.Location, "given attribute must have single string as parameter")
        }
        if (tc.Equals (InternalType.AssemblyVersionAttribute_tc))
          version = ParseVersion(take_string(parms), attr.Location);
        else if (tc.Equals (InternalType.AssemblyKeyFileAttribute_tc))
        {
          def key = take_string (parms);
          if (_strongNameKey != null)
            Message.Warning (attr.Location, "AssemblyKeyFile attribute will be ignored, as key file was already specified")
          else when (key != "")
            _strongNameKey = LoadStrongNameKey(attr.Location, key);
        }
        else when (tc.Equals (InternalType.AssemblyCultureAttribute_tc))
          locale = take_string(parms);
      }

      mutable publicKey;
      when (_strongNameKey != null)
        publicKey = DN.PublicKey(_strongNameKey.PublicKey);

      _assembly_builder = DN.AssemblyDefUser(name, version ?? System.Version(), publicKey, locale ?? "");
      _module_builder   = DN.ModuleDefUser(_assembly_builder.Name, System.Guid.NewGuid(), Manager.LibrariesManager.CorlibReference);
      _assembly_builder.Modules.Add(_module_builder);

      def runtimeVersion = Manager.LibrariesManager.CorlibRuntimeVersion;
      unless (string.IsNullOrEmpty(runtimeVersion))
        _module_builder.RuntimeVersion = runtimeVersion;

      _module_builder.Kind = 
        match ((_need_entry_point, Manager.Options.TargetIsWinexe))
        {
          | (true, true)  => DN.ModuleKind.Windows
          | (true, false) => DN.ModuleKind.Console
          | _             => DN.ModuleKind.Dll
        };

      foreach (pair in Manager.AttributeCompiler.GetPermissionSets(assembly_attributes))
      {
        def declSecurity = DN.DeclSecurityUser(pair.Key, pair.Value);
        _assembly_builder.DeclSecurities.Add(declSecurity);
      }

      TryAddAssemblyFileVersionAttribute();
    }

    public IsEmitting : bool { get { _assembly_builder != null } }

    internal GetModuleBuilder() : DN.ModuleDef
    {
      Util.cassert(_module_builder != null, "Module builder is not initialized");
      _module_builder
    }

    add_resources_to_assembly() : void
    {
      def escape_resource(x : string)
      {
        def cp = x.IndexOf (',');
        if (cp != -1)
          (x.Substring (0, cp), x.Substring (cp + 1))
        else
          // change name from /bar/bar/file.png to file.png namespace
          (x, Path.GetFileName (x));
      }

      foreach (element in Manager.Options.EmbeddedResources) {
        def (file, name) = escape_resource (element);
        try {
          if (File.Exists (file)) {
            def data = File.ReadAllBytes(file);
            def resource = DN.EmbeddedResource(name, data, DN.ManifestResourceAttributes.Public);
            _module_builder.Resources.Add(resource);
          }
          else
            Message.Error ("Could not find resource " + file);
        }
        catch {
          | e => Message.Error ("Could not embed resource: " + e.Message);
        }
      }

      foreach (element in Manager.Options.LinkedResources) {
        def (file, name) = escape_resource (element);
        try {
          def fileDef = DN.FileDefUser(file, DN.FileAttributes.ContainsNoMetadata, null);
          def resource = DN.LinkedResource(name, fileDef, DN.ManifestResourceAttributes.Public);
          _module_builder.Resources.Add(resource);
        }
        catch {
          | _ is FileNotFoundException =>
            Message.Error ("Could not find resource " + file);
          | e is System.ArgumentException =>
            Message.Error ("Could not link resource: " + e.Message);
        }
      }

     //def uresource = Manager.Options.UnmanagedResource;
     //if(uresource != null) {
     //  try {
     //    //_module_builder.DefineUnmanagedResource(uresource);
     //  }
     //  catch {
     //    | _ is FileNotFoundException =>
     //      Message.Error("Could not find resource" + uresource);
     //    | e is System.ArgumentException =>
     //      Message.Error($"Could not embed unmanaged resource $uresource: $(e.Message)");
     //  }
     //}
     //else
     //{
     //  this._assembly_builder.DefineVersionInfoResource();  
     //}

    }

    /**
     *
     */
    public EmitAuxDecls () : void
    {
      compile_all_tyinfos (true)
    }


    /**
     *
     */
    public EmitDecls () : void
    {
      Manager.Solver.Enqueue (fun () {
        compile_all_tyinfos (false);
        foreach ((attr, shouldEmit) when shouldEmit in Manager.AttributeCompiler.GetCompiledAssemblyAttributes (assembly_attributes))
          _assembly_builder.CustomAttributes.Add(attr);

        // emit debug attributes
        when (Manager.Options.EmitDebug) {
          def attr = Manager.AttributeCompiler.MakeEmittedAttribute(InternalType.DebuggableAttribute_tc, InternalType.DebuggableAttribute_DebuggingModes_tc.GetMemType(),
            DebuggableAttribute.DebuggingModes.DisableOptimizations | DebuggableAttribute.DebuggingModes.Default);
          _assembly_builder.CustomAttributes.Add(attr);
        }

        // do not require string literals interning
        def attr = Manager.AttributeCompiler.MakeEmittedAttribute(InternalType.CompilationRelaxationsAttribute_tc, 8);
        _assembly_builder.CustomAttributes.Add(attr);
      })
    }

    /**
     * Returns generated assembly for runtime instantations of its types
     */
    public GeneratedAssembly : DN.AssemblyDef
    {
      get { _assembly_builder }
    }


    /**
     * Saves the constructed assembly to a file
     */
    public SaveAssembly () : void
    {
      add_resources_to_assembly ();

      // if there are some nemerle specific metadata encoded in attributes
      when (contains_nemerle_specifics) {
        def attr = Manager.AttributeCompiler.MakeEmittedAttribute(InternalType.AssemblyConfigurationAttribute_tc, "ContainsNemerleTypes");
        this._assembly_builder.CustomAttributes.Add(attr);
      }

      // set the entry point
      match ((_need_entry_point, _entry_point))
      {
        | (true, Some (entry_point_method_info)) =>
          _module_builder.EntryPoint = entry_point_method_info;
        | (true, None) =>
          Message.Error ("no suitable entry point (Main function) found")
        | _ => ()
      }

      // save the assembly
      try
      {
        def options = DN.Writer.ModuleWriterOptions(_module_builder);
        options.WritePdb = Manager.Options.EmitDebug;
        options.InitializeStrongNameSigning(_module_builder, _strongNameKey);

        mutable characteristics = PE.Characteristics.ExecutableImage | PE.Characteristics.Dll;
        mutable corFlags        = DN.MD.ComImageFlags.ILOnly;
        mutable machine         = PE.Machine.I386;

        match (Manager.Options.Platform)
        {
          | Platform.AnyCpu               => ()
          | Platform.X86                  => characteristics |= PE.Characteristics.Bit32Machine
          | Platform.X64                  => machine = PE.Machine.AMD64
          | Platform.IA64                 => machine = PE.Machine.IA64
          | Platform.AnyCpu32bitPreferred => corFlags |= DN.MD.ComImageFlags.Bit32Preferred;
        }

        options.PEHeadersOptions.Characteristics = characteristics;
        options.PEHeadersOptions.Machine         = machine;
        options.Cor20HeaderOptions.Flags         = corFlags;

        _assembly_builder.Write (Path.GetFullPath(_OutputFileName), options);
      }
      catch
      {
        | e is System.UnauthorizedAccessException =>
          Message.Error ($"could not write to output file `$(this._OutputFileName)'"
                         " -- `$(e.Message)'")

        | e is IOException =>
          Message.Error ($"could not write to output file `$(this._OutputFileName)'"
                         " -- `$(e.Message)'")

        | e is System.Runtime.InteropServices.COMException =>
            Message.Error($"Problems saving assembly: $(e.Message)");

        | e is System.ApplicationException =>
          Message.Error (e.Message);
      }
    }

    /* -- PRIVATE METHODS -------------------------------------------------- */


    /**
     * - create type definitions for entire hierarchy of program
     * - add members to those TypeBuilders (only stubs for methods)
     * - emit bodies of methods
     * - finalize value types
     * - finalize all types
     */
    protected virtual compile_all_tyinfos (aux_phase : bool) : void
    {
      def allow_it(ti : TypeBuilder)
      {
        !ti.IsFinalized && is_aux_decl(ti) == aux_phase
      }

      def create_type_emit_builder(ti : TypeBuilder)
      {
        when (allow_it (ti))
        {
          //Message.Debug ("make type builder for " + ti.FullName);
          ti.CreateEmitBuilder ();

          when (ti.Attributes %&& NemerleModifiers.Macro)
          {
            def attr = Manager.AttributeCompiler.MakeEmittedAttribute(InternalType.ContainsMacroAttribute_tc, ti.GetTypeBuilder().ReflectionFullName);
            _assembly_builder.CustomAttributes.Add(attr);
          }
        }
      }
      // create members' declarations in type builders
      def emit_decls (ti : TypeBuilder)
      {
        when (allow_it(ti))
        {
          // Message.Debug ("generating declarations " + ti.FullName);
          ti.CreateEmitDeclarations()
        }
      }
      def emit_impl(ti : TypeBuilder)
      {
        when (allow_it(ti))
        {
          //Message.Debug ("generating code for " + ti.FullName);
          Manager.MarkTypeBuilderCompiled();
          ti.EmitImplementation()
        }
      }

      when (!aux_phase)
        _cgil_phase = 1;

      Iter(create_type_emit_builder);
      Iter(tb => when (allow_it(tb))
                   tb.UpdateEmittedInheritance());

      when (!aux_phase)
        _cgil_phase = 2;

      // first emit fields of enum types as it is required to compute their sizes,
      // when they are used as fields
      IterConditionally(emit_decls, (x : TypeBuilder) => x.IsEnum);
      IterConditionally(emit_decls, (x : TypeBuilder) => !x.IsEnum);

      when (!aux_phase)
        _cgil_phase = 3;

      // we first finalize value types, because MS.NET runtime requires so
      IterConditionally(emit_impl,
        (x : TypeBuilder) => x.IsValueType && x.DeclaringType == null);

      // now we can finalize everything else
      Iter(emit_impl);

      // MaybeBailout inteferes with the Code Completion Engine
      //unless (Manager.IsIntelliSenseMode)
      //  Message.MaybeBailout ();

      when (!aux_phase)
        _cgil_phase = 4;
    }

    internal CreateModuleRef(name : string) : DN.ModuleRef
    {
      mutable moduleRef;
      unless (_moduleReferences.TryGetValue(name, out moduleRef))
      {
        moduleRef = DN.ModuleRefUser(_module_builder, name);
        _moduleReferences.Add(name, moduleRef)
      }
      moduleRef;
    }

    internal CreatePdbDocument(filePath : string) : DN.Pdb.PdbDocument
    {
      unless (Manager.Options.EmitDebug)
        return null;

      def pdbKind =
        match (Manager.Options.PdbType)
        {
          | PdbType.Windows  => DN.Pdb.PdbFileKind.WindowsPDB
          | PdbType.Portable => DN.Pdb.PdbFileKind.PortablePDB
          | PdbType.Embedded => DN.Pdb.PdbFileKind.EmbeddedPortablePDB
        };

      if (_module_builder.PdbState == null)
        _module_builder.SetPdbState(DN.Pdb.PdbState(_module_builder, pdbKind));
      else
        _module_builder.PdbState.PdbFileKind = pdbKind;

      mutable pdbDocument;
      unless (_pdbDocuments.TryGetValue(filePath, out pdbDocument))
      {
        pdbDocument = DN.Pdb.PdbDocument(filePath, SymLanguageType.ILAssembly, SymLanguageVendor.Microsoft, SymDocumentType.Text, System.Guid.Empty, null);

        // NRE in dnlib
        typeof(DN.Pdb.PdbDocument).GetField("customDebugInfos", SR.BindingFlags.Instance | SR.BindingFlags.NonPublic)
                                 ?.SetValue(pdbDocument, SCG.List.[DN.Pdb.PdbCustomDebugInfo]());

        pdbDocument = _module_builder.PdbState.Add(pdbDocument);
        _pdbDocuments.Add(filePath, pdbDocument);
      }
      pdbDocument
    }

    internal EnsureEmitProgress (ti : TypeBuilder) : void
    {
      // Message.Debug ($"ma: $ti -> $mem ");
      when (_cgil_phase >= 1)
      {
        ti.CreateEmitBuilder ();
        ti.UpdateEmittedInheritance ();
      }
    }


    internal MaybeCompile (ti : TypeBuilder, mem : MemberBuilder) : void
    {
      mem.CreateEmitBuilder (ti.GetTypeBuilder ());

      when (_cgil_phase >= 3)
        ti.DoBeforeFinalization(() => mem.Compile())
    }


    /// Check if declaration is auxiliary, used internally etc.
    private static is_aux_decl (ti : TypeBuilder) : bool
    {
      ti.FullName.StartsWith("Nemerle.Internal.")
    }

    private TryAddAssemblyFileVersionAttribute() : void
    {
      def specialAttributes = SCG.Dictionary.[TypeInfo, bool]();
      specialAttributes.Add(InternalType.AssemblyCompanyAttribute_tc,     false);
      specialAttributes.Add(InternalType.AssemblyCopyrightAttribute_tc,   false);
      specialAttributes.Add(InternalType.AssemblyDescriptionAttribute_tc, false);
      specialAttributes.Add(InternalType.AssemblyFileVersionAttribute_tc, false);
      specialAttributes.Add(InternalType.AssemblyProductAttribute_tc,     false);
      specialAttributes.Add(InternalType.AssemblyTitleAttribute_tc,       false);
      specialAttributes.Add(InternalType.AssemblyVersionAttribute_tc,     false);

      mutable assemblyVersionString;
      mutable location;
      foreach ((env, attr) in assembly_attributes)
      {
        /* store resolved attribute */
        def (tc, parms) = Manager.AttributeCompiler.CheckAttribute(env, attr);

        mutable isDefined;
        when (specialAttributes.TryGetValue(tc, out isDefined))
        {
          if (isDefined)
            Message.Warning (attr.Location, "given attribute is occurred more than once")
          else
            specialAttributes[tc] = true
        }

        def take_string (pars) {
          | [ <[ $(x : string) ]> ] => x
          | _ =>
              Message.FatalError (attr.Location, "given attribute must have single string as parameter")
        }

        when (tc.Equals (InternalType.AssemblyVersionAttribute_tc))
        {         
          assemblyVersionString = take_string(parms);  
          location = attr.Location;
        }
      }

      when (!specialAttributes[InternalType.AssemblyFileVersionAttribute_tc] && specialAttributes[InternalType.AssemblyVersionAttribute_tc])
      {
        def version   = ParseVersion(assemblyVersionString, location).ToString();
        def attribute = Manager.AttributeCompiler.MakeEmittedAttribute(InternalType.AssemblyFileVersionAttribute_tc, version);
        _assembly_builder.CustomAttributes.Add(attribute);
      }
    }

    private static LoadStrongNameKey(loc : Location, name : string) : DN.StrongNameKey
    {
      try
        DN.StrongNameKey(File.ReadAllBytes(name))
      catch
      {
        | _ is DirectoryNotFoundException => Message.FatalError (loc, "could not find directory of `" + name + "' with key pair for assembly")
        | _ is FileNotFoundException => Message.FatalError (loc, "could not find file `" + name + "' with key pair for assembly")
      }
    }
  } // class
} // namespace
