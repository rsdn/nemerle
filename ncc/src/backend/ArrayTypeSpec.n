using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Extensions;
using Nemerle.Surround;
using Nemerle.Utility;

using System;
using System.Collections.Specialized;
using System.Linq;

using DN = dnlib.DotNet;

namespace Nemerle.Compiler
{
  public class ArrayTypeSpec : TypeSpec[DN.ArraySigBase]
  {
    private _moduleBuilder : DN.ModuleDef;

    public this(moduleBuilder : DN.ModuleDef, elementType : DN.TypeSig, rank : int)
    {
      base(if (rank == 1) DN.SZArraySig(elementType) else DN.ArraySig(elementType, rank));
      _moduleBuilder = moduleBuilder;
      Rank           = rank;
    }

    public Rank : int { get; }

    public Ctor : DN.IMethod
    {
      mutable _ctor : DN.IMethod;
      get
      {
        when (_ctor == null)
        {
          def methodSig = DN.MethodSig.CreateInstance(_moduleBuilder.CorLibTypes.Void, GetRankArguments());
          _ctor = DN.MemberRefUser(_moduleBuilder, ".ctor", methodSig, TypeRef) |> _moduleBuilder.UpdateRowId
        }
        _ctor
      }
    }

    public Address : DN.IMethod
    {
      mutable _address : DN.IMethod;
      get
      {
        when (_address == null)
        {
          def methodSig = DN.MethodSig.CreateInstance(DN.ByRefSig(TypeSig.Next), GetRankArguments());
          _address = DN.MemberRefUser(_moduleBuilder, "Address", methodSig, TypeRef) |> _moduleBuilder.UpdateRowId
        }
        _address
      }
    }

    public Get : DN.IMethod
    {
      mutable _get : DN.IMethod;
      get
      {
        when (_get == null)
        {
          def methodSig = DN.MethodSig.CreateInstance(TypeSig.Next, GetRankArguments());
          _get = DN.MemberRefUser(_moduleBuilder, "Get", methodSig, TypeRef) |> _moduleBuilder.UpdateRowId
        }
        _get
      }
    }

    public Set : DN.IMethod
    {
      mutable _set : DN.IMethod;
      get
      {
        when (_set == null)
        {
          def argTypes = GetRankArguments(Rank + 1);
          argTypes[Rank] = TypeSig.Next;

          def methodSig = DN.MethodSig.CreateInstance(_moduleBuilder.CorLibTypes.Void, argTypes);
          _set = DN.MemberRefUser(_moduleBuilder, "Set", methodSig, TypeRef) |> _moduleBuilder.UpdateRowId
        }
        _set
      }
    }

    private GetRankArguments() : array[DN.TypeSig]
    {
      GetRankArguments(Rank)
    }

    private GetRankArguments(count : int) : array[DN.TypeSig]
    {
      def argTypes = array(count);
      for (mutable i = 0; i < Rank; ++i)
        argTypes[i] = _moduleBuilder.CorLibTypes.Int32;
      argTypes
    }
  } // class
} // namespace
