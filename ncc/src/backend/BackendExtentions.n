using Nemerle.IO;
using Nemerle.Collections;
using Nemerle.Compiler.Typedtree;

using DN = dnlib.DotNet;
using SRC = System.Runtime.CompilerServices;

namespace Nemerle.Compiler.Backend
{
  public module Extentions
  {
    public AsObject(this literal : Literal, InternalType : InternalTypeClass) : object
    {
      match (literal)
      {
        | Literal.Void                  => assert(false)
        | Literal.Null                  => null
        | Literal.Char(c)               => c : object
        | Literal.String(s)             => s
        | Literal.Float(f)              => f
        | Literal.Double(d)             => d
        | Literal.Decimal(d)            => d
        | Literal.Bool(b)               => b
        | Literal.Enum(val, _, _field)  => AsObject(val, InternalType)
        | Literal.Integer(val, is_neg, t) =>
          def t = if (t == null) InternalType.Int32 else t;
          
          if (t.Equals(InternalType.UInt64))
          {
            assert(!is_neg);
            val : object
          }
          else if (val == 0x8000000000000000UL)
          {
            assert(is_neg);
            assert(t.Equals(InternalType.Int64));
            long.MinValue : object
          }
          else
          {
            def val = 
              if (is_neg) 
                -System.Convert.ToInt64(val)
              else
                System.Convert.ToInt64(val);
            match (t.tycon.FullName)
            {
              | "System.UInt32" => (val :> uint) : object
              | "System.Int32"  =>  val :> int
              | "System.Int16"  =>  val :> short
              | "System.UInt16" =>  val :> ushort
              | "System.SByte"  =>  val :> System.SByte
              | "System.Byte"   =>  val :> System.Byte
              | "System.Int64"  =>  val
              | _               => assert(false, t.tycon.FullName)
            }
          }
      }
    }
  } // module
} // namespace
