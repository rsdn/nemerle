using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Console;
using System.Reflection;

[assembly: TestAssembly.MyAttr(10, NamedStrArg = "str", NamedArrArg = array[1,2,4], 
                               NamedType1Arg=typeof(List[_]),
                               NamedType2Arg=typeof(System.Collections.Generic.List[int]),
                               NamedType3Arg=typeof(string))]

namespace TestAssembly
{
  public class MyAttr : Attribute
  {
    public this(posIntArg : int) { PosIntArg = posIntArg; }

    public PosIntArg     : int        { get; set; }
    public NamedStrArg   : string     { get; set; }
    public NamedArrArg   : array[int] { get; set; }
    public NamedType1Arg : Type       { get; set; }
    public NamedType2Arg : Type       { get; set; }
    public NamedType3Arg : Type       { get; set; }
  }
}

module Prog
{
  #if !RUNTIME_MONO
    InternalType = "System.RuntimeType";
  #else
    InternalType = "System.MonoType";
  #endif
	
  Main() : void
  {
    def attrs = typeof(Prog).Assembly.GetCustomAttributes(false)
                  .MapToArrayFiltered(_ is TestAssembly.MyAttr, x => x :> TestAssembly.MyAttr)[0];	
    
    WriteLine(attrs.PosIntArg);
    WriteLine(attrs.NamedStrArg);
    WriteLine(attrs.NamedArrArg);
    WriteLine(attrs.NamedType1Arg);
    WriteLine(attrs.NamedType1Arg.GetType().ToString() == InternalType);
    WriteLine(attrs.NamedType2Arg);
    WriteLine(attrs.NamedType2Arg.GetType().ToString() == InternalType);
    WriteLine(attrs.NamedType3Arg);
    WriteLine(attrs.NamedType3Arg.GetType().ToString() == InternalType);
  }
}

/*
BEGIN-OUTPUT
10
str
System.Int32[]
System.Collections.Generic.List`1[T]
True
System.Collections.Generic.List`1[System.Int32]
True
System.String
True
END-OUTPUT
*/
