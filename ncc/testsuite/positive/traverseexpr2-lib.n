// REFERENCE: Nemerle.Compiler
using System;
using System.IO;
using System.Console;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

namespace TraverseExpr2
{
  macro TraverseExpr2Test()
  {
    TraverseExpr2TestHelper.RunTest();
  }

  public module TraverseExpr2TestHelper
  {

    public RunTest() : PExpr
    {
      def res_func(res)
      {
        if (res) "OK" else "Fail"
      }

      def test((expr, check), res)
      {
        def res1 = res_func(check(TestWithContext(expr)));
        res1 :: res
      }

      def test_cases = [
                        (<[ Function(_) ]>, (x, y) => x == 1 && y is <[ Function(x) ]>),
                        (<[ Object.Method(_.prop.List, this, _.flags) ]>, (x, y) => x == 1 && y is <[ Object.Method(x.prop.List, this, x.flags) ]>),
                        (<[ Property ]>, (x, y) => x == 1 && y is <[ x.Property ]>),
                        (<[ Property.Value ]>, (x, y) => x == 1 && y is <[ x.Property.Value ]>),
                        (<[ (Property, Prop2) ]>, (x, y) => x == 1 && y is <[ (x.Property, x.Prop2) ]>),
                        (<[ (_, _[2].Property) ]>, (x, y) => x == 2 && y is <[ (x, y.Property) ]>),
                       ];

      def res = test_cases.FoldLeft(["begin"], test).Reverse();

      def str = $<#..$(res; "\n")#>;
      <[ Write($(str : string)); ]>
    }

    public GetParam(num : int) : PExpr
    {
      | 2 => <[ y ]>
      | 1
      | _ => <[ x ]>
    }

    public TestWithContext(expr : PExpr) : int * PExpr
    {
      def is_first(ctx)
      {
        | TraverseContext.Top
        | Expr(<[ $_.$_ ]>, Top)
        | Expr(<[ (..$_) ]>, Top) => true
        | _ => false
      }

      def loop(ctx, after, expr)
      {

        def wild_find()
        {
          when (ctx.Data :> int == 0) ctx.Data = 1;
        }

        if (after)
          match (expr)
          {
            | <[ $(_ : name) ]> when (is_first(ctx)) => wild_find();<[ x.$(expr.ToString() : usesite) ]>
            | <[ _ ]> => wild_find();<[ x ]>
            | _ => expr
          } else
          match (expr)
          {
            | <[ $_.$_ ]>
            | <[ (..$_) ]> => ctx.Push();null
            | PExpr.Indexer(<[ _ ]>, [PExpr.Literal(Literal.Integer(val = val))]) with num = val :> int => ctx.Data = Math.Max(ctx.Data :> int, num);<[ $(GetParam(num)) ]>
            | _ => null
          }
      }

      def insert_wild(ctx, after, expr)
      {
        | (_, true, <[ $(_ : name) ]>) => ctx.Break();<[ x.$(expr.ToString() : usesite) ]>
        | (_, true, _) => expr
        | (_, false, _) => null
      }

      def ctx = TraverseContext.Top();
      ctx.Data = 0;
      def expr = Macros.TraverseExprWithContext(None(), expr, ctx, loop);
      def n_params = ctx.Data :> int;
      if (n_params == 0) (1, Macros.TraverseExprWithContext(None(), expr, null, insert_wild)) else (n_params, expr)
    }

  }
}
