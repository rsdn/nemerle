using Nemerle.Collections;
using System;
using System.Collections.Generic;
using System.Console;

def handleException[T](f : void -> void)
{
  try
  {
    f();
	throw Exception("f didn't throw any exception")
  }
  catch
  {
    | _ is T => WriteLine(typeof(T));
    | _ => throw;
  }
}

def handleArgumentException(f : void -> void) { handleException.[System.ArgumentException](f) }
def handleArgumentNullException(f : void -> void) { handleException.[System.ArgumentNullException](f) }

def WriteLineNull(x) { if (x == null) WriteLine("Null") else throw Exception("Must be null") }

def listNull = null : list[int];
def listListNull = null : list[list[int]];
def listTupleNull = null : list[int * int];
def arrayNull = null : array[int];
def ilistNull = null : IList[int];
def seqNull = null : IEnumerable[int];
def defCmp(_, _) { 1 }

WriteLine("-- null as empty list --");

WriteLine(listNull.IsOrdered());
WriteLine(listNull.IsEmpty());
WriteLineNull([].Append(listNull));
WriteLineNull([].RevAppend(listNull));

WriteLine(NList.IsEmpty(listNull));
WriteLine(NList.Map(listNull, x => x));
WriteLine(NList.MapFiltered(listNull, _ => true, x => x));
WriteLine(NList.Length(listNull));

WriteLine(NList.Member(listNull, 0));
WriteLine(NList.Contains(listNull, 0));
WriteLine(NList.Filter(listNull, _ => true));
WriteLine(NList.FindAll(listNull, _ => true));
WriteLine(NList.Group(listNull, defCmp));
WriteLine(NList.Assoc(listTupleNull, 0));
WriteLine(NList.MemAssoc(listTupleNull, 0));

WriteLine(NList.SizeSubsets(listNull, 0));
WriteLine(NList.Filter2(listNull, listNull, (_, _) => (true, 0)));

WriteLine(NList.Compare(listNull, []));
WriteLine(NList.Compare([], listNull));
WriteLine(NList.Compare(listNull, [], defCmp));
WriteLine(NList.Compare([], listNull, defCmp));
WriteLineNull(NList.Append([], listNull));
WriteLineNull(NList.RevAppend([], listNull));

WriteLine(NList.ForAll2(listNull, [], (_, _) => true));
WriteLine(NList.ForAll2([], listNull, (_, _) => true));
WriteLine(NList.ForAll2(listNull, listNull, (_, _) => true));

// Compare
WriteLine("-- Compare --");
handleArgumentException(() => _ = NList.Compare(listNull, [1]));
handleArgumentException(() => _ = NList.Compare([1], listNull));
handleArgumentException(() => _ = NList.Compare(listNull, listNull));

handleArgumentException(() => _ = NList.Compare(listNull, [1], defCmp));
handleArgumentException(() => _ = NList.Compare([1], listNull, defCmp));
handleArgumentException(() => _ = NList.Compare(listNull, listNull, defCmp));

handleArgumentNullException(() => _ = NList.RemoveDuplicates(listNull));

// Conversion methods
WriteLine("-- Convert --");
handleArgumentNullException(() => _ = NList.FromArray(arrayNull));
handleArgumentNullException(() => _ = NList.ToListRev(seqNull));
handleArgumentNullException(() => _ = NList.ToListRev(seqNull, _ => true));

handleArgumentNullException(() => _ = NList.ToList(seqNull));
handleArgumentNullException(() => _ = NList.ToList(ilistNull));
handleArgumentNullException(() => _ = NList.ToList(ilistNull, _ => true));
handleArgumentNullException(() => _ = NList.AsList(ilistNull));

WriteLine("-- List methods --");
handleArgumentNullException(() => _ = NList.Head(listNull));
handleArgumentNullException(() => _ = NList.Hd(listNull));
handleArgumentNullException(() => _ = NList.Tail(listNull));
handleArgumentNullException(() => _ = NList.Tl(listNull));
handleArgumentNullException(() => _ = NList.Nth(listNull, 0));
handleArgumentNullException(() => _ = NList.Last(listNull));
handleArgumentNullException(() => _ = NList.Rev(listNull));

handleArgumentNullException(() => _ = NList.Append(listNull, []));
handleArgumentNullException(() => _ = NList.RevAppend(listNull, []));

handleArgumentNullException(() => _ = NList.Concat(listListNull));
handleArgumentNullException(() => _ = NList.ConcatRev(listListNull));
handleArgumentNullException(() => _ = NList.Flatten(listListNull));
handleArgumentNullException(() => _ = NList.Remove(listNull, 0));
handleArgumentException(() => _ = NList.DivideLast(listNull));
handleArgumentNullException(() => _ = NList.Iter(listNull, _ => ()));
handleArgumentNullException(() => _ = NList.RevMap(listNull, _ => 0));
handleArgumentNullException(() => _ = NList.RevMapFiltered(listNull, _ => true, _ => 0));

WriteLine("-- Fold --");
mutable acc;
handleArgumentNullException(() => _ = NList.FoldLeft(listNull, acc, (_,  x) => x));
handleArgumentNullException(() => _ = NList.FoldRight(listNull, acc, (_,  x) => x));

handleArgumentNullException(() => _ = NList.MapFromArray(arrayNull, _ => 0));

WriteLine("2 list methods");
handleArgumentException(() => _ = NList.Iter2(listNull, [], _ => ()));
handleArgumentException(() => _ = NList.Iter2([], listNull, _ => ()));
handleArgumentException(() => _ = NList.Iter2(listNull, listNull, _ => ()));

handleArgumentException(() => _ = NList.Map2(listNull, [], (_, _) => 0));
handleArgumentException(() => _ = NList.Map2([], listNull, (_, _) => 0));
handleArgumentException(() => _ = NList.Map2(listNull, listNull, (_, _) => 0));

handleArgumentException(() => _ = NList.RevMap2(listNull, [], (_, _) => 0));
handleArgumentException(() => _ = NList.RevMap2([], listNull, (_, _) => 0));
handleArgumentException(() => _ = NList.RevMap2(listNull, listNull, (_, _) => 0));

handleArgumentException(() => _ = NList.FoldLeft2(listNull, [], acc, (_, _, _) => 0));
handleArgumentException(() => _ = NList.FoldLeft2([], listNull, acc, (_, _, _) => 0));
handleArgumentException(() => _ = NList.FoldLeft2(listNull, listNull, acc, (_, _, _) => 0));

handleArgumentException(() => _ = NList.FoldRight2(listNull, [], acc, (_, _, _) => 0));
handleArgumentException(() => _ = NList.FoldRight2([], listNull, acc, (_, _, _) => 0));
handleArgumentException(() => _ = NList.FoldRight2(listNull, listNull, acc, (_, _, _) => 0));

handleArgumentException(() => _ = NList.Exists2(listNull, [], (_, _) => true));
handleArgumentException(() => _ = NList.Exists2([], listNull, (_, _) => true));
handleArgumentException(() => _ = NList.Exists2(listNull, listNull, (_, _) => true));

WriteLine("-- Find --");
handleArgumentNullException(() => _ = NList.ForAll(listNull, _ => true));
handleArgumentNullException(() => _ = NList.Exists(listNull, _ => true));

handleArgumentNullException(() => _ = NList.ContainsRef(null : list[object], null));

handleArgumentNullException(() => _ = NList.Find(listNull, _ => true));
handleArgumentNullException(() => _ = NList.FilteredLength(listNull, _ => true));
handleArgumentNullException(() => _ = NList.RevFilter(listNull, _ => true));

handleArgumentNullException(() => _ = NList.Partition(listNull, _ => true));
handleArgumentNullException(() => _ = NList.RemoveAssoc(listTupleNull, 0));

handleArgumentNullException(() => _ = NList.Split(listTupleNull));
handleArgumentNullException(() => _ = NList.Combine(listNull, []));
handleArgumentNullException(() => _ = NList.Combine([], listNull));
handleArgumentNullException(() => _ = NList.Combine(listNull, listNull));

handleArgumentNullException(() => _ = NList.Sort(listNull, defCmp));

handleArgumentNullException(() => _ = NList.Copy(listNull));

handleArgumentNullException(() => _ = NList.Product(listListNull));

handleArgumentNullException(() => _ = NList.SubsetsPartitions(listNull, 0));
handleArgumentNullException(() => _ = NList.SubsetsPartitions(listNull, 1));

handleArgumentNullException(() => _ = NList.Singletons(listListNull));

handleArgumentNullException(() => _ = NList.SizeSubsets(listNull, 1));

handleArgumentException(() => _ = NList.Filter2(listNull, [], (_, _) => (true, 0)));
handleArgumentException(() => _ = NList.Filter2([], listNull, (_, _) => (true, 0)));

/*
BEGIN-OUTPUT
-- null as empty list --
True
True
Null
Null
True
[]
[]
0
False
False
[]
[]
[]
None
False
[]
[]
1
-1
1
-1
Null
Null
False
False
False
-- Compare --
System.ArgumentException
System.ArgumentException
System.ArgumentException
System.ArgumentException
System.ArgumentException
System.ArgumentException
System.ArgumentNullException
-- Convert --
System.ArgumentNullException
System.ArgumentNullException
System.ArgumentNullException
System.ArgumentNullException
System.ArgumentNullException
System.ArgumentNullException
System.ArgumentNullException
-- List methods --
System.ArgumentNullException
System.ArgumentNullException
System.ArgumentNullException
System.ArgumentNullException
System.ArgumentNullException
System.ArgumentNullException
System.ArgumentNullException
System.ArgumentNullException
System.ArgumentNullException
System.ArgumentNullException
System.ArgumentNullException
System.ArgumentNullException
System.ArgumentNullException
System.ArgumentException
System.ArgumentNullException
System.ArgumentNullException
System.ArgumentNullException
-- Fold --
System.ArgumentNullException
System.ArgumentNullException
System.ArgumentNullException
2 list methods
System.ArgumentException
System.ArgumentException
System.ArgumentException
System.ArgumentException
System.ArgumentException
System.ArgumentException
System.ArgumentException
System.ArgumentException
System.ArgumentException
System.ArgumentException
System.ArgumentException
System.ArgumentException
System.ArgumentException
System.ArgumentException
System.ArgumentException
System.ArgumentException
System.ArgumentException
System.ArgumentException
-- Find --
System.ArgumentNullException
System.ArgumentNullException
System.ArgumentNullException
System.ArgumentNullException
System.ArgumentNullException
System.ArgumentNullException
System.ArgumentNullException
System.ArgumentNullException
System.ArgumentNullException
System.ArgumentNullException
System.ArgumentNullException
System.ArgumentNullException
System.ArgumentNullException
System.ArgumentNullException
System.ArgumentNullException
System.ArgumentNullException
System.ArgumentNullException
System.ArgumentNullException
System.ArgumentNullException
System.ArgumentException
System.ArgumentException
END-OUTPUT
*/
