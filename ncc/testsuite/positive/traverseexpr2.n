// REFERENCE: Nemerle.Compiler
using System;
using System.IO;
using System.Console;
using Nemerle.Extensions;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

module Program
{

    public GetParam(num : int) : PExpr
    {
      | 2 => <[ y ]>
      | 1
      | _ => <[ x ]>
    }

    TestWithContextCreate(expr : PExpr) : int * PExpr
    {
      mutable n_params : int = 1;

      def is_first(ctx)
      {
        | TraverseContext.Top
        | Expr(<[ $_.$_ ]>, Top)
        | Expr(<[ (..$_) ]>, Top) => true
        | _ => false
      }

      def loop(ctx, after, expr)
      {

        if (after)
          match (expr)
          {
            | PExpr.Ref(Name where (Id = "_")) => <[ x ]>
            | <[ $(_ : name) ]> when (is_first(ctx)) => <[ x.$(expr.ToString() : usesite) ]>
            | <[ _ ]> => <[ x ]>
            | _ => expr
          } else
          match (expr)
          {
            | <[ $_.$_ ]>
            | <[ (..$_) ]> => ctx.Push();null
            | PExpr.Indexer(<[ _ ]>, [PExpr.Literal(Literal.Integer(val = val))]) with num = val :> int => n_params = Math.Max(n_params, num);<[ $(GetParam(num)) ]>
            | _ => null
          }
      }

      //assert2(false);
      def expr = Macros.TraverseExprWithContext(None(), expr, null, loop);
      (n_params, expr)
    }

    TestCreate(expr : PExpr) : int * PExpr
    {
      mutable n_params : int = 1;
      mutable is_first : bool = true;

      def loop(ctx, after, expr)
      {
        if (after)
          match (expr)
          {
            | <[ _ ]>
            | PExpr.Ref(Name where (Id = "_")) => <[ x ]>
            | <[ $(_ : name) ]> when (is_first) => <[ x.$(expr.ToString() : usesite) ]>
            | <[ $_.$_ ]> when (ctx == null)
            | <[ (..$_) ]> when (ctx == null) => expr
            | _ => is_first = false;expr
          } else
          match (expr)
          {
            | <[ $(_ : name) ]>
            | <[ $_.$_ ]> when (ctx == null)
            | <[ (..$_) ]> when (ctx == null) => null
            | PExpr.Indexer(<[ _ ]>, [PExpr.Literal(Literal.Integer(val = val))]) with num = val :> int => n_params = Math.Max(n_params, num);<[ $(GetParam(num)) ]>
            | _ => is_first = false;null
          }
      }

      def expr = Macros.TraverseExpr2(None(), expr, null, loop);
      (n_params, expr)
    }

    Main() : void
    {
      def test(func, expr : PExpr, check)
      {
        WriteLine(if (check(func(expr))) "OK" else "Fail")
      }
      test(TestWithContextCreate, <[ Function(_) ]>, (x, y) => x == 1 && y is <[ Function(x) ]>);
      test(TestWithContextCreate, <[ Object.Method(_.prop.List, this, _.flags) ]>, (x, y) => x == 1 && y is <[ Object.Method(x.prop.List, this, x.flags) ]>);
      test(TestWithContextCreate, <[ Property ]>, (x, y) => x == 1 && y is <[ x.Property ]>);
      test(TestWithContextCreate, <[ Property.Value ]>, (x, y) => x == 1 && y is <[ x.Property.Value ]>);
      test(TestWithContextCreate, <[ (Property, Prop2) ]>, (x, y) => x == 1 && y is <[ (x.Property, x.Prop2) ]>);
      test(TestWithContextCreate, <[ (_, _[2].Property) ]>, (x, y) => x == 2 && y is <[ (x, y.Property) ]>);
      test(TestCreate, <[ Function(_) ]>, (x, y) => x == 1 && y is <[ Function(x) ]>);
      test(TestCreate, <[ Object.Method(_.prop.List, this, _.flags) ]>, (x, y) => x == 1 && y is <[ Object.Method(x.prop.List, this, x.flags) ]>);
      test(TestCreate, <[ Property ]>, (x, y) => x == 1 && y is <[ x.Property ]>);
      test(TestCreate, <[ Property.Value ]>, (x, y) => x == 1 && y is <[ x.Property.Value ]>);
      test(TestCreate, <[ (Property, Prop2) ]>, (x, y) => x == 1 && y is <[ (x.Property, x.Prop2) ]>);
      test(TestCreate, <[ (_, _[2].Property) ]>, (x, y) => x == 2 && y is <[ (x, y.Property) ]>);
    }

}
/*
BEGIN-OUTPUT
OK
OK
OK
OK
OK
OK
OK
OK
OK
OK
OK
OK
END-OUTPUT
*/
