// REFERENCE: System.Core
// OPTIONS: -nowarn:10001

//	emit_value_type_conversion test:
//	https://github.com/rsdn/nemerle/issues/387

using System;
using System.Console;

module Program
{
    ShowPassed : bool = false;
    
    Main() : void
    {
        equal(uc_byte_to_byte     , 0x80, "128");
        equal(uc_byte_to_ushort   , 0x80, "128");
        equal(uc_byte_to_uint     , 0x80, "128");
        equal(uc_byte_to_ulong    , 0x80, "128");
        equal(uc_byte_to_sbyte    , 0x80, "-128");
        equal(uc_byte_to_short    , 0x80, "128");
        equal(uc_byte_to_int      , 0x80, "128");
        equal(uc_byte_to_long     , 0x80, "128");
        equal(uc_byte_to_char     , 0x80, "\x0080");

        equal(uc_ushort_to_byte   , 0x8102, "2");
        equal(uc_ushort_to_ushort , 0x8000, "32768");
        equal(uc_ushort_to_uint   , 0x8000, "32768");
        equal(uc_ushort_to_ulong  , 0x8000, "32768");
        equal(uc_ushort_to_sbyte  , 0x81FE, "-2");
        equal(uc_ushort_to_short  , 0x8000, "-32768");
        equal(uc_ushort_to_int    , 0x8000, "32768");
        equal(uc_ushort_to_long   , 0x8000, "32768");
        equal(uc_ushort_to_char   , 0x8000, "\x8000");

        // 0x80000000 = 2147483648
        equal(uc_uint_to_byte     , 0x81020304, "4");
        equal(uc_uint_to_ushort   , 0x81020304, "772");
        equal(uc_uint_to_uint     , 0x80000000, "2147483648");
        equal(uc_uint_to_ulong    , 0x80000000, "2147483648");
        equal(uc_uint_to_sbyte    , 0x810203FE, "-2");
        equal(uc_uint_to_short    , 0x81028000, "-32768");
        equal(uc_uint_to_int      , 0x80000000, "-2147483648");
        equal(uc_uint_to_long     , 0x80000000, "2147483648");
        equal(uc_uint_to_char     , 0x81020304, "\x0304");

        equal(uc_ulong_to_byte    , 0x8102030405060708, "8");
        equal(uc_ulong_to_ushort  , 0x8102030405060708, "1800");
        equal(uc_ulong_to_uint    , 0x8102030480000000, "2147483648");
        equal(uc_ulong_to_ulong   , 0x8102030405060708, "9295995896645158664");
        equal(uc_ulong_to_sbyte   , 0x8102030405060780, "-128");
        equal(uc_ulong_to_short   , 0x8102030405068000, "-32768");
        equal(uc_ulong_to_int     , 0x8102030480000000, "-2147483648");
        equal(uc_ulong_to_long    , 0x8102030405060708, "-9150748177064392952");
        equal(uc_ulong_to_char    , 0x8102030405068708, "\x8708");

        equal(uc_sbyte_to_byte    , -128, "128");
        equal(uc_sbyte_to_ushort  , -128, "65408");
        equal(uc_sbyte_to_uint    , -128, "4294967168");
        equal(uc_sbyte_to_ulong   , -128, "18446744073709551488");
        equal(uc_sbyte_to_sbyte   , -128, "-128");
        equal(uc_sbyte_to_short   , -128, "-128");
        equal(uc_sbyte_to_int     , -128, "-128");
        equal(uc_sbyte_to_long    , -128, "-128");
        equal(uc_sbyte_to_char    , -128, "\xFF80");

        equal(uc_short_to_byte    ,   -384, "128");
        equal(uc_short_to_ushort  , -32768, "32768");
        equal(uc_short_to_uint    , -32768, "4294934528");
        equal(uc_short_to_ulong   , -32768, "18446744073709518848"); // C# behaviour
        equal(uc_short_to_sbyte   , -32381, "-125");
        equal(uc_short_to_short   , -32768, "-32768");
        equal(uc_short_to_int     , -32768, "-32768");
        equal(uc_short_to_long    , -32768, "-32768");
        equal(uc_short_to_char    , -32768, "\x8000");

        equal(uc_int_to_byte      , -128       , "128");
        equal(uc_int_to_ushort    , -32768     , "32768");
        equal(uc_int_to_uint      , -2147483648, "2147483648");
        equal(uc_int_to_ulong     , -2147483648, "18446744071562067968"); // C# behaviour
        equal(uc_int_to_sbyte     , -2130574460, "-124");   // -2130574460 = 0x81020384
        equal(uc_int_to_short     , -2130541820, "-31996"); // -2130541820 = 0x81028304
        equal(uc_int_to_int       , -2147483648, "-2147483648");
        equal(uc_int_to_long      , -2147483648, "-2147483648");
        equal(uc_int_to_char      , -2130541820, "\x8304");

        equal(uc_long_to_byte     , -384                , "128");
        equal(uc_long_to_ushort   , -32768              , "32768");
        equal(uc_long_to_uint     , -2147483648         , "2147483648");
        equal(uc_long_to_ulong    , -9150748177064392952, "9295995896645158664");
        equal(uc_long_to_sbyte    , -2130574460         , "-124");
        equal(uc_long_to_short    , -2130541820         , "-31996");
        equal(uc_long_to_int      , 0x102030480000000   , "-2147483648");
        equal(uc_long_to_long     , -9150748177064392952, "-9150748177064392952");
        equal(uc_long_to_char     , -9150748177064392952, "\x0708");

        equal(uc_char_to_byte     , '\x8080', "128");
        equal(uc_char_to_ushort   , '\x8000', "32768");
        equal(uc_char_to_uint     , '\x8000', "32768");
        equal(uc_char_to_ulong    , '\x8000', "32768");
        equal(uc_char_to_sbyte    , '\x8080', "-128");
        equal(uc_char_to_short    , '\x8000', "-32768");
        equal(uc_char_to_int      , '\x8000', "32768");
        equal(uc_char_to_long     , '\x8000', "32768");
        equal(uc_char_to_char     , '\x8899', "\x8899");

        // NOT IMPLEMENTED
        /*
        equal(c_byte_to_byte      , 136, "136");
        equal(c_byte_to_ushort    , 136, "136");
        equal(c_byte_to_uint      , 136, "136");
        equal(c_byte_to_ulong     , 136, "136");
        equal(c_byte_to_sbyte     , 136, "0");
        equal(c_byte_to_short     , 136, "136");
        equal(c_byte_to_int       , 136, "136");
        equal(c_byte_to_long      , 136, "136");
        equal(c_byte_to_char      , 136, "136");

        equal(c_ushort_to_byte    , 34969, "0");
        equal(c_ushort_to_ushort  , 34969, "34969");
        equal(c_ushort_to_uint    , 34969, "34969");
        equal(c_ushort_to_ulong   , 34969, "34969");
        equal(c_ushort_to_sbyte   , 34969, "0");
        equal(c_ushort_to_short   , 34969, "0");
        equal(c_ushort_to_int     , 34969, "34969");
        equal(c_ushort_to_long    , 34969, "34969");
        equal(c_ushort_to_char    , 34969, "0");

        equal(c_uint_to_byte      , 2291772091, "0");
        equal(c_uint_to_ushort    , 2291772091, "0");
        equal(c_uint_to_uint      , 2291772091, "2291772091");
        equal(c_uint_to_ulong     , 2291772091, "2291772091");
        equal(c_uint_to_sbyte     , 2291772091, "0");
        equal(c_uint_to_short     , 2291772091, "0");
        equal(c_uint_to_int       , 2291772091, "0");
        equal(c_uint_to_long      , 2291772091, "2291772091");
        equal(c_uint_to_char      , 2291772091, "0");

        equal(c_ulong_to_byte     , 0x8899AABBCCDDEEFF, "0");
        equal(c_ulong_to_ushort   , 0x8899AABBCCDDEEFF, "0");
        equal(c_ulong_to_uint     , 0x8899AABBCCDDEEFF, "0");
        equal(c_ulong_to_ulong    , 0x8899AABBCCDDEEFF, "0x8899AABBCCDDEEFF");
        equal(c_ulong_to_sbyte    , 0x8899AABBCCDDEEFF, "0");
        equal(c_ulong_to_short    , 0x8899AABBCCDDEEFF, "0");
        equal(c_ulong_to_int      , 0x8899AABBCCDDEEFF, "0");
        equal(c_ulong_to_long     , 0x8899AABBCCDDEEFF, "0");
        equal(c_ulong_to_char     , 0x8899AABBCCDDEEFF, "0");

        equal(c_sbyte_to_byte     , -120, "0");
        equal(c_sbyte_to_ushort   , -120, "0");
        equal(c_sbyte_to_uint     , -120, "0");
        equal(c_sbyte_to_ulong    , -120, "0");
        equal(c_sbyte_to_sbyte    , -120, "-120");
        equal(c_sbyte_to_short    , -120, "0");
        equal(c_sbyte_to_int      , -120, "0");
        equal(c_sbyte_to_long     , -120, "0");
        equal(c_sbyte_to_char     , -120, "0");

        equal(c_short_to_byte     , -32760, "0");
        equal(c_short_to_ushort   , -32760, "0");
        equal(c_short_to_uint     , -32760, "0");
        equal(c_short_to_ulong    , -32760, "0");
        equal(c_short_to_sbyte    , -32760, "0");
        equal(c_short_to_short    , -32760, "-32760");
        equal(c_short_to_int      , -32760, "0");
        equal(c_short_to_long     , -32760, "0");
        equal(c_short_to_char     , -32760, "0");

        equal(c_int_to_byte       , -33333333, "0");
        equal(c_int_to_ushort     , -33333333, "0");
        equal(c_int_to_uint       , -33333333, "0");
        equal(c_int_to_ulong      , -33333333, "0");
        equal(c_int_to_sbyte      , -33333333, "0");
        equal(c_int_to_short      , -33333333, "0");
        equal(c_int_to_int        , -33333333, "-33333333");
        equal(c_int_to_long       , -33333333, "0");
        equal(c_int_to_char       , -33333333, "0");

        equal(c_long_to_byte      , -444444444, "0");
        equal(c_long_to_ushort    , -444444444, "0");
        equal(c_long_to_uint      , -444444444, "0");
        equal(c_long_to_ulong     , -444444444, "0");
        equal(c_long_to_sbyte     , -444444444, "0");
        equal(c_long_to_short     , -444444444, "0");
        equal(c_long_to_int       , -444444444, "0");
        equal(c_long_to_long      , -444444444, "-444444444");
        equal(c_long_to_char      , -444444444, "0");

        equal(c_char_to_byte      , '\x8899', "0");
        equal(c_char_to_ushort    , '\x8899', "0");
        equal(c_char_to_uint      , '\x8899', "'\x8899'");
        equal(c_char_to_ulong     , '\x8899', "'\x8899'");
        equal(c_char_to_sbyte     , '\x8899', "0");
        equal(c_char_to_short     , '\x8899', "0");
        equal(c_char_to_int       , '\x8899', "'\x8899'");
        equal(c_char_to_long      , '\x8899', "'\x8899'");
        equal(c_char_to_char      , '\x8899', "\x8899");
        */

        if (_fails > 0) WriteLine($"$_fails failures")
        else WriteLine("PASS")
    }

    mutable _fails : int;

    equal[X,Y](test : Func[X, Y], value : X, expected : string) : void
    {
        def methodName = test.Method.Name.PadRight(20);

        try
        {
            def actual = test(value);

            def status = if (expected == actual.ToString()) "PASS" else { _fails++; "FAIL" }
            unless (status == "PASS" && !ShowPassed)
                WriteLine("{0} : {1} ({2} :> {3} expected {4})", methodName, status, value, actual, expected);
        }
        catch
        {
            | _ => _fails++; WriteLine("{0} : {1}", methodName, "FAIL");
        }
    }

    overflow[X,Y](test : Func[X, Y], value : X) : void
    {
        def methodName = test.Method.Name.PadRight(20);

        try
        {
            def _actual = test(value);
            _fails++;
            WriteLine("{0} : {1}", methodName, "FAIL");
        }
        catch
        {
            | _ is OverflowException => when (ShowPassed) WriteLine("{0} : {1}", methodName, "PASS");
            | _                      => _fails++; WriteLine("{0} : {1}", methodName, "FAIL");
        }
    }


    // byte -> *
    uc_byte_to_byte      (value : byte  ) : byte     { unchecked { value :> byte   } }
    uc_byte_to_ushort    (value : byte  ) : ushort   { unchecked { value :> ushort } }
    uc_byte_to_uint      (value : byte  ) : uint     { unchecked { value :> uint   } }
    uc_byte_to_ulong     (value : byte  ) : ulong    { unchecked { value :> ulong  } }
    uc_byte_to_sbyte     (value : byte  ) : sbyte    { unchecked { value :> sbyte  } }
    uc_byte_to_short     (value : byte  ) : short    { unchecked { value :> short  } }
    uc_byte_to_int       (value : byte  ) : int      { unchecked { value :> int    } }
    uc_byte_to_long      (value : byte  ) : long     { unchecked { value :> long   } }
    uc_byte_to_char      (value : byte  ) : char     { unchecked { value :> char   } }

    // ushort -> *
    uc_ushort_to_byte    (value : ushort) : byte     { unchecked { value :> byte   } }
    uc_ushort_to_ushort  (value : ushort) : ushort   { unchecked { value :> ushort } }
    uc_ushort_to_uint    (value : ushort) : uint     { unchecked { value :> uint   } }
    uc_ushort_to_ulong   (value : ushort) : ulong    { unchecked { value :> ulong  } }
    uc_ushort_to_sbyte   (value : ushort) : sbyte    { unchecked { value :> sbyte  } }
    uc_ushort_to_short   (value : ushort) : short    { unchecked { value :> short  } }
    uc_ushort_to_int     (value : ushort) : int      { unchecked { value :> int    } }
    uc_ushort_to_long    (value : ushort) : long     { unchecked { value :> long   } }
    uc_ushort_to_char    (value : ushort) : char     { unchecked { value :> char   } }

    // uint -> *
    uc_uint_to_byte      (value : uint  ) : byte     { unchecked { value :> byte   } }
    uc_uint_to_ushort    (value : uint  ) : ushort   { unchecked { value :> ushort } }
    uc_uint_to_uint      (value : uint  ) : uint     { unchecked { value :> uint   } }
    uc_uint_to_ulong     (value : uint  ) : ulong    { unchecked { value :> ulong  } }
    uc_uint_to_sbyte     (value : uint  ) : sbyte    { unchecked { value :> sbyte  } }
    uc_uint_to_short     (value : uint  ) : short    { unchecked { value :> short  } }
    uc_uint_to_int       (value : uint  ) : int      { unchecked { value :> int    } }
    uc_uint_to_long      (value : uint  ) : long     { unchecked { value :> long   } }
    uc_uint_to_char      (value : uint  ) : char     { unchecked { value :> char   } }

    // ulong -> *
    uc_ulong_to_byte     (value : ulong ) : byte     { unchecked { value :> byte   } }
    uc_ulong_to_ushort   (value : ulong ) : ushort   { unchecked { value :> ushort } }
    uc_ulong_to_uint     (value : ulong ) : uint     { unchecked { value :> uint   } }
    uc_ulong_to_ulong    (value : ulong ) : ulong    { unchecked { value :> ulong  } }
    uc_ulong_to_sbyte    (value : ulong ) : sbyte    { unchecked { value :> sbyte  } }
    uc_ulong_to_short    (value : ulong ) : short    { unchecked { value :> short  } }
    uc_ulong_to_int      (value : ulong ) : int      { unchecked { value :> int    } }
    uc_ulong_to_long     (value : ulong ) : long     { unchecked { value :> long   } }
    uc_ulong_to_char     (value : ulong ) : char     { unchecked { value :> char   } }

    // sbyte -> *
    uc_sbyte_to_byte     (value : sbyte ) : byte     { unchecked { value :> byte   } }
    uc_sbyte_to_ushort   (value : sbyte ) : ushort   { unchecked { value :> ushort } }
    uc_sbyte_to_uint     (value : sbyte ) : uint     { unchecked { value :> uint   } }
    uc_sbyte_to_ulong    (value : sbyte ) : ulong    { unchecked { value :> ulong  } }
    uc_sbyte_to_sbyte    (value : sbyte ) : sbyte    { unchecked { value :> sbyte  } }
    uc_sbyte_to_short    (value : sbyte ) : short    { unchecked { value :> short  } }
    uc_sbyte_to_int      (value : sbyte ) : int      { unchecked { value :> int    } }
    uc_sbyte_to_long     (value : sbyte ) : long     { unchecked { value :> long   } }
    uc_sbyte_to_char     (value : sbyte ) : char     { unchecked { value :> char   } }

    // short -> *
    uc_short_to_byte     (value : short ) : byte     { unchecked { value :> byte   } }
    uc_short_to_ushort   (value : short ) : ushort   { unchecked { value :> ushort } }
    uc_short_to_uint     (value : short ) : uint     { unchecked { value :> uint   } }
    uc_short_to_ulong    (value : short ) : ulong    { unchecked { value :> ulong  } }
    uc_short_to_sbyte    (value : short ) : sbyte    { unchecked { value :> sbyte  } }
    uc_short_to_short    (value : short ) : short    { unchecked { value :> short  } }
    uc_short_to_int      (value : short ) : int      { unchecked { value :> int    } }
    uc_short_to_long     (value : short ) : long     { unchecked { value :> long   } }
    uc_short_to_char     (value : short ) : char     { unchecked { value :> char   } }

    // int -> *
    uc_int_to_byte       (value : int   ) : byte     { unchecked { value :> byte   } }
    uc_int_to_ushort     (value : int   ) : ushort   { unchecked { value :> ushort } }
    uc_int_to_uint       (value : int   ) : uint     { unchecked { value :> uint   } }
    uc_int_to_ulong      (value : int   ) : ulong    { unchecked { value :> ulong  } }
    uc_int_to_sbyte      (value : int   ) : sbyte    { unchecked { value :> sbyte  } }
    uc_int_to_short      (value : int   ) : short    { unchecked { value :> short  } }
    uc_int_to_int        (value : int   ) : int      { unchecked { value :> int    } }
    uc_int_to_long       (value : int   ) : long     { unchecked { value :> long   } }
    uc_int_to_char       (value : int   ) : char     { unchecked { value :> char   } }

    // long -> *
    uc_long_to_byte      (value : long  ) : byte     { unchecked { value :> byte   } }
    uc_long_to_ushort    (value : long  ) : ushort   { unchecked { value :> ushort } }
    uc_long_to_uint      (value : long  ) : uint     { unchecked { value :> uint   } }
    uc_long_to_ulong     (value : long  ) : ulong    { unchecked { value :> ulong  } }
    uc_long_to_sbyte     (value : long  ) : sbyte    { unchecked { value :> sbyte  } }
    uc_long_to_short     (value : long  ) : short    { unchecked { value :> short  } }
    uc_long_to_int       (value : long  ) : int      { unchecked { value :> int    } }
    uc_long_to_long      (value : long  ) : long     { unchecked { value :> long   } }
    uc_long_to_char      (value : long  ) : char     { unchecked { value :> char   } }

    // char -> *
    uc_char_to_byte      (value : char  ) : byte     { unchecked { value :> byte   } }
    uc_char_to_ushort    (value : char  ) : ushort   { unchecked { value :> ushort } }
    uc_char_to_uint      (value : char  ) : uint     { unchecked { value :> uint   } }
    uc_char_to_ulong     (value : char  ) : ulong    { unchecked { value :> ulong  } }
    uc_char_to_sbyte     (value : char  ) : sbyte    { unchecked { value :> sbyte  } }
    uc_char_to_short     (value : char  ) : short    { unchecked { value :> short  } }
    uc_char_to_int       (value : char  ) : int      { unchecked { value :> int    } }
    uc_char_to_long      (value : char  ) : long     { unchecked { value :> long   } }
    uc_char_to_char      (value : char  ) : char     { unchecked { value :> char   } }

    // byte -> *
    c_byte_to_byte       (value : byte  ) : byte     { checked { value :> byte   } }
    c_byte_to_ushort     (value : byte  ) : ushort   { checked { value :> ushort } }
    c_byte_to_uint       (value : byte  ) : uint     { checked { value :> uint   } }
    c_byte_to_ulong      (value : byte  ) : ulong    { checked { value :> ulong  } }
    c_byte_to_sbyte      (value : byte  ) : sbyte    { checked { value :> sbyte  } }
    c_byte_to_short      (value : byte  ) : short    { checked { value :> short  } }
    c_byte_to_int        (value : byte  ) : int      { checked { value :> int    } }
    c_byte_to_long       (value : byte  ) : long     { checked { value :> long   } }
    c_byte_to_char       (value : byte  ) : char     { checked { value :> char   } }

    // ushort -> *
    c_ushort_to_byte     (value : ushort) : byte     { checked { value :> byte   } }
    c_ushort_to_ushort   (value : ushort) : ushort   { checked { value :> ushort } }
    c_ushort_to_uint     (value : ushort) : uint     { checked { value :> uint   } }
    c_ushort_to_ulong    (value : ushort) : ulong    { checked { value :> ulong  } }
    c_ushort_to_sbyte    (value : ushort) : sbyte    { checked { value :> sbyte  } }
    c_ushort_to_short    (value : ushort) : short    { checked { value :> short  } }
    c_ushort_to_int      (value : ushort) : int      { checked { value :> int    } }
    c_ushort_to_long     (value : ushort) : long     { checked { value :> long   } }
    c_ushort_to_char     (value : ushort) : char     { checked { value :> char   } }

    // uint -> *
    c_uint_to_byte       (value : uint  ) : byte     { checked { value :> byte   } }
    c_uint_to_ushort     (value : uint  ) : ushort   { checked { value :> ushort } }
    c_uint_to_uint       (value : uint  ) : uint     { checked { value :> uint   } }
    c_uint_to_ulong      (value : uint  ) : ulong    { checked { value :> ulong  } }
    c_uint_to_sbyte      (value : uint  ) : sbyte    { checked { value :> sbyte  } }
    c_uint_to_short      (value : uint  ) : short    { checked { value :> short  } }
    c_uint_to_int        (value : uint  ) : int      { checked { value :> int    } }
    c_uint_to_long       (value : uint  ) : long     { checked { value :> long   } }
    c_uint_to_char       (value : uint  ) : char     { checked { value :> char   } }

    // ulong -> *
    c_ulong_to_byte      (value : ulong ) : byte     { checked { value :> byte   } }
    c_ulong_to_ushort    (value : ulong ) : ushort   { checked { value :> ushort } }
    c_ulong_to_uint      (value : ulong ) : uint     { checked { value :> uint   } }
    c_ulong_to_ulong     (value : ulong ) : ulong    { checked { value :> ulong  } }
    c_ulong_to_sbyte     (value : ulong ) : sbyte    { checked { value :> sbyte  } }
    c_ulong_to_short     (value : ulong ) : short    { checked { value :> short  } }
    c_ulong_to_int       (value : ulong ) : int      { checked { value :> int    } }
    c_ulong_to_long      (value : ulong ) : long     { checked { value :> long   } }
    c_ulong_to_char      (value : ulong ) : char     { checked { value :> char   } }

    // sbyte -> *
    c_sbyte_to_byte      (value : sbyte ) : byte     { checked { value :> byte   } }
    c_sbyte_to_ushort    (value : sbyte ) : ushort   { checked { value :> ushort } }
    c_sbyte_to_uint      (value : sbyte ) : uint     { checked { value :> uint   } }
    c_sbyte_to_ulong     (value : sbyte ) : ulong    { checked { value :> ulong  } }
    c_sbyte_to_sbyte     (value : sbyte ) : sbyte    { checked { value :> sbyte  } }
    c_sbyte_to_short     (value : sbyte ) : short    { checked { value :> short  } }
    c_sbyte_to_int       (value : sbyte ) : int      { checked { value :> int    } }
    c_sbyte_to_long      (value : sbyte ) : long     { checked { value :> long   } }
    c_sbyte_to_char      (value : sbyte ) : char     { checked { value :> char   } }

    // short -> *
    c_short_to_byte      (value : short ) : byte     { checked { value :> byte   } }
    c_short_to_ushort    (value : short ) : ushort   { checked { value :> ushort } }
    c_short_to_uint      (value : short ) : uint     { checked { value :> uint   } }
    c_short_to_ulong     (value : short ) : ulong    { checked { value :> ulong  } }
    c_short_to_sbyte     (value : short ) : sbyte    { checked { value :> sbyte  } }
    c_short_to_short     (value : short ) : short    { checked { value :> short  } }
    c_short_to_int       (value : short ) : int      { checked { value :> int    } }
    c_short_to_long      (value : short ) : long     { checked { value :> long   } }
    c_short_to_char      (value : short ) : char     { checked { value :> char   } }

    // int -> *
    c_int_to_byte        (value : int   ) : byte     { checked { value :> byte   } }
    c_int_to_ushort      (value : int   ) : ushort   { checked { value :> ushort } }
    c_int_to_uint        (value : int   ) : uint     { checked { value :> uint   } }
    c_int_to_ulong       (value : int   ) : ulong    { checked { value :> ulong  } }
    c_int_to_sbyte       (value : int   ) : sbyte    { checked { value :> sbyte  } }
    c_int_to_short       (value : int   ) : short    { checked { value :> short  } }
    c_int_to_int         (value : int   ) : int      { checked { value :> int    } }
    c_int_to_long        (value : int   ) : long     { checked { value :> long   } }
    c_int_to_char        (value : int   ) : char     { checked { value :> char   } }

    // long -> *
    c_long_to_byte       (value : long  ) : byte     { checked { value :> byte   } }
    c_long_to_ushort     (value : long  ) : ushort   { checked { value :> ushort } }
    c_long_to_uint       (value : long  ) : uint     { checked { value :> uint   } }
    c_long_to_ulong      (value : long  ) : ulong    { checked { value :> ulong  } }
    c_long_to_sbyte      (value : long  ) : sbyte    { checked { value :> sbyte  } }
    c_long_to_short      (value : long  ) : short    { checked { value :> short  } }
    c_long_to_int        (value : long  ) : int      { checked { value :> int    } }
    c_long_to_long       (value : long  ) : long     { checked { value :> long   } }
    c_long_to_char       (value : long  ) : char     { checked { value :> char   } }

    // char -> *
    c_char_to_byte       (value : char  ) : byte     { checked { value :> byte   } }
    c_char_to_ushort     (value : char  ) : ushort   { checked { value :> ushort } }
    c_char_to_uint       (value : char  ) : uint     { checked { value :> uint   } }
    c_char_to_ulong      (value : char  ) : ulong    { checked { value :> ulong  } }
    c_char_to_sbyte      (value : char  ) : sbyte    { checked { value :> sbyte  } }
    c_char_to_short      (value : char  ) : short    { checked { value :> short  } }
    c_char_to_int        (value : char  ) : int      { checked { value :> int    } }
    c_char_to_long       (value : char  ) : long     { checked { value :> long   } }
    c_char_to_char       (value : char  ) : char     { checked { value :> char   } }
}

/*
BEGIN-OUTPUT
PASS
END-OUTPUT
*/
