// REFERENCE: System.Core
// REFERENCE: Nemerle.Linq
using System;
using System.Console;
using System.Linq;
using Nemerle.Extensions;
using Nemerle.Collections;
using Nemerle.Utility;
using NorthWind;

module Program
{
  Main() : void
  {
    System.Threading.Thread.CurrentThread.CurrentCulture = System.Globalization.CultureInfo.InvariantCulture;
  
    def result = orders
      .Select(o => (o, /* t = */ o.Details.Sum(d => d.UnitPrice * (d.Quantity :> double))))
      .Where(fun((_o, t)) { t >= 10.0 })
      .Select(fun((o, t)) { (o.OrderID, /* Total = */ t) })
    ; 

    WriteLine($"..$result");
  }
}

[Record, StructuralEquality, StructuralHashCode]
class Detail
{
  [Accessor] _orderID    : int;
  [Accessor] _productID  : int;
  [Accessor] _unitPrice  : double;
  [Accessor] _quantity   : int;

  public override ToString() : string
  {
    $"Detail(OrderID=$OrderID; ProductID=$ProductID; UnitPrice=$UnitPrice; Quantity=$Quantity)"
  }
}

[Record, StructuralEquality, StructuralHashCode]
class Product
{
  [Accessor] _productID   : int;
  [Accessor] _productName : string;

  public override ToString() : string
  {
    $"Product(ProductID=$ProductID; ProductName=$ProductName)"
  }
}

[Record, StructuralEquality, StructuralHashCode]
class Order
{
  [Accessor] _orderID    : int;
  [Accessor] _customerID : int;
  [Accessor] _orderDate  : DateTime;
    
  public override ToString() : string
  {
    $"Order(OrderID=$OrderID)"
  }
    
  public Customer : Customer
  {
    get { _customers.FindObject(c => c.CustomerID == CustomerID) }
  }
    
  public Total : double
  {
    get
    {
      _details.Where(d => d.OrderID == OrderID)
              .Select(d => d.Quantity * d.UnitPrice)
              .Sum()
    }
  }
    
  public Details : IQueryable[Detail]
  {
    get { _details.Where(d => d.OrderID == OrderID).AsQueryable() }
  }

  public _Details : Collections.Generic.IEnumerable[Detail]
  {
    get { _details.Where(d => d.OrderID == OrderID) }
  }
}
[Record, StructuralEquality, StructuralHashCode]
class Customer
{
  [Accessor] _customerID : int;
  [Accessor] _name       : string;
  [Accessor] _country    : string;
  [Accessor] _city       : string;
    
  public override ToString() : string
  {
    $"Customer(CustomerID=$CustomerID; Name=$Name)"
  }

  public Orders : IQueryable[Order]
  {
    get { _orders.Where(o => o.CustomerID == CustomerID).AsQueryable() }
  }
}

module NorthWind
{
  this()
  {
    _customers = array[
      Customer(1, "Jack", "UK",     "London"),
      Customer(2, "Ivan", "Russia", "Vladivostok"),
      Customer(3, "Vlad", "Russia", "Moscow"),
      Customer(4, "Lee",  "China",  "Peking"),
    ];
      
    _products = array[
      Product(21, "Mineral water"),
      Product(22, "Salt"),
      Product(23, "Coffee"),
      Product(24, "Cheese"),
      Product(25, "Meat"),
      Product(26, "Caviar"),
      Product(27, "Sugar"),
      Product(28, "Tea"),
    ];
      
    _orders = array[
      Order(31, 1, DateTime.Parse("2021/01/22")),
      Order(32, 2, DateTime.Parse("2021/01/24")),
      Order(33, 1, DateTime.Parse("2021/02/01")),
      Order(34, 4, DateTime.Parse("2021/02/03")),
      Order(35, 4, DateTime.Parse("2021/02/06")),
      Order(36, 3, DateTime.Parse("2021/03/01")),
      Order(37, 1, DateTime.Parse("2021/03/02")),
      Order(38, 2, DateTime.Parse("2021/03/14")),
      Order(39, 1, DateTime.Parse("2021/03/23")),
    ];

    _details = array[
      Detail(31, 21, 1.20, 3),
      Detail(31, 25, 9.67, 1),
      Detail(31, 22, 0.20, 2),
      Detail(32, 28, 1.20, 3),
      Detail(32, 21, 1.20, 3),
      Detail(33, 23, 1.20, 3),
      Detail(34, 25, 1.20, 3),
      Detail(34, 27, 1.20, 3),
      Detail(34, 28, 1.20, 3),
      Detail(35, 22, 1.20, 3),
      Detail(35, 23, 1.20, 3),
      Detail(36, 24, 1.20, 3),
      Detail(37, 25, 1.20, 3),
      Detail(37, 26, 1.20, 3),
      Detail(37, 27, 1.20, 3),
      Detail(38, 28, 1.20, 3),
      Detail(38, 21, 1.20, 3),
      Detail(38, 24, 1.20, 3),
      Detail(38, 22, 1.20, 3),
      Detail(39, 26, 1.20, 3),
      Detail(39, 28, 1.20, 3),
      Detail(39, 22, 1.20, 3),
    ];
      
      
  }
    
  internal _customers : array[Customer];
  internal _orders    : array[Order];
  internal _products  : array[Product];
  internal _details   : array[Detail];

  public customers : IQueryable[Customer] { get { _customers.AsQueryable() } }
  public orders    : IQueryable[Order]    { get { _orders   .AsQueryable() } }
  public products  : IQueryable[Product]  { get { _products .AsQueryable() } }
  public details   : IQueryable[Detail]   { get { _details  .AsQueryable() } }
}

/*
BEGIN-OUTPUT
(31, 13.67), (34, 10.8), (37, 10.8), (38, 14.4), (39, 10.8)
END-OUTPUT
*/
