#pragma implicit

using System
using System.Collections.Generic
using C = System.Console


public class ShouldAlwaysCompile {
    _str: String;
    _int : int;
    
    public this() {
        _str = "Hello World";
        _int = 5;
    }
}

variant Test
{
  | None
  | Something 
    {s: String}
}

/* For up-coming record type (like scala: case class) release

public record TestRecord(text: String)

record AnotherRecord : TestRecord (
    number: int,
    hasSolution: bool
)

internal sealed record SealedRecord(
    memAddress: long,
    accessed: bool
)
*/

public class TestNewSyntax {
    _str: String
    _int: int
    
    public this() {
        _str = "Hello World".ToUpper()
        _int = 5
    }
}

public class TestNewSyntax2 {
    mutable _str: String
    
    public this()
    {
        _str = "Hello World"
        
        def k() {
            C.WriteLine(_str)
        }
        
        k()
    }
    
    getNumber() : int { 
        5 +
            47
    }
    
    public SomeFunc() : (int * string) {
        _str = String
            .Format("Hello {0}", "World!")
        (getNumber
            (), _str)
    }

    public TestLotsOfDefs() : void
    {
        def a = "Apple"
        def b = "Battery"
        def c = a + b
        def d(
            input: int
            )
            {
                def tmp = input 
                + 
                1
                tmp *
                tmp
            }        
		_ = c
        _ = d(4)    
        def e = 
        {
            "Electric" + 
            {
                "Horse" + {
                    a + b}
            }
        }
        
		_ = e
		
        def double
        (
        a : int
        )
        {
            def left 
            =
            a
            
            def right
            =
            a
            
            left
            +
            right
        }          
		_ = double(3)
        
        def k
        (input: string, 
         expansion: int) {
             def sb = System.Text.StringBuilder()
             
             def loop(cnt) 
             {
                 _ = sb.Append(input)
                 when(cnt > 0)
                 {
                     C.WriteLine($ "Producing iteration: $(expansion - cnt)" )
                     loop(cnt 
                        - 1)
                        
                 }
             }                          
             
             def length = sb.Length
             _ = length
			 
             loop(expansion
             )
         }
        _ = k("word", 
		  5)
    }
}

public class TestClass {

    #region Test Properties
    
    // scoped property: 1
    private MagicNumber: int { get ; set }
    
    // scoped property: 2
    public Text : string {
        get
        set
    }
    
    // scoped property: 3
    public SplicedName : String
    {
        get
        set
    }
    
    // Unscoped property: 1
    PreciseNumber : double { get; set;
    }
    
    // Unscoped property: 2
    LessPreciseNumber: float {
        get
        set
    }
    
    // Unscoped property: 3
    Countable : long
    {
        get
        set;
    }
    
    #endregion
    
    #region Test Classes
    
    // scoped class: 1
    public class Test1
    {      }
    
    // scoped class: 2
    public class Test2
    {      
    }
    
    // scoped class: 3
    public class Test3      {      



    }
    
    #endregion
}



using Nemerle.Assertions

public static class CheckAssertions {
    public static 
	Method1(input: string) : void    
    requires input != null
    {
        
    }
}



using System.Console
public static class Program {        
    static this() 
    {
        Console.WriteLine("Program initializing...")
    }    
    public Main() : void {
        def t = TestNewSyntax2()
        //def rec = AnotherRecord("Hello World", 5, false)
        //def recType = typeof(AnotherRecord)
        //def sealedType = typeof(SealedRecord)
        
        //WriteLine($"Record contains text: $(rec.text)")
        //WriteLine($"AnotherRecord IsSealed: $(recType.IsSealed), IsValueType: $(recType.IsValueType)")
        //WriteLine($"SealedRecord IsSealed: $(sealedType.IsSealed), IsValueType: $(sealedType.IsValueType)")                
        _ = t
        WriteLine("Program finished!")
    }
}

/*
BEGIN-OUTPUT
Program initializing...
Hello World
Program finished!
END-OUTPUT
*/