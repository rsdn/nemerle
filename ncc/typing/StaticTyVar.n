/*
 * Copyright (c) 2004-2008 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle;
using System;
using System.Reflection;
using Nemerle.Collections;

using SRE = System.Reflection.Emit;
using NC = Nemerle.Compiler;

namespace Nemerle.Compiler 
{
  //type StaticTyVar = StaticTypeVar;

  /** Represents an explicitly bound type variable, like the one from
      polymorphic type or method definition. It is also used in
      generalizations of inferred types. */
  [ManagerAccess]
  public class StaticTypeVar : System.IEquatable[StaticTypeVar]
  {
              mutable gtype : System.Type; 
    internal          id              : int;
                      name            : string;
    mutable           special         : GenericParameterAttributes;
    mutable           constraints     : list[FixedType];
    internal  mutable current_type    : NC.TypeInfo = null;
    internal  mutable current_method  : IMethod = null;

    public override   ToString()      : string
    {
      if (IsContravariant) "-" + Name else if (IsCovariant) "+" + Name else Name
    }

    public DebugToString() : string
    {
      // XXX include constraints?
      $ "$Name.$Id" + if (SpecialConstraints != 0 || !Constraints.IsEmpty) 
                            " where ($SpecialConstraints ..$Constraints)" 
                          else ""
    }

    /// Return lower constraints on given type variable (that is the
    /// [where] clauses). The constraints should be already normalized (that 
    /// is they should follow FixedType.Intersection invariants).
    public Constraints : list [FixedType]
    {
      get
      {
        assert(constraints != null);
        constraints
      }

      set
      {
        assert(constraints == null);
        constraints = value;

        unless (value.IsEmpty)
        {
          // Why would I validate ?! CLR allows denormalized generic constraints !
          // "where T : Class_Implements_IFoo, IFoo" is perfectly OK!
          // LowerBound.Validate ();
          
          foreach (x in constraints)
            when (x.Equals(InternalType.Void))
              Message.Error ($ "cannot use `void' as constraint for $(Name)");
        }
      }
    }


    public LowerBound : FixedType
    {
      get
      {
        assert(constraints != null, $"for $this");

        match (constraints)
        {
          | [] when (IsValueType)=>
            assert(InternalType.ValueType != null);
            InternalType.ValueType

          | [] =>
            assert(InternalType.Object != null);
            InternalType.Object

          | [x] => x
          | lst => FixedType.Intersection (lst)
        }
      }
    }
    

    public Name : string { get { name } }

    public Id : int { get { id } }
    
    public this (man : ManagerClass, name : string)
    {
      Manager = man;
      this.name = name;
      id = Manager.StaticTyVarId;
      ++Manager.StaticTyVarId;
    }

    private this (other : StaticTypeVar)
    {
      this.name = other.name;
      this.special = other.special;
      this.Manager = other.Manager;
      
      id = Manager.StaticTyVarId;
      ++Manager.StaticTyVarId;
    }
      
    public this (man : ManagerClass, name : string, gtype : System.Type)
    {
      this (man, name);
      this.gtype = gtype;
    }
    
    public GetSystemType () : System.Type
    {
      assert(gtype != null, ToString ());
      gtype
    }

    internal ApplySubst(orig_sub : Subst) : StaticTypeVar
    {
      // we should also do a substitution on the constraints, but it appears
      // to be tricky at best -- enabling it causes failures in Nemerle.dll
      if (true || Constraints is [])
        this
      else
      {
        def sub = orig_sub.Copy();
        def res = StaticTypeVar(this);

        sub.Add(this, FixedType.StaticTypeVarRef(res));

        def new_constraints = Constraints.Map(x => sub.Apply (x).Fix ());

        if (new_constraints.Equals(Constraints))
          this
        else
        {
          res.Constraints = new_constraints;
          orig_sub.Add(this, FixedType.StaticTypeVarRef(res));
          res
        }
      }
    }

    public SpecialConstraints : GenericParameterAttributes { get { special } }

    internal SetConstraints(special : GenericParameterAttributes, subtype : list[FixedType]) : void
    {
      when (special %&& GenericParameterAttributes.NotNullableValueTypeConstraint
        && special %&& GenericParameterAttributes.ReferenceTypeConstraint
      )
        Message.Error ("`struct' generic constraint cannot be used together with `class'");

      this.special = special;

      def check_class_constraints(lst)
      {
        mutable c = null;

        lst.ForAll (
          fun(x)
          {
            | x is FixedType.Class when !x.tycon.IsInterface => 
                if(c == null)
                {
                  c = x;
                  true;
                }
                else
                {
                  Message.Error($"generic parameter cannot be constrained by multiple non-interfaces : $(c), $(x)");
                  false
                }
            | _ => true
          });
      }

      if (check_class_constraints(subtype))
        Constraints = subtype;
      else
        Constraints = [];
    }

    public IsValueType : bool
    {
      get
      {
        special %&& GenericParameterAttributes.NotNullableValueTypeConstraint
      }
    }
    
    public HasDefaultConstructor : bool
    {
      get
      {
        special %&& GenericParameterAttributes.DefaultConstructorConstraint
      }
    }
    
    public IsCovariant : bool
    {
      get
      {
        special %&& GenericParameterAttributes.Covariant
      }
    }

    public IsContravariant : bool
    {
      get
      { 
        special %&& GenericParameterAttributes.Contravariant
      }
    }
        
    [Nemerle.OverrideObjectEquals]
    public Equals(o : StaticTypeVar) : bool
      implements System.IEquatable[StaticTypeVar].Equals
    {
      id == o.id
    }


    /** Copy a list of type parameters for use in a new type.
        Also return a substitution from the old to the new list.  */
    static public CopyList (typarms : list [StaticTypeVar]) : Subst * list [StaticTypeVar]
    {
      def sub = Subst ();
      def newtp =
        typarms.Map(
          fun (tp)
          {
            def ntp = StaticTypeVar (tp);
            sub.Add (tp, FixedType.StaticTypeVarRef (ntp));
            (ntp, tp.Constraints)
          }).Map(
            fun (tv : StaticTypeVar, constr : list [_])
            {
              tv.Constraints = constr.Map (x => sub.Apply (x).Fix ());
              tv
            });

      (sub, newtp)
    }

    internal SetGenericBuilder(x : SRE.GenericTypeParameterBuilder) : void
    {
      Util.cassert(gtype == null);
      Util.cassert(x != null);
      x.SetGenericParameterAttributes(special);
      gtype = x;
    }

    internal UpdateConstraints() : void
    {
      def gbuil = gtype :> SRE.GenericTypeParameterBuilder;

      def ifaces =
        match (constraints) 
        {
          | (FixedType.Class as x) :: _ when x.tycon.IsInterface => constraints
          | x :: xs => gbuil.SetBaseTypeConstraint (x.GetSystemType ()); xs
          | [] => []
        };

      unless (ifaces.IsEmpty) 
        gbuil.SetInterfaceConstraints (ifaces.MapToArray(_.GetSystemType ()));
    }

    public CheckConstraints (tv : TypeVar, thing : object) : void
    {
      _ = TryCheckConstraints(tv, thing, true)
    }
    
    /// Check if [tv] fullfills [this]'s constraints.
    public TryCheckConstraints(tv : TypeVar, thing : object, needMessage : bool) : bool
    {
      def default_ctorable(t) 
      {
        | FixedType.Class(ti, _) when ti.IsAbstract => false
        | FixedType.Class(ti, _) =>
          ! t.CanBeNull || // value types always have this ctor
          ti.LookupMember(".ctor").Exists(
            fun (_)
            {
              | meth is IMethod =>
                meth.Attributes %&& NemerleModifiers.Public &&
                meth.GetHeader().Parameters.IsEmpty
              | _ => false
            })

        | FixedType.StaticTypeVarRef(s) =>
          s.SpecialConstraints %&& GenericParameterAttributes.DefaultConstructorConstraint

        | _ => false
      }

      def checkIsNullable(t) 
      {
        | FixedType.Class(ti, _) => !ti.Equals(InternalType.ValueType_tc) && t.CanBeNull
        | _                      => t.CanBeNull
      }

      def check_constraints(t, c) 
      {
        !match(t)
        {
          | FixedType.StaticTypeVarRef(s) => s.Constraints.ForAll(ctr => ctr.IsInterface || !c(ctr));
          | _                             => t.IsInterface || !c(t);
        }
      }

      def t = tv.Fix ();
      mutable ok = true;

      when (SpecialConstraints %&& GenericParameterAttributes.NotNullableValueTypeConstraint
            && check_constraints(t, checkIsNullable))
      {
        // cs453
        when (needMessage)
          Message.Error ($"the type `$t' must be a value type in order to use it as type parameter `$(Name)' in $thing");

        ok = false;
      }

      when (SpecialConstraints %&& GenericParameterAttributes.ReferenceTypeConstraint 
            && check_constraints(t, c => c.IsValueType)) // !c.CanBeNull => c.IsValueType
      {
        // cs452
        when (needMessage)
          Message.Error($"the type `$t' must be a reference type in order to use it as type parameter `$(Name)' in $thing");

        ok = false;
      }
      
      when (SpecialConstraints %&& GenericParameterAttributes.DefaultConstructorConstraint 
            && ! default_ctorable(t))
      {
        // cs310
        when (needMessage)
          Message.Error($"the type `$t' must have a public parameterless constructor and must not be abstract in order to use it as type parameter `$(Name)' in $thing");

        ok = false;
      }
      
      ok
    }

    public HasConstraints : bool
    {
      get
      {
        !NList.IsEmpty(constraints) || SpecialConstraints != GenericParameterAttributes.None 
      }
    }
  }
}
