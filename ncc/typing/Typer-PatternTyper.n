/*
 * Copyright (c) 2003-2008 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle.Collections;
using Nemerle.Utility;

using Nemerle.Compiler;
using Nemerle.Compiler.Typedtree;
using Nemerle.Compiler.SolverMacros;

using SCG = System.Collections.Generic;
using PT = Nemerle.Compiler.Parsetree;

namespace Nemerle.Compiler
{
  // pattern Foo (x1, x2, ..., xN) = expr
  // Name = "Foo",
  // Identifiers = ["x1", ..., "xN"]
  // Pattern = expr
  [Record]
  public class ExtensionPattern
  {
    [Accessor]
    parent : TypeInfo;
    
    [Accessor]
    name : string;

    [Accessor]
    identifiers : list [string];

    [Accessor]
    pattern : PT.PExpr;

    /// Must be removed before build type tree.
    public Temporary : bool { get; }

    public override ToString () : string
    {
      $ "extension pattern $parent.$name"
    }

    internal Transform (e : PT.PExpr) : PT.PExpr
    {
      def messenger = parent.Manager.Solver.CurrentMessenger;
      
      def is_assignment (expr) {
        expr is PT.PExpr.Assign (PT.PExpr.Ref, _) 
      }

      def add_wildcards (ids = Identifiers, m = Map ()) {
        ids.FoldLeft (m, fun (id, m) { m.Add (id, <[ _ ]>) })
      }

      def handle_assigns (assigns) {
        def (remaining, map) =
          assigns.FoldLeft ((Identifiers, Map ()), fun (assign, acc) {
            def (remaining, map) = acc;
            match (assign) {
              | <[ $(n : dyn) = $pat ]> =>
                if (remaining.Contains (n)) {
                  (remaining.Remove (n), map.Add (n, pat))
                } else if (Identifiers.Contains (n)) {
                  ReportError (messenger,
                               $ "the pattern for `$n' was already specified");
                  acc
                } else {
                  ReportError (messenger,
                               $ "$this does not contain a field named `$n'");
                  acc
                }
              | _ => Util.ice ()
            }
          });
        add_wildcards (remaining, map)
      }

      def handle_pats (pats) {
        if (pats.Length != Identifiers.Length) {
          ReportError (messenger,
                       $ "$this expects $(Identifiers.Length) patterns "
                         "as arguments, got $(pats.Length)");
          add_wildcards ()
        } else
          NList.FoldLeft2 (Identifiers, pats, Map (),
                          fun (n, p, m) { m.Add (n, p) });
      }
      
      def map =
        match (e) {
          | <[ _ ]> =>
            add_wildcards ()
            
          | <[ () ]> =>
            unless (Identifiers is [])
              ReportError (messenger, 
                           $ "$this needs $Identifiers as parameters");
            add_wildcards ()
            
          | <[ $assign ]> when is_assignment (assign) =>
            handle_assigns ([assign])
            
          | <[ ( .. $assigns ) ]> when assigns.ForAll (is_assignment) =>
            handle_assigns (assigns)

          | <[ ( .. $pats ) ]> =>
            handle_pats (pats)
            
          | <[ $pat ]>  =>
            handle_pats ([pat])
        }
            
      def rename (_, is_post, e) {
        match (e) {
          | <[ $(n : dyn) ]> when is_post =>
            match (map.Find (n)) {
              | Some (e') => e'
              | _ => e
            }
          | _ => e
        }
      }
      
      def res = Macros.TraverseExpr (None (), Pattern, true, rename);
      // Message.Debug ($ "expand: $Pattern -> $res");
      res
    }
  }

  public partial class Typer
  {
    [ManagerAccess (typer.Manager)]
    public class PatternTyper
    {
      [Accessor] typer : Typer;
      matched_value_type : TypeVar;
      patterns : list [PT.PExpr * option [PT.PExpr] * list [PT.Name * PT.PExpr * PT.PExpr]];
      messenger : Messenger;

      mutable common_variables : Map [PT.Name, LocalValue];
      mutable current_pattern_variables : Map [PT.Name, LocalValue];


      public this (typer : Typer,
                   matched_value_type : TypeVar,
                   patterns : list [PT.PExpr * option [PT.PExpr] * list [PT.Name * PT.PExpr * PT.PExpr]])
      {
        this.typer = typer;
        this.matched_value_type = matched_value_type;
        this.patterns = patterns;
        messenger = typer.messenger;
      }


      public Run () : list [Pattern * TExpr * list [LocalValue * TExpr]]
      {
        mutable result = [];

        foreach ((pattern, guard, assigns) in patterns)
        {
          current_pattern_variables = Map();
          def typed_pattern = TypePattern(matched_value_type, pattern);

          // FIXME: shouldn't this be in the library?
          def intersect (map1 : Map[PT.Name, _], map2 : Map[PT.Name, _])
          {
            map1.Fold(Map(), 
              fun (key, value, res : Map [PT.Name, _])
              {
                if (map2.Contains (key))
                  res.Add (key, value)
                else
                  res
              })
          }

          typer.PushLocals ();
          current_pattern_variables.Iter(typer.AddLocal);

          def expr =
            match (guard)
            {
              | None => <[ true ]>
              | Some (expr) => expr
            };

          def typed_expr = typer.TypeExpr(expr, InternalType.Boolean);
          
          def assigns = assigns.Map(HandleAssign);
          typer.PopLocals ();

          if (common_variables == null)
            common_variables = current_pattern_variables;
          else
            common_variables = intersect (common_variables, current_pattern_variables);

          result = (typed_pattern, typed_expr, assigns) :: result;
        }

        common_variables.Iter (fun (_, v : LocalValue) {
                                v.UsedInPatternBody = true
                               });
        common_variables.Iter (typer.AddLocal);

        NList.Rev (result)
      }


      DefinePatternVariable (name : PT.Name, ty : TypeVar) : LocalValue
      {
        if (current_pattern_variables.Contains (name))
        {
          Util.locate(name.Location, 
            ReportError (messenger,  $"pattern variable `$(name)' already seen in this pattern"));
          current_pattern_variables.Get(name)
        }
        else
        {
          def decl =
            if (common_variables == null || !common_variables.Contains (name))
              typer.DefineLocal (name, typer.FreshTypeVar (),
                                 LocalValue.Kind.PatternVariable (false),
                                 false)
            else
              common_variables.Get (name);

          unless (decl.Type.Provide (ty))
          {
            ReportError (messenger,
                         $ "$decl used to have type $(decl.Type) but now it "
                           "has type $ty");
            when (messenger.InErrorMode)
              Message.Hint ("rename variable if they have no connection");
          }

          current_pattern_variables =
            current_pattern_variables.Add (name, decl);

          decl
        }
      }


      HandleAssign (name : PT.Name, nameExpr : PT.PExpr, expr : PT.PExpr) : LocalValue * TExpr
      {
        def expr = typer.TypeExpr (expr);
        def decl = DefinePatternVariable (name, expr.Type);
        decl.SetParsedObject(nameExpr); //nameExpr.TypedObject = decl;
        typer.AddLocal(name, decl);
        (decl, expr)
      }


      TypeTuplePattern (matched_value_type : TypeVar, pats : list [PT.PExpr]) : Pattern
      {
        def is_assignment (expr) { expr is PT.PExpr.Assign }
        def withoutIgnoreFieldAttribute(field)
        {
          !field.IsCustomAttributeDefined("Nemerle.Internal.IgnoreFieldAttribute")
        }

        if (pats.Exists(is_assignment)) 
        {
          if (pats.ForAll(is_assignment)) 
          {
            def is_invalid_assignment (expr) { !(expr is PT.PExpr.Assign (PT.PExpr.Ref, _)) }

            match (pats.Filter(is_invalid_assignment)) 
            {
              | [] =>
                match (matched_value_type.Hint) 
                {
                  | Some (FixedType.Class (ti, _)) when matched_value_type.IsFixed =>
                    def is_instance_field (_ : IMember) 
                    {
                      | field is IField => !field.IsStatic
                      | prop is IProperty =>
                        !prop.IsStatic && !prop.IsIndexer && prop.GetGetter () != null
                      | _ => false
                    }
                    def lookup_field (expr) 
                    {
                      | PT.PExpr.Assign (PT.PExpr.Ref (name), pat) =>
                        def fields = NList.Filter (ti.LookupMember (name.Id), is_instance_field);
                        match (fields) 
                        {
                          | [] =>
                            ReportError (messenger, $"the type `$(ti)' has no field named `$(name)'");
                            (null, Pattern.Error ())

                          | [field] =>
                            Manager.MarkAsUsed (field, expr.Location, typer.TriggerObsoleteWarning);

                            unless(field.CanAccess(typer.CurrentTypeBuilder))
                              Util.locate(name.Location, ReportError (messenger, $"`$field' is not accessible"));

                            def ty = matched_value_type.FixedValue.TypeOfMember (field);
                            (field, TypePattern (ty, pat))

                          | _ =>
                            // I don't thinks this can happen
                            ReportError (messenger,
                                         $"overload ambiguity during selection of `$ti.$(name)'");
                            (null, Pattern.Error ())
                        }

                      | _ => assert(false)
                    }

                    Pattern.Record (NList.Map (pats, lookup_field))
                    
                    
                  | _ =>
                    ReportError (messenger,
                                 "the (fieldname = ...) pattern is not allowed "
                                 "here, try prefixing it with the class name");
                    Pattern.Error ()
                }
              | bad_pats =>
                def explain (expr) 
                {
                  | PT.PExpr.Assign (t, _) =>
                    Util.locate (expr.Location, ReportError (messenger, 
                      $"expression ``$t'' cannot be used as fieldname in (fieldname = ...) pattern"))

                  | _ => assert(false)
                }
                bad_pats.Iter (explain);
                Pattern.Error ()
 
            }
          } else {
            ReportError (messenger, "not all, but some patterns in tuple are named");
            Pattern.Error ()
          }
        }
        else match (matched_value_type.Hint) 
        {
          // if we expect matching on a class, transform the pattern
          // to include field names
          | Some (FixedType.Class (ti, _)) =>
            def flags = BindingFlags.DeclaredOnly %| BindingFlags.Public %| BindingFlags.Instance;
            def mems  = ti.GetFields(flags).Filter(withoutIgnoreFieldAttribute);
            def names = mems.Map(_.Name);
            match(pats.Length)
            {
              | 0 =>
                ReportError(messenger, "pattern can't match 0 values");
                Pattern.Error()

              | n when n == names.Length =>
                def assigns = NList.Map2(names, pats, (n, p) => PT.PExpr.Assign (PT.PExpr.Ref(PT.Name(n)), p));
                TypeTuplePattern(matched_value_type, assigns)

              | n =>
                ReportError(messenger, $"pattern matches $n values, while the type `$ti' has $(names.Length) fields");
                Pattern.Error()
            }

          | Some (FixedType.Tuple (types)) when types.Length != pats.Length =>
            ReportError (messenger,
                         $ "pattern matches $(pats.Length)-tuples, "
                           "while the value matched is a "
                           "$(types.Length)-tuple");
            Pattern.Error ()
            
          | _ =>
            def types = pats.Map(_ => typer.FreshTypeVar ());

            if (matched_value_type.Unify (FixedType.Tuple (types))) 
            {
              def typed_pats = NList.Map2 (types, pats, TypePattern);
              Pattern.Tuple (typed_pats)
            } else {
              ReportError (messenger, "type clash in pattern typing");
              Pattern.Error ()
            }
        }
      }


      TypePattern (matched_value_type : TypeVar, pattern : PT.PExpr) : Pattern
      {
        Util.locate (pattern.Location, {
          def typed = DoTypePattern (matched_value_type, pattern);
          when (typed.ty == null)
            typed.ty = matched_value_type;
          typed
        })
      }

      TypeRef(matched_value_type : TypeVar, pattern : PT.PExpr.Ref) : Pattern
      {
        def name = pattern.name;
        def id   = name.Id;

        def pat =
          if (id.Length >= 1 && (char.IsLower(id[0]) || id[0] == '_')) // if lowercase ref value => it is variable
          {
            def asPat = TypePattern(matched_value_type, PT.PExpr.As(PT.PExpr.Wildcard(), PT.Splicable.Name(name))) :> Pattern.As;
            asPat.SetParsedObject(pattern);
            asPat
          }
          else
            TypeApplication(matched_value_type, pattern, PT.PExpr.Wildcard(name.Location), false, true);

        pat
      }

      TypeApplication (matched_value_type : TypeVar, 
                       name : PT.PExpr, 
                       pattern : PT.PExpr) : Pattern
      {
        TypeApplication(matched_value_type, name, pattern, is_where = false)
      }

      
      TypeApplication(matched_value_type : TypeVar, 
                      name : PT.PExpr, 
                      pattern : PT.PExpr,
                      is_where : bool, is_warns : bool = false) : Pattern
      {
        //name.ResetTypedObject(); //name.TypedObject = null;
        def nameloc = name.Location;
        def free = matched_value_type.IsFree;
        
        def pat = match (Util.QidOfExpr(name))
        {
          | Some (([id], name)) when !is_where && (id[0] == '_') && pattern is PT.PExpr.Wildcard =>
              TypePattern(matched_value_type, PT.PExpr.As(nameloc, PT.PExpr.Wildcard(), PT.Splicable.Name (nameloc, name)))
          | Some ((idl, name)) =>
            
            def env = name.GetEnv (typer.env);
           
            def is_proper_symbol(sym : IMember)
            {
              | fld is IField when !is_where => fld.CanAccess(typer.current_type) && fld.IsLiteral
              | ti is TypeInfo               => ti.CanAccess(typer.current_type)
              | _ => false
            }

            def symbols = match ((idl, matched_value_type.Hint)) 
                          {
                            | ([name], Some (FixedType.Class (tc, _))) => tc.LookupMember (name).Filter(is_proper_symbol)
                            | _                                        => []
                          }
            def symbols = if (symbols.IsEmpty) env.LookupSymbol(idl, typer.current_type).Filter (is_proper_symbol) 
                          else symbols;

            def symbols = SquashDuplicates(symbols);
          
            def env = name.GetEnv (typer.env);
            
            def redundant()
            {
              when (messenger.NeedMessage)
                    Message.Warning ("using the type check pattern here is redundant, type is always that");
            }
            
            match (symbols) 
            {
              | [fld is IField] =>
                if (pattern is PT.PExpr.Wildcard) 
                {
                  if (matched_value_type.Require (fld.GetMemType () : FixedType)) 
                  {
                    def val = ConstantFolder.FieldValueAsPureLiteral (fld, typer.TriggerObsoleteWarning);
                    if (fld.DeclaringType.GetTydecl () is TypeDeclaration.Enum)
                      Pattern.Enum (nameloc, fld, val)
                    else
                      Pattern.Literal (val)
                  }
                  else 
                  {
                    ReportError (messenger, 
                                 $ "the matched value type "
                                   "$matched_value_type was required "
                                   "to have type $(fld.GetMemType ())");
                    Pattern.Error ()
                  }
                }
                else 
                {
                  ReportError (messenger, 
                               "a pattern was supplied after enum field name");
                  Pattern.Error()
                }

              | [ti is TypeInfo] =>
              
                def lookup (ti : TypeInfo)
                {
                  match (ti.GetTydecl())
                  {
                    | TypeDeclaration.Alias(FixedType.Class (tc, _)) =>
                      lookup(tc)

                    | _ when is_where
                    | Interface
                    | Variant
                    | Class =>
                    
                      def option_type = ti.GetFreshType ();

                      if (matched_value_type.TryProvide(option_type))
                      {
                        matched_value_type.ForceProvide(option_type);
                        when (is_warns && !free && matched_value_type.TryRequire(option_type)) redundant();
                        def inpat = TypePattern (option_type, pattern);
                        Pattern.Application(pattern.Location, ti, inpat)
                      }
                      else if (matched_value_type.TryRequire(option_type))
                      {
                        when (is_warns) redundant();
                        matched_value_type.ForceRequire(option_type);
                        TypePattern(option_type, pattern)
                      }
                      else
                      {
                        ReportError (messenger, $"the matched value type $matched_value_type was expected to be compatible with $option_type");
                        Pattern.Error ()
                      }

                    | VariantOption =>
                    
                    match (idl)
                    {
                      | [id] when (System.Char.IsLower(id[0])) =>
                         ReportError (messenger, $ "`$(name)' cannot be variant option, since it starts with lowercase letter");
                         Pattern.Error()
                         
                      | _ =>
                      
                      def option_type = ti.GetFreshType();
                      
                      if (matched_value_type.Provide(option_type))
                      {
                        when (is_warns && !free && matched_value_type.TryRequire(option_type)) redundant();
                        def inpat = TypePattern(option_type, pattern);
                        Pattern.Application(pattern.Location, ti, inpat)
                      }
                      else
                      {
                        ReportError(messenger, $"the matched value type $matched_value_type was expected to be compatible with $option_type");
                        Pattern.Error()
                      }
                    }
                    
                    | _ =>
                      ReportError (messenger, $ "`$(ti.FullName)' is not a variant option");
                      Pattern.Wildcard ()
                  }
                }
                lookup (ti)
                
              | [] =>
                def ext_pattern =
                  match ((idl, matched_value_type.Hint))
                  {
                    | ([name], Some (FixedType.Class (tc, _))) =>
                      tc.GetExtensionPattern (name)
                    | _ => 
                      def (typ, field) = idl.DivideLast ();
                      def patterns =
                        if (typ is [])
                          []
                        else
                          env.LookupSymbol (typ, typer.current_type).FoldLeft ([],
                            fun (tc, acc)
                            {
                              match (tc)
                              {
                                | tc is TypeInfo =>
                                  match (tc.GetExtensionPattern (field)) {
                                    | Some (ext) => ext :: acc
                                    | None => acc
                                  }
                                | _ => acc
                              }
                            });

                      match (patterns)
                      {
                        | []  => None()
                        | [e] => Some(e)
                        | x =>
                          ReportError (messenger, $ "overloading ambiguity $(x.ToString (\", \"))");
                          None ()
                      }
                  };

                match (ext_pattern)
                {
                  | Some(e) =>
                    def option_type = e.Parent.GetFreshType ();
                    if (matched_value_type.Require (option_type))
                      TypePattern (matched_value_type, e.Transform (pattern))
                    else
                    {
                      ReportError (messenger,
                        $"the matched value type $matched_value_type was expected to be compatible with $option_type");
                      Pattern.Error ()
                    }

                  | _ =>
                    ReportError (messenger, $ "unbound type name $(idl.ToString (\".\"))");
                    Pattern.Error()
                }

              | x =>
                ReportError (messenger, $ "overloading ambiguity $(x.ToString (\", \"))");
                Pattern.Error()
            }

          | None =>
            ReportError (messenger, "expected qualified identifier in pattern");
            Pattern.Error()
        };

        // VladD2: Похоже тут не нужно устанавливать ParsedObject, так как это промежуточная 
        //         функция не имеющая доступа к реальному выражению.
        //when (pat.ParsedObject == null) //(name.TypedObject == null)
        //  pat.SetParsedObject(name); //name.TypedObject = pat;
        pat;
      }


      DoTypePattern (matched_value_type : TypeVar, pattern : PT.PExpr) : Pattern
      {
        pattern.ResetTypedObject();  //pattern.TypedObject = null;

        when (Manager.IsCompletionInProgress)
          Manager.CompletePattern (pattern, matched_value_type, this, typer.env);

        def pat = match (pattern)
        {
          | <[ $type where $e1 = $e2 ]> => DoTypePattern (matched_value_type, <[ $type where ($e1 = $e2) ]>) // fix operator precedence issue
          | PT.PExpr.TypeEnforcement (_, PT.PExpr.ToComplete (_))
          | PT.PExpr.TypeEnforcement (_, PT.PExpr.Member (_, Parsetree.Splicable.HalfId (_)))
          | PT.PExpr.Is(_, PT.PExpr.ToComplete (_))
          | PT.PExpr.Is(_, PT.PExpr.Member (_, Parsetree.Splicable.HalfId (_))) =>
            Manager.CompletePattern (pattern, matched_value_type, this, typer.env);
            throw System.NotImplementedException ();

          | PT.PExpr.ListLiteral (l) => TypePattern (matched_value_type, Macros.Lift (l))

          // if we have simple expression left it recognize as type
          | <[ $(n : name) as $(sname : name) ]> => 
            def res = TypePattern(matched_value_type, <[ $(n : name)() as $(sname : name) ]>);
            res.SetParsedObject(pattern);
            res
          
          | PT.PExpr.As(pat, PT.Splicable.Name (name) as sname) =>
            def typed_pattern = TypePattern(matched_value_type, pat);
            def fixed_type =
              match (typed_pattern)
              {
                | Pattern.Application (ti, _) =>
                  def raw_type = ti.GetFreshType ();
                  when (!raw_type.Require(matched_value_type))
                    ReportError (messenger,
                      $"the matched value type $matched_value_type was expected to be compatible with $raw_type");
                  raw_type

                | _ => matched_value_type
              };

            def decl = DefinePatternVariable (name, fixed_type);
            decl.name_location = sname.Location;
            Pattern.As (pattern.Location, matched_value_type, typed_pattern, decl);


          | PT.PExpr.As(_, PT.Splicable.Expression) =>
            ReportError(messenger, "$ operator used outside of quotation <[ ... ]> context");
            Pattern.Error()

          | PT.PExpr.TypeEnforcement (nested, needed_type) =>
            def needed_type' = typer.BindType (needed_type).FixedValue;

            if (messenger.LocalError) Pattern.Error ()
            else if (matched_value_type.TryRequire (needed_type')) 
            { // just a hint?
              matched_value_type.ForceRequire (needed_type');
              TypePattern (needed_type', nested)
            } else {
              when (messenger.NeedMessage)
                Message.Warning (602, "using ``:'' as a type tests is "
                                      "deprecated, please use ``is'' instead");
              TypePattern (matched_value_type, 
                           PT.PExpr.Is (pattern.Location, nested, needed_type))
            }

          | PT.PExpr.Is(nested, needed_is_type) =>
            needed_is_type.ResetTypedObject();  //needed_is_type.TypedObject = null;

            def needed_type = typer.BindType(needed_is_type);
            def needed_type = 
              if (needed_type.IsFixed)
                needed_type.FixedValue
              else
              {
                Message.Error (needed_is_type.Location, "type given in `is' pattern must be fully specified");
                InternalType.Object
              };
            def properly_subtypes = matched_value_type.TryProvide(needed_type);
            def res =
              if (properly_subtypes)
              {
                matched_value_type.ForceProvide(needed_type);
                null
              }
              else if (matched_value_type.Fix () is FixedType.StaticTypeVarRef)
                null
              else if (needed_type.IsInterface || Option.UnSome(matched_value_type.Hint).IsInterface)
                null // ok, we allow interfaces here
              else if (matched_value_type.TryRequire(needed_type))
              {
                matched_value_type.ForceRequire (needed_type);
                when (messenger.NeedMessage)
                  Message.Warning(10013, "using the ``is'' pattern here is redundant, please use ``:''");
                TypePattern (needed_type, nested)
              }
              else
              {
                ReportError (messenger, $"matched value has type $matched_value_type while the pattern enforces $needed_type");
                Pattern.Error ()
              }

            match (needed_type)
            {
              | _ when res != null => res
              | FixedType.Ref | FixedType.Void 
              | FixedType.Out | FixedType.Intersection =>
                ReportError (messenger, $ "invalid type in (x : type) pattern: $needed_type");
                Pattern.Error ()
                
              | ty =>
                def typed_pattern = Pattern.HasType (pattern.Location, matched_value_type, ty);
                typed_pattern.SetParsedObject(needed_is_type); //needed_is_type.TypedObject = typed_pattern;
                match (TypePattern (needed_type, nested))
                {
                  | Pattern.As(Pattern.Wildcard, decl) => Pattern.As(pattern.Location, matched_value_type, typed_pattern, decl)
                  | Pattern.Wildcard => typed_pattern
                  | _ =>
                    ReportError (messenger, "only variable patterns are allowed (here : type)");
                    Pattern.Error ()
                }
            }
          

          | PT.PExpr.Wildcard => Pattern.Wildcard ()

          | PT.PExpr.Literal (lit) =>
            if (matched_value_type.IsFixed && Typer.LiteralConversionPossible (lit, matched_value_type.FixedValue))
              Pattern.Literal (lit)
            else
            {
              _ = typer.Expect (TypeOfLiteral (Manager, lit), matched_value_type,
                                       "matched value");
              Pattern.Literal (lit)
            }

          | PT.PExpr.Tuple(pats) => TypeTuplePattern (matched_value_type, pats)
          | PT.PExpr.Assign as ex => TypeTuplePattern (matched_value_type, [ex])
          | PT.PExpr.Sequence (pats) =>
            when (messenger.NeedMessage)
              Message.Warning(602, "using ``{ x = foo; y = 42 }'' to match fields is deprecated, please use ``SomeClass where (x = foo, y = 42)'' instead");
            TypeTuplePattern (matched_value_type, pats)

          | PT.PExpr.Ref as r => TypeRef(matched_value_type, r)
          | PT.PExpr.Member => TypeApplication(matched_value_type, pattern, PT.PExpr.Wildcard(pattern.Location), false, true)
          | PT.PExpr.Call (PT.PExpr.Ref(n), _) when ConstantFolder.is_known_operator (n.Id) => 
            def folded = ConstantFolder.FoldConstants (typer, pattern);
            // constant folder will return the same object if it didn't do anything
            if ((folded : object) == pattern)
            {
              ReportError (messenger, "couldn't fold arithmetic expression in pattern to a constant");
              when (messenger.NeedMessage)
                Message.Hint("you can use `| x when x == complex expression =>' to do such things");
                
              Pattern.Error()
            }
            else
              TypePattern (matched_value_type, folded)

          | PT.PExpr.Call(f, [])    => TypeApplication(matched_value_type, f, PT.PExpr.Wildcard())
          | PT.PExpr.Call(f, args)  => TypeApplication(matched_value_type, f, PT.PExpr.Tuple(args))
          | PT.PExpr.Where(e1, e2)  => TypeApplication(matched_value_type, e1, e2, is_where = true)
          | PT.PExpr.TypedPattern (body) => body
          | PT.PExpr.Quoted(parse_element) =>
            // we use Macros functions to translate quoted element
            Manager.Macros_in_pattern = true;
            try
            {
              def lifted = 
                match (parse_element)
                {
                  | PT.SyntaxElement.Expression  (e) => Macros.quoted_expr (e)
                  | PT.SyntaxElement.MatchCase   (e) => Macros.QuotedMatchCase (e)
                  | PT.SyntaxElement.Function    (e) => Macros.quoted_fundecl (e)
                  | PT.SyntaxElement.Parameter   (e) => Macros.quoted_fparam (e)
                  | PT.SyntaxElement.ClassMember (e) => Macros.quoted_member (e)
                  | PT.SyntaxElement.TType => Message.FatalError("matching over typed types not supported")
                  | PT.SyntaxElement.RawToken
                  | PT.SyntaxElement.TypeBuilder
                  | PT.SyntaxElement.MethodBuilder
                  | PT.SyntaxElement.EventBuilder
                  | PT.SyntaxElement.FieldBuilder
                  | PT.SyntaxElement.PropertyBuilder
                  | PT.SyntaxElement.ParameterBuilder => Util.ice("strange syntax element appeared in quotation")
                };

              TypePattern (matched_value_type, Macros.patternize_quotation (lifted))
            }
            finally { Manager.Macros_in_pattern = false; }

          | PT.PExpr.Spliced    => ReportError (messenger, "$ operator may appear only within <[ ... ]> quotation"); Pattern.Error ()
          | PT.PExpr.Ellipsis   => ReportError(messenger, ".. arguments list may appear only within <[ ... ]> quotation"); Pattern.Error()
          | PT.PExpr.ToComplete => Util.ice("The completion tokens allowed only if Manager.IsCompletionInProgress is true.")
          | PT.PExpr.TypeConversion =>
            match (typer.TypeExpr(pattern))
            {
              | TExpr.DebugInfo (TExpr.TypeConversion(TExpr.Literal(Literal.Integer as lit), ty, _, _), _)
              | TExpr.TypeConversion(TExpr.Literal(Literal.Integer as lit), ty, _, _) =>
                def newPattaern = Pattern.Literal(pattern.Location, ty, lit);
                newPattaern

              | _ => ReportError(messenger, "invalid pattern"); Pattern.Error()
            }

          | _ => ReportError(messenger, "invalid pattern");
                 Pattern.Error()
        };

        pat.SetParsedObject(pattern);
        
        pat
      }
    }
  }
}
