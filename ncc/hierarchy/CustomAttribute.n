/*
 * Copyright (c) 2004-2008 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle.Collections;
using Nemerle.Utility;

using System.IO;
using SY = System;

using PT = Nemerle.Compiler.Parsetree;
using SR = System.Reflection;
using SRE = System.Reflection.Emit;
using SRI = System.Runtime.InteropServices;
using SS = System.Security;
using SSP = System.Security.Permissions;
using SCG = System.Collections.Generic;
using Nemerle.Compiler.Typedtree;

namespace Nemerle.Compiler
{
  [ManagerAccess]
  class AttributeCompilerClass
  {
    internal this (man : ManagerClass)
    {
      Manager = man;
    }

    internal CompileAttribute (env : GlobalEnv, ti : TypeBuilder, expr : PT.PExpr)
        : System.AttributeTargets * SR.Emit.CustomAttributeBuilder * bool
    {
      def (tc, parms) = CheckAttribute (env, expr);
      if (is_security_attribute(tc))
        (0 :> System.AttributeTargets, null, true)
      else
      {
        def (attrBuilder, shouldEmit) = do_compile (env, ti, tc, parms);
        (tc.AttributeTargets, attrBuilder, shouldEmit);
      }
    }

    internal ResolveAttribute (env : GlobalEnv, expr : PT.PExpr, expect_exact : TypeInfo = null)
    : option [TypeInfo * list [PT.PExpr]]
    {
      def add_end (l, suff : string)
      {
        match (l) {
          | [x] => [x + suff]
          | x :: xs => x :: add_end (xs, suff)
          | _ => Util.ice ("empty")
        }
      }

      match (expr) {
        | <[ $(_ : name) ]>
        | <[ $_x . $_y ]> =>
            ResolveAttribute (env, <[ $expr () ]>, expect_exact)

        | <[ $name ( .. $parms ) ]> =>
            match (Util.QidOfExpr (name)) {
              | Some ((id, name)) =>
                  def is_attribute (t : TypeInfo) {
                    if (expect_exact != null)
                      t.Equals (expect_exact)
                    else
                      t.IsDerivedFrom(InternalType.Attribute_tc)
                  }

                  def ctx = name.GetEnv (env);
                  def plain = ctx.LookupType (id);
                  def withattr = ctx.LookupType (add_end (id, "Attribute"));

                  match ((plain, withattr)) {
                    | (Some (t), None)
                    | (None, Some (t)) =>
                        if (is_attribute (t))
                          Some ((t, parms))
                        else if (expect_exact == null)
                               Message.FatalError ($"`$(t.FullName)' is not an attribute class");
                             else None ()

                    | (Some (t1), Some (t2)) =>
                        if (is_attribute (t1))
                          if (is_attribute (t2))
                            Message.FatalError ($"ambiguous attribute type name,"
                                                 " it could be `$(t1)' or `$(t2)'");
                          else
                            Some ((t1, parms))
                        else
                          if (is_attribute (t2)) Some ((t2, parms))
                          else if (expect_exact == null)
                                 Message.FatalError ($"neither `$(t1)' nor `$(t2)' is an attribute class");
                               else None ()

                    | _ => None ()
                  }

              | _ => None ()
            }
        | _ => None ()
      }
    }

    internal CheckAttribute (env : GlobalEnv, expr : PT.PExpr) : TypeInfo * list [PT.PExpr]
    {
      Util.locate (expr.Location,
                   match (ResolveAttribute(env, expr))
                   {
                     | Some ((t, parms)) => (t, parms.Map(parm => ConstantFolder.FoldConstants(env, parm)))
                     | None =>
                         Message.FatalError ($"the custom attribute `$(PrettyPrint.SprintExpr(None(), expr))' could not be found or is invalid")
                   })
    }

    internal GetCompiledAssemblyAttributes (attrs : SCG.List [GlobalEnv * PT.PExpr])
    : list [SR.Emit.CustomAttributeBuilder * bool]
    {
      mutable result = [];
      foreach ((env, attr) in attrs) {
        def (tc, parms) = CheckAttribute (env, attr);
        unless (tc.Equals (InternalType.AssemblyVersionAttribute_tc) || is_security_attribute (tc)) {
          result ::= do_compile (env, null, tc, parms);
        }
      }
      result
    }

    /*
      Quote from MSDN:
      At compile time, attributes convert security declarations to a serialized form in metadata.

      Declarative security data in metadata is created from the permission that
      SecurityAttribute::CreatePermission method returns that corresponds to this attribute.

      This means that the compiler must instantiate a security attribute at compile time and
      retrieve a serializable permission object to store somewhere in the metadata.
    */
    internal GetPermissionSets (attrs : SCG.IEnumerable [GlobalEnv * PT.PExpr])
    : list [SSP.SecurityAction * SS.PermissionSet]
    {
      mutable result = [];
      foreach ((env, attr) in attrs) {
        def (tc, parms) = CheckAttribute (env, attr);

        when (is_security_attribute (tc)) {
          match (create_instance (env, tc, parms)) {
            | ps is SSP.PermissionSetAttribute => result ::= (ps.Action, ps.CreatePermissionSet ())
            | sa is SSP.SecurityAttribute =>
                def perm_set = SS.PermissionSet (SSP.PermissionState.None);
                _ = perm_set.AddPermission (sa.CreatePermission ());
                result ::= (sa.Action, perm_set)
            | _ => Message.FatalError (attr.Location, "given attribute must be a System.Security.Permissions.SecurityAttribute")
          }
        }
      }
      result
    }

    internal GetPermissionSets (env : GlobalEnv, attrs : SCG.IEnumerable [PT.PExpr])
    : list [SSP.SecurityAction * SS.PermissionSet]
    {
      GetPermissionSets(attrs.Map(attr => (env, attr)));
    }

    internal MakeEmittedAttribute (attr_type : System.Type, value : string) : SR.Emit.CustomAttributeBuilder
    {
      MakeEmittedAttribute (attr_type, array [SystemTypeCache.String], value);
    }

    internal MakeEmittedAttribute (attr_type : System.Type) : SR.Emit.CustomAttributeBuilder
    {
      _ = this; // shut up!
      def constructor_info = attr_type.GetConstructor (System.Type.EmptyTypes);
      SR.Emit.CustomAttributeBuilder (constructor_info, array [])
    }

    internal MakeEmittedAttribute (attr_type : System.Type, value : int) : SR.Emit.CustomAttributeBuilder
    {
      MakeEmittedAttribute (attr_type, array [SystemTypeCache.Int32], value);
    }

    internal MakeEmittedAttribute (attr_type : System.Type, param_types : array [System.Type], value : object) : SR.Emit.CustomAttributeBuilder
    {
      _ = this; // shut up!
      def constructor_info = attr_type.GetConstructor (param_types);
      assert (constructor_info != null);
      def constructor_params = array [value];
      SR.Emit.CustomAttributeBuilder (constructor_info, constructor_params)
    }

    internal CheckPInvoking (meth : MethodBuilder, tb : SR.Emit.TypeBuilder,
                            attrs : SR.MethodAttributes,
                            parm_types_array : array [SY.Type]) : SR.Emit.MethodBuilder
    {
      def loop (_)
      {
        | expr :: rest =>
            def env = meth.DeclaringType.GlobalEnv;
            match (ResolveAttribute (env, expr))
            {
              | Some ((tc, dllName :: parms)) when tc.Equals (InternalType.DllImport_tc) =>

                  when (meth.Attributes & NemerleModifiers.Extern == 0)
                    Message.Error (expr.Location, "only methods marked with `extern' modifier can have "
                                                  "`System.Runtime.InteropServices.DllImport' attribute");

                  def dllName = match(ConstantFolder.FoldConstants(env, dllName, meth.DeclaringType))
                                 {
                                   | <[ $(dllName : string) ]> => dllName
                                   | _ =>
                  // emulate call typing
                                       Message.Error (dllName.Location, $"in argument #1 (dllName), constant expression of type `$(InternalType.String_tc)' required");
                                       "error" // makes SRE happy
                                 }

                  mutable callingconv = SRI.CallingConvention.Winapi;
                  mutable charset = SRI.CharSet.Ansi;
                  mutable preserve_sig = true;
                  mutable entry_point = meth.Name;
                  mutable best_fit_mapping = false;
                  mutable throw_on_unmappable = false;
                  mutable exact_spelling = false;
                  mutable set_last_error = false;

                  mutable best_fit_mapping_set = false;
                  mutable throw_on_unmappable_set = false;
                  mutable exact_spelling_set = false;
                  mutable set_last_error_set = false;

                  mutable set_best_fit = null;
                  mutable set_throw_on = null;
                  mutable set_exact_spelling = null;
                  mutable set_set_last_error = null;

                  foreach (p in parms)
                    match (p)
                    {
                      | <[ $(target : dyn) = $val ]> =>
                          match ((target, ConstantFolder.FoldConstants (env, val)))
                          {
                            | ("BestFitMapping", <[ $(val : bool) ]>) =>
                                best_fit_mapping = val;
                                best_fit_mapping_set = true;

                            | ("CallingConvention", PT.PExpr.Literal (Literal.Enum (l, _, _))) =>
                                callingconv = l.AsObject (InternalType) :> SRI.CallingConvention;

                            | ("CharSet", PT.PExpr.Literal (Literal.Enum (l, _, _))) =>
                                charset = l.AsObject (InternalType) :> SRI.CharSet;

                            | ("EntryPoint", <[ $(val : string) ]>) =>
                                entry_point = val;

                            | ("ExactSpelling", <[ $(val : bool) ]>) =>
                                exact_spelling = val;
                                exact_spelling_set = true;

                            | ("PreserveSig", <[ $(val : bool) ]>) =>
                                preserve_sig = val;

                            | ("SetLastError", <[ $(val : bool) ]>) =>
                                set_last_error = val;
                                set_last_error_set = true;

                            | ("ThrowOnUnmappableChar", <[ $(val : bool) ]>) =>
                                throw_on_unmappable = val;
                                throw_on_unmappable_set = true;

                            | (name, val) => Message.Error (val.Location,
                                                            $"value is not valid for parameter $name")
                          }
                      | _ => Message.Error (p.Location, "unnamed DllImport parameter")
                    }

                  when (throw_on_unmappable_set || best_fit_mapping_set || exact_spelling_set || set_last_error_set)
                  {
                    set_best_fit = typeof (SR.Emit.MethodBuilder).GetMethod ("set_BestFitMapping",
                                                                             BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
                    set_throw_on = typeof (SR.Emit.MethodBuilder).GetMethod ("set_ThrowOnUnmappableChar",
                                                                             BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
                    set_exact_spelling = typeof (SR.Emit.MethodBuilder).GetMethod ("set_ExactSpelling",
                                                                                   BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
                    set_set_last_error = typeof (SR.Emit.MethodBuilder).GetMethod ("set_SetLastError",
                                                                                   BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
                  }

                  when (throw_on_unmappable_set || best_fit_mapping_set)
                  {
                    when ((set_best_fit == null) || (set_throw_on == null))
                    {
                      Message.Error ("The ThrowOnUnmappableChar and BestFitMapping"
                                     " attributes can only be emitted when running on the mono runtime.");
                    }
                  }

                  when (exact_spelling && set_exact_spelling == null)
                    charset |= (0x01 :> SRI.CharSet);

                  when (set_last_error && set_set_last_error == null)
                    charset |= (0x40 :> SRI.CharSet);

                  def mb = tb.DefinePInvokeMethod (meth.Name, dllName, entry_point,
                                                   attrs | SR.MethodAttributes.HideBySig | SR.MethodAttributes.PinvokeImpl,
                                                   SR.CallingConventions.Standard,
                                                   meth.ReturnType.GetSystemType (),
                                                   parm_types_array, callingconv, charset);

                  when (preserve_sig)
                    mb.SetImplementationFlags (SR.MethodImplAttributes.PreserveSig);

                  when (throw_on_unmappable_set)
                    _ = set_throw_on.Invoke (mb, SR.BindingFlags.Default, null,
                                             array [ throw_on_unmappable : object], null);

                  when (best_fit_mapping_set)
                    _ = set_best_fit.Invoke (mb, SR.BindingFlags.Default, null,
                                             array [ best_fit_mapping : object], null);

                  when (exact_spelling_set && set_exact_spelling != null)
                    _ = set_exact_spelling.Invoke (mb, SR.BindingFlags.Default, null,
                                                   array [ exact_spelling : object], null);

                  when (set_last_error_set && set_set_last_error != null)
                    _ = set_set_last_error.Invoke (mb, SR.BindingFlags.Default, null,
                                                   array [ set_last_error : object], null);

                  meth.GetModifiers().custom_attrs =
                                                      meth.GetModifiers().custom_attrs.Filter(x => x : object != expr);
                  mb

              | _ => loop (rest)
            }
        | [] => null
      }
      loop (meth.GetModifiers ().GetCustomAttributes ())
    }

    internal CheckConditional(mb : MethodBuilder) : void
    {
      def getErrorLocation()
      {
        match(mb.GetModifiers().FindAttribute(InternalType.Conditional_tc, mb.GlobalEnv))
        {
          | Some(expr) => expr.Location
          | _ => Util.ice($"Conditional attribute not found in `$mb'")
        }
      }

      when(mb.DeclaringType.IsInterface)
      {
        Message.Error(getErrorLocation(),
                      "Conditional attribute is not valid on interface members");
        Nemerle.Imperative.Return();
      }

      when(mb.IsConstructor
        || (mb.GetModifiers().mods %&& NemerleModifiers.SpecialName
           && mb.Header.Name.StartsWith("op_")))
      {
        Message.Error(getErrorLocation(),
                      "Conditional attribute is not valid on constructor, operator, or explicit interface implementation");
        Nemerle.Imperative.Return();
      }

      when(mb.ImplementedMethods is (_, ifaceMember) :: _)
      {
        Message.Error(getErrorLocation(),
                      $"Conditional member `$mb' cannot implement interface member `$ifaceMember'");
        Nemerle.Imperative.Return();
      }

      when(mb.GetModifiers().mods %&& NemerleModifiers.Override)
      {
        Message.Error(getErrorLocation(),
                      $"Conditional attribute is not valid on `$mb' because it is an override method");
        Nemerle.Imperative.Return();
      }

      unless(mb.ReturnType.Equals(FixedType.Void()))
      {
        Message.Error(getErrorLocation(),
                      $"Conditional attribute is not valid on `$mb' because its return type is not void");
        Nemerle.Imperative.Return();
      }

      foreach(parm when parm.kind == ParmKind.Out in mb.GetParameters())
      {
        Message.Error(getErrorLocation(),
                      $"conditional member `$mb' cannot have an out parameter");
        Nemerle.Imperative.Break();
      }
    }

    private static is_security_attribute(ti : TypeInfo) : bool
    {
      // A security attribute must be imported from an external assembly,
      // so using LibraryReference.ExternalTypeInfo is good enought here.
      //
      ti is LibraryReference.ExternalTypeInfo
      && typeof(SSP.SecurityAttribute).IsAssignableFrom ((ti :> LibraryReference.ExternalTypeInfo).SystemType)
    }

    private compile_expr(env : GlobalEnv, expr : PT.PExpr, typer : Typer, mutable expected : TypeVar = null) : object * FixedType
    {
      def compile_type(loc, fixedType)
      {
        match (fixedType)
        {
          | FixedType.Class (tc, args) =>
              def is_free (a) { !(a is FixedType) }
              if (args.Exists (is_free))
              {
                when (!args.ForAll (is_free))
                  Message.Error(loc, "to create open generic type all arguments must be open `_'");

                (tc.SystemType, InternalType.Type)
              }
              else
                (fixedType.GetSystemType(), InternalType.Type)

          | _ => Message.FatalError(loc, "invalid type in attribute parameter")
        }
      }

      def expr2 = ConstantFolder.FoldConstants(env, expr);
      when (expr2 == null)
        throw Recovery();
      when (expected == null)
        expected = typer.FreshTypeVar();
      def tExpr = typer.TypeExpr(expr2, expected);
      def convert(tExpr : TExpr) : object * FixedType
      {
        | TExpr.Error => throw Recovery() // the typer already report error
        | TExpr.DebugInfo(subExpr, _) => convert(subExpr)
        | TExpr.Literal(Literal.Decimal) => Message.FatalError(tExpr.Location, "An attribute argument cannot be number of type decimal");
        | TExpr.Literal(lit) => (lit.AsObject(InternalType), lit.GetInternalType(InternalType))
        | TExpr.TypeConversion(subExpr, t, ConversionKind.UpCast, _) when subExpr.Type.TryRequire(t) => convert(subExpr)
        | TExpr.TypeConversion(TExpr.Literal(lit) as e, t, ConversionKind.UpCast, _) => 
            match (ConstantFolder.ConvertLiteral(lit, t.Fix()))
            {
              | Some(convertedLit) => convert(TExpr.Literal(e.Location, t, convertedLit))
              | _ => Message.FatalError(tExpr.Location, $"Type conversion from $(e.Type) to $t in attribute a argument is unsupported.");
            }

        | TExpr.TypeOf(type) => compile_type(tExpr.Location, type.Fix())
        | TExpr.Array(elems, [_]) => 
            def objects      = elems.MapToArray(e => convert(e)[0]);
            def elemType     = tExpr.Type.Fix();
            (objects : object, elemType)

        | TExpr.Array => Message.FatalError(tExpr.Location, "only single-dimensional arrays allowed in attributes")
        | _ => Message.FatalError(tExpr.Location, $"only constant expressions allowed in attributes: $expr ($(tExpr.Type))")
      }

      convert(tExpr)
    }

    private pre_compile(env : GlobalEnv, ti : TypeBuilder, attr : TypeInfo, parms : list [PT.PExpr])
        : SR.ConstructorInfo * list[object] *
          list[SR.PropertyInfo] * list[object] *
          list[SR.FieldInfo] * list[object]
    {
      def typer = Typer(env, ti);
      mutable ctor_parm_types = [];
      mutable ctor_parms = [];
      mutable field_infos = [];
      mutable fields = [];
      mutable property_infos = [];
      mutable properties = [];

      foreach (parm in parms)
        {
          | <[ $(n : name) = $expr ]> =>
              def name = n.Id;
              def expr = ConstantFolder.FoldConstants(env, expr);
              def (obj, ty) = compile_expr(env, expr, typer);
              def problem() { Message.FatalError($"the type $(attr.FullName) has no field nor property named `$name'") };
              def (is_prop, mem) =
                                    match (attr.LookupMember(name))
                                    {
                                      | [mem] =>
                                          match (mem.MemberKind)
                                          {
                                            | MemberKinds.Field    => (false, mem)
                                            | MemberKinds.Property => (true, mem)
                                            | _ => problem()
                                          }
                                      | _ => problem()
                                    };
              def handle = mem.GetHandle();
              assert(handle != null);
              def memberType = mem.GetMemType();

              if (memberType.Unify(ty))
                if (is_prop)
                {
                  property_infos ::= handle :> SR.PropertyInfo;
                  properties ::= obj;
                }
                else
                {
                  field_infos ::= handle :> SR.FieldInfo;
                  fields ::= obj;
                }
              else
                Message.FatalError ($"the member `$name' has type $(mem.GetMemType()) while the value assigned has type $ty")

          | _ =>
              def (obj, ty) = compile_expr(env, parm, typer);
              ctor_parm_types ::= ty;
              ctor_parms ::= obj;
        }

      def proper_ctor = 
      {
                         mutable overloads = [];

                         foreach (meth is IMethod when meth.IsConstructor && !meth.IsPrivate in attr.LookupMember(".ctor"))
                         {
                           def ty   = meth.GetMemType();
                           def from = attr.GetMemType();

                           overloads ::= OverloadPossibility(typer, ty, null, from, meth);

                           when (meth.IsVarArgs)
                           {
                             def op = OverloadPossibility (typer, ty, null, from, meth);
                             op.VarArgs = true;
                             overloads ::= op;
                           }
                         }

                         def parms = ctor_parm_types.RevMap(ty => Parm(TExpr.DefaultValue(ty)));

                         match(typer.ResolveOverload(overloads, parms, Manager.InternalType.Void, false, LocationStack.Top()))
                         {
                           | [] => Message.FatalError($"none of the constructors of `$(attr.FullName)'matches positional argument types $(ctor_parm_types.Rev())");
                           | [one] => one.Member :> IMethod
                           | lst =>
                               Message.Error( $"ambiguity between custom attribute constructors $lst");
                               lst.Head.Member :> IMethod
                         }
      };

      when(proper_ctor.IsVarArgs)
      {
        def (var_parms, normal_parms) = NList.Partition(ctor_parms,
          {
                                                        def required_parms_count = proper_ctor.GetParameters().Length;
                                                        def actual_parms_count = ctor_parms.Length;
                                                        mutable count = actual_parms_count - required_parms_count;
            fun(_)
            {
              def is_var_parm = count >= 0;
              count--;
              is_var_parm
            }
          });

        ctor_parms = var_parms.Rev().ToArray() :: normal_parms;
      }

      match(proper_ctor)
      {
        | mb is MethodBuilder => mb.HasBeenUsed = true;
        | _ => ();
      }

      (proper_ctor.GetConstructorInfo(), ctor_parms, property_infos, properties, field_infos, fields)
    }

    private do_compile(env : GlobalEnv, ti : TypeBuilder, attr : TypeInfo, parms : list [PT.PExpr]) : SR.Emit.CustomAttributeBuilder * bool
    {
      def (ctor_info, ctor_params, prop_infos, prop_values, field_infos, field_values) = pre_compile (env, ti, attr, parms);

      def attrBuilder = SR.Emit.CustomAttributeBuilder(
        ctor_info,
        ctor_params.Reverse().ToArray(),
        prop_infos.Reverse().ToArray(),
        prop_values.Reverse().ToArray(),
        field_infos.Reverse().ToArray(),
        field_values.Reverse().ToArray());
      def shouldEmit = if(attr.IsConditional) attr.EvalConditions(env) else true;
      (attrBuilder, shouldEmit)
    }

    private create_instance (env : GlobalEnv, ti : TypeInfo, parms : list [PT.PExpr]) : object
    {
      def (ctor_info, ctor_params, prop_infos, prop_values, field_infos, field_values) = pre_compile (env, null, ti, parms);
      def obj = ctor_info.Invoke(ctor_params.Reverse ().ToArray ());

      NList.Iter2 (prop_infos,  prop_values,  (prop,  val) => prop.SetValue  (obj, val, null));
      NList.Iter2 (field_infos, field_values, (field, val) => field.SetValue (obj, val));

      obj
    }
  }

  public partial class TypesManager
  {
    static read_keypair (loc : Location, name : string) : SR.StrongNameKeyPair
    {
      try {
        SR.StrongNameKeyPair(File.Open(name, FileMode.Open, FileAccess.Read))
      }
      catch {
        | _ is DirectoryNotFoundException =>
          Message.FatalError (loc, "could not find directory of `" + name + "' with key pair for assembly")
        | _ is FileNotFoundException =>
          Message.FatalError (loc, "could not find file `" + name + "' with key pair for assembly")
      }
    }

    public AddAssemblyAttribute (env : GlobalEnv, attr : Parsetree.PExpr) : void {
      def add (phase) {
        def suff = AttributeMacroExpansion.Suffix (MacroTargets.Assembly, phase);
        match (MacroRegistry.lookup_macro (env, attr, suff)) {
          | None => false
          | Some =>
              def expansion = AssemblyAttributeMacroExpansion (MacroTargets.Assembly, phase,
                                                               attr, [], null, null, env);
              AddMacroExpansion (expansion);
              true
        }
      }
      def b1 = add (MacroPhase.BeforeInheritance);
      def b2 = add (MacroPhase.BeforeTypedMembers);
      def b3 = add (MacroPhase.WithTypedMembers);
      if (b1 || b2 || b3)
        ()
      else
        assembly_attributes.Add (env, attr);
    }

    internal GetInformationalAssemblyAttributes() : list[SRE.CustomAttributeBuilder]
    {
      def attributeList = SCG.List.[SRE.CustomAttributeBuilder]();
      def typeList = SCG.List.[System.Type]();
      def ctorParameters = array[typeof(string)];

      mutable hitFileVersion = false;
      mutable hitAssemblyVersion = false;
      mutable assemblyVersionString;
      mutable location;
      foreach ((env, attr) in assembly_attributes)
      {
        /* store resolved attribute */
        def (tc, parms) = Manager.AttributeCompiler.CheckAttribute (env, attr);

        def take_string (pars) {
          | [ <[ $(x : string) ]> ] => x
          | _ =>
              Message.FatalError (attr.Location, "given attribute must have single string as parameter")
        }

        def addAttributeForType(type)
        {
          def valueString = take_string(parms);
          def ctor = type.GetConstructor(ctorParameters);
          def ctorArgs = array[valueString];
          if(typeList.Contains(type))
          {
            Message.Warning (attr.Location, "given attribute is occurred more than once")
          }
          else
          {		 
            SRE.CustomAttributeBuilder(ctor, ctorArgs) |> attributeList.Add;
            typeList.Add(type);
          }

        }
     
        
        if (tc.Equals (InternalType.AssemblyCompanyAttribute_tc))
        {
          addAttributeForType(typeof(SR.AssemblyCompanyAttribute))
        }
        else if (tc.Equals (InternalType.AssemblyCopyrightAttribute_tc))
        {
           addAttributeForType(typeof(SR.AssemblyCopyrightAttribute)) 
        }
        else if (tc.Equals (InternalType.AssemblyDescriptionAttribute_tc))
        {
          addAttributeForType(typeof(SR.AssemblyDescriptionAttribute)) 
        }
        else if (tc.Equals (InternalType.AssemblyFileVersionAttribute_tc))
        {
           hitFileVersion = true;
           addAttributeForType(typeof(SR.AssemblyFileVersionAttribute))
        }
        else if (tc.Equals (InternalType.AssemblyProductAttribute_tc))
        {
           addAttributeForType(typeof(SR.AssemblyProductAttribute))
        }
        else if (tc.Equals (InternalType.AssemblyTitleAttribute_tc))
        {
          addAttributeForType(typeof(SR.AssemblyTitleAttribute))
        }
        else if (tc.Equals (InternalType.AssemblyVersionAttribute_tc))
        {         
          hitAssemblyVersion = true;
          assemblyVersionString = take_string(parms);  
          location = attr.Location;
          //an.Version = ParseVersion(take_string(parms), attr.Location);
        }
        else
        {

        }

      }
      when(!hitFileVersion && hitAssemblyVersion)
      {
        def type =  typeof(SR.AssemblyFileVersionAttribute);
        def ctor = type.GetConstructor(ctorParameters);
        def version = ParseVersion(assemblyVersionString, location).ToString();
        def ctorArgs = array[version];
        SRE.CustomAttributeBuilder(ctor, ctorArgs) |> attributeList.Add;
        
      }
      attributeList.NToList();

    }

    ParseVersion  (versionString : string, location : Location) : SY.Version
    {
      _ = this;
        // spec for parsing version is quite interesting
          // http://msdn.microsoft.com/library/en-us/cpref/html/frlrfsystemreflectionassemblyversionattributeclassctortopic.asp
      def ver = NString.Split (versionString, array ['.']);

      mutable version_object = null;
      try
      {
        def verint = ver.Map(x => if (x == "*") -1 else (SY.UInt16.Parse(x) :> int));

        version_object =
                          match (verint) {
                            | [x1] => SY.Version (x1.ToString ())
                            | [x1, x2] => SY.Version (x1, x2)
                            | [x1, x2, -1] =>
                                def spanBuild = SY.DateTime.Now.Subtract (SY.DateTime (2000, 1, 1));
                                def spanRevision = SY.DateTime.Now.Subtract (SY.DateTime.Today);
                                SY.Version (x1, x2, spanBuild.Days, (spanRevision.Ticks / 20000000) :> int)
                            | [x1, x2, x3] => SY.Version (x1, x2, x3)
                            | [x1, x2, x3, -1] =>
                                def spanRevision = SY.DateTime.Now.Subtract (SY.DateTime.Today);
                                SY.Version (x1, x2, x3, (spanRevision.Ticks / 20000000) :> int)
                            | [x1, x2, x3, x4] => SY.Version (x1, x2, x3, x4)
                            | _ =>
                                Message.Error (location, "invalid format of version attribute");
                                SY.Version ();
                          }
      }
      catch {
        | _ is SY.OverflowException =>
          Message.Error (location, "wrong format of version attribute");
          version_object = SY.Version ();
      }
      version_object;
    }
    internal CreateAssemblyName () : SR.AssemblyName
    {
      /* create an assembly name and set its properties according to defined
         global assembly attributes */
      def an = SR.AssemblyName ();
      an.CodeBase = string.Concat("file:///", Directory.GetCurrentDirectory());

      when (Manager.Options.StrongAssemblyKeyName != null) {
        an.KeyPair = read_keypair (Location.Default, Manager.Options.StrongAssemblyKeyName);
      }

      foreach ((env, attr) in assembly_attributes)
      {
        /* store resolved attribute */
        def (tc, parms) = Manager.AttributeCompiler.CheckAttribute (env, attr);

        def take_string (pars) {
          | [ <[ $(x : string) ]> ] => x
          | _ =>
              Message.FatalError (attr.Location, "given attribute must have single string as parameter")
        }
        if (tc.Equals (InternalType.AssemblyVersionAttribute_tc))
        {         
          an.Version = ParseVersion(take_string(parms), attr.Location);
        }
        else if (tc.Equals (InternalType.AssemblyKeyFileAttribute_tc))
             {
               def key = take_string (parms);
               if (an.KeyPair != null)
                 Message.Warning (attr.Location, "AssemblyKeyFile attribute will be ignored, as key file was already specified")
               else
                 when (key != "") an.KeyPair = read_keypair (attr.Location, key);
             }
             else when (tc.Equals (InternalType.AssemblyCultureAttribute_tc))
                    an.CultureInfo = SY.Globalization.CultureInfo (take_string (parms));
      }
      an
    }
  }

  public partial class AttributesAndModifiers : Located
  {
    public IsCustomAttributeDefined(attributeFullName : string, env : GlobalEnv) : bool
    {
      FindAttribute(env.Manager.LookupTypeInfo(attributeFullName), env).IsSome
    }

    /// Finds first attribute of specified type
    public FindAttribute (lookingFor : TypeInfo, env : GlobalEnv) : option [PT.PExpr]
    {
      def compiler = env.Manager.AttributeCompiler;
      foreach(expr in custom_attrs)
        when(compiler.ResolveAttribute(env, expr, lookingFor) is Some(_))
          Nemerle.Imperative.Return(Some(expr));
      None()
    }

    /// Finds attribute of specified type
    public FindAttributeWithArgs(lookingFor : TypeInfo, env : GlobalEnv) : option[PT.PExpr * list [PT.PExpr]]
    {
      def compiler = env.Manager.AttributeCompiler;
      foreach(expr in custom_attrs)
        when(compiler.ResolveAttribute(env, expr, lookingFor) is Some((_, args)))
          Nemerle.Imperative.Return(Some(expr, args));
      None()
    }

    /// Finds all attributes of specified type
    public FindAttributesWithArgs(lookingFor : TypeInfo, env : GlobalEnv) : list[PT.PExpr * list [PT.PExpr]]
    {
      def compiler = env.Manager.AttributeCompiler;
      mutable result = [];
      foreach(expr in custom_attrs)
        when(compiler.ResolveAttribute(env, expr, lookingFor) is Some((_, args)))
          result ::= (expr, args);
      result
    }

    public AttributeTypes(env : GlobalEnv) : list[TypeInfo]
    {
      def compiler = env.Manager.AttributeCompiler;
      mutable result = [];
      foreach(expr in custom_attrs)
        when(compiler.ResolveAttribute(env, expr) is Some((ti, _)))
          result ::= ti;
      result
    }

    internal SaveCustomAttributes (ti : TypeBuilder, adder : SY.AttributeTargets * SR.Emit.CustomAttributeBuilder * bool -> string) : void
    {
      foreach (expr in custom_attrs)
      {
        try {
          def error = adder (ti.Manager.AttributeCompiler.CompileAttribute (ti.GlobalEnv, ti, expr));
          when (error != null)
            Message.Error (expr.Location, $"custom attribute $expr is not valid on " + error);
        } catch {
          | _ is Recovery => ()
        }
      }

      foreach ((suff, expr) in macro_attrs)
      {
        try {
          def (m, parms) =
                            match (MacroRegistry.lookup_macro (ti.GlobalEnv, expr, suff))
                            {
                              | Some ((_, m, parms)) => (m, parms)
                              | _ => Util.ice ("macro is not a macro?" +
                                               PrettyPrint.SprintExpr (None (), expr))
                            };

          // check if macro needs to be saved in metadata
          // it should be done only if it will be inherited in some derived class
          def inherited = m.IsInherited && !ti.IsSealed;

          when (inherited) {
            def concatenated = parms.ToString ("@");
  //          def _x = ti.env.GetMacroContext ();
            def name = m.GetNamespace () + "." + m.GetName ();
            def serialized = <[
              Nemerle.Internal.MacroAttribute ($(name : string),
            //                                   $(ti.env.GetMacroContext () : int),
                                              0,
                                              $(concatenated : string))
            ]>;
            def error = adder (ti.Manager.AttributeCompiler.CompileAttribute (ti.GlobalEnv, ti, serialized));
            when (error != null)
              Message.Error ($"macro attribute $name is not valid on " + error);
          }
        } catch { | _ is Recovery => () }
      }
    }
  }
}


