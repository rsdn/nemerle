/*
 * Copyright (c) 2003-2008 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle.Compiler;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Surround;
using Nemerle.Utility;
using SCG = System.Collections.Generic;

namespace Nemerle.Compiler
{
  class PreParserException : System.Exception
  {
    [Accessor]
    public mutable _location : Location;

    public this (location : Location, msg : string) {
      base (msg);
      _location = location;
    }
  }
  
  enum TokenLocation
  {
    | BracesGroup
    | RoundGroup
    | SquareGroup
    | QuoteGroup
    | TopLevel
  }

  /** Transforms stream of tokens from given LexerBase to token tree
      with matched brackets.
   */
  public class PreParser
  {
    protected lexer : LexerBase;
    private mutable current_token : Token = null;
    private mutable last_token : Token = null;
    protected mutable token_buffer : Stack [Token] = Stack(5);
    private mutable last_declaration_token : Token = null;
    mutable Env : GlobalEnv;

    mutable finished : bool = false;

    /** Parent stream is the stack of processed token nodes,
        which are already assigned to be in currently build sequence.
        For example:
          a; b; c (); d e _we_are_here_
        'a, b, c()', are alredy known to be in parent sequence,
        while 'd e' are in current temporary sequence, which might
        get added to parent_stream if separator (e.g. ';') occurs
     */
    protected parent_stream : SCG.List [Token] = SCG.List (100);

    /** Currently builded stream of token nodes is an array of
        loose tokens, which have occured after last separator.
        It will probably form LooseGroup as an element of parent
        sequence or all elements will constitue parent
     */
    protected current_stream : SCG.List [Token] = SCG.List (50);

    [Nemerle.Utility.Accessor (flags = WantSetter | Internal)]
    protected mutable doc_comments : Map [Location, string];

    public this (lex : LexerBase) {
      this (lex, lex.Manager.CoreEnv);
    }

    public this (lex : LexerBase, env : GlobalEnv) {
      Env = env;
      lex.Keywords = Env.Keywords;
      lexer = lex;
    }

    protected reset_comment (tok : Token) : void {
      when (doc_comments != null) doc_comments = doc_comments.Replace (tok.Location, "");
    }
    
    protected reset_comment (loc : Location) : void {
      when (doc_comments != null) doc_comments = doc_comments.Replace (loc, "");
    }

    /** Fetch next token (from one token buffer or lexer if it's empty) */
    protected virtual get_token() : Token
    {            
      if (!token_buffer.IsEmpty)
      {
        def result = pop_next();
        last_token = current_token;
        current_token = result;
        result
      }
      else
      {
        try
        {
          last_token = current_token;
          def current_token = lexer.GetToken();          
          match (current_token)
          {
            | QuotedIdentifier (x) as q => Token.Identifier (q.Location, x)
            | t => t
          }
        }
        catch
        {
          | _ is System.Text.DecoderFallbackException =>
            Message.FatalError (lexer.Location, $"detected unsupported encoding of national characters in file `$(lexer.Location.File)', "
              "source files should be in UTF8 (or UTF16/32 when BOM is given) encoding");
          | e is LexerBase.Error =>
            Message.Error (lexer.Location, e.Message + " " + e.StackTrace);
            get_token ()
        }
      }
    }

    /** Store token in our token buffer */
    protected push_back(tok : Token) : void
    {
        token_buffer.Push(tok);
    }

    protected peek_token() : Token
    {
      def temp = last_token;
      def tok = get_token();
      last_token = temp;
      push_back(tok);
      tok
    }
    
    protected pop_next() : Token
    {
        token_buffer.Pop();
    }
    
    /** links Tokens from specified subarray to form a list and return its head */
    static make_list (tokens : SCG.List [Token], start : int) : Token
    {
      for (mutable i = tokens.Count - 2; i >= start; --i)
        tokens [i].Next = tokens [i + 1];
      tokens [start]
    }

    /** returns a combined location of the subarray inside a token list */
    static list_location ( tokens : SCG.List [Token], start : int) : Location
    {
      assert(tokens.Count > 0);
      assert(start < tokens.Count);
      tokens [start].Location + tokens [tokens.Count - 1].Location
    }

    public static Dump (tok : Token, ident : string) : string
    {
      def (open, close, sepstr, elements) =
        match (tok) {
          | Token.RoundGroup => ("(", ")", ", ", tok)
          | Token.BracesGroup => ("{\n" + ident, "}", ";\n" + ident, tok)
          | Token.SquareGroup => ("[", "]", ", ", tok)
          | Token.QuoteGroup  => ("<[\n", "]>", "; ", tok)
          | Token.LooseGroup  => ("", "", " ", tok)

          | _ => ("", tok.ToString (false), "", null)
        }

      $"$open..$(elements; sepstr)$close"
    }
        
    /** Closes both currently created LooseGroup and parent group.
        Returns list of tokens composing parent group */
    finish_parent (parent_begin : int, current_begin : int) : Token {
      finish_current (current_begin);
      def parent_group =
        if (parent_begin == parent_stream.Count)
          null // case of `(` `)`
        else
          make_list (parent_stream, parent_begin);
      parent_stream.RemoveRange (parent_begin, parent_stream.Count - parent_begin);
      parent_group
    }

    /** Closes currently created LooseGroup and adds it at the end of the
        parent group. After that we are ready to make another LooseGroup.

        It is called mainly when separator token occurs.
     */
    finish_current (current_begin : int, separator_token : Token = null) : void
    {
      if (current_begin == current_stream.Count)
        when (separator_token != null && !(separator_token is Token.Semicolon))
        {
          def loose = Token.LooseGroup (separator_token.Location, separator_token);
          parent_stream.Add (loose);
        }
      else
      {
        def loose_group = make_list (current_stream, current_begin);
        def location    = if (separator_token != null)
                            loose_group.Location + separator_token.Location.FromStart();
                          else
                            list_location (current_stream, current_begin);
        def loose       = Token.LooseGroup(location, loose_group, separator_token);

        parent_stream.Add (loose);
        current_stream.RemoveRange (current_begin, current_stream.Count - current_begin);
      }
    }            
	
    /** Eats the next character if it is a newline character */
    eat_newlines () : void
    {
        when (peek_token() is Token.NewLine)
        {
          _ = get_token();
          eat_newlines ();
        }
    }
        
    /** Handle standard situations when new bracket group is beginning
        or there is erronous situation. Any non bracket token is
        appended to current LooseGroup.

        Throws PreParserException when there is unmatched end bracket.
     */
    handle_default_token (current_begin : int, tok : Token, tok_loc : TokenLocation, braces_cut_current = true) : void
    {
      match (tok)
      {
        | Token.BeginBrace(generated) as openBrace =>
          eat_newlines();
          def brace_group = parse_brace_group(tok.Location, openBrace, true, generated);
          // Message.Debug($"Writing: $(get_token_type(brace_group))");
          current_stream.Add(brace_group);

          when (braces_cut_current) {
            def next_token = peek_token();
            if (next_token is Token.Semicolon)
            {              
              finish_current(current_begin, get_token());
              eat_newlines();
            }
            else
              finish_current(current_begin);            
          }
        | Token.BeginRound as openBrace =>
          eat_newlines();
          def round_group = parse_round_group(tok.Location, openBrace);
          // Message.Debug($"Writing: $(get_token_type(round_group))");
          current_stream.Add(round_group);

        | Token.BeginSquare as openBrace =>
          eat_newlines();
          def square_group = parse_square_group(tok.Location, openBrace);
          // Message.Debug($"Writing: $(get_token_type(square_group))");
          current_stream.Add(square_group);

        | Token.BeginQuote as openBrace =>
          eat_newlines();
          def quote_group = parse_quote_group(tok.Location, openBrace);
          // Message.Debug($"Writing: $(get_token_type(quote_group))");
          current_stream.Add(quote_group);

        | Token.EndRound | Token.EndSquare | Token.EndQuote | Token.EndBrace =>
          eat_newlines();
          push_back (tok);
          throw PreParserException (tok.Location, $"unexpected closing bracket `$(tok)'");

        | Token.EndOfFile =>
          throw PreParserException (tok.Location, "unexpected end of file");

        | Token.Comment (comment) when doc_comments != null =>
          doc_comments = doc_comments.Replace (tok.Location, comment);
          
        | Token.NewLine =>
          when (tok_loc != TokenLocation.TopLevel)
          {
            // If the last token was an operator, continue
            when (!(last_token is Token.Operator)) {
              eat_newlines();
              def next_token = peek_token();
              // Next token isn't an operator either
              when (!(next_token is Token.Operator)) {
                Message.Debug($"Writing $(tok) in $(tok.Location) after $(last_token)."); 
                current_stream.Add (tok);
              }
            }            
          }
          
        | Token.Comment => ()
        | _ => 
          // Message.Debug($"Writing: $(get_token_type(tok))"); 
          current_stream.Add (tok);
      }
      
    }
    
    parse_brace_group (loc : Location, openBrace : Token.BeginBrace, expect_endbrace : bool, generated : bool) : Token.BracesGroup
    {
      def parent_begin = parent_stream.Count;
      def current_begin = current_stream.Count;

      reset_comment (loc);
            
      def loop ()
      {
        def tok = get_token ();
        unless(ReferenceEquals(Env.Defines, lexer.Defines))
          Env = Env.SetDefines(lexer.Defines);
        match (tok)
        {          
          // finish entire brace group
          | Token.EndBrace as closeBrace =>
            reset_comment(tok);            
            def brace_group = finish_parent(parent_begin, current_begin);
            eat_newlines();
            Token.BracesGroup(loc + tok.Location, brace_group, openBrace, closeBrace, generated);

          // finish current loose group
          | Token.Semicolon =>
            eat_newlines();
            reset_comment(tok);
            finish_current(current_begin, tok);
            loop()

          | Token.NewLine =>
            if (!(last_token is Token.NewLine))
              loop();
            else {
              _ = handle_default_token (current_begin, tok, TokenLocation.BracesGroup); 
              loop ()
            }
              
          | Token.EndOfFile when !expect_endbrace =>
            def brace_group = finish_parent (parent_begin, current_begin);
            finished = true;
            Token.BracesGroup (loc + tok.Location, brace_group, openBrace, null, generated);            
            
          | _ => handle_default_token (current_begin, tok, TokenLocation.BracesGroup); loop ()
        }
      }
      try { loop () }
      catch { e is PreParserException =>
        Message.Error (loc, "when parsing this `{' brace group");
        Message.Error (e.Location, e.Message);
        def group = finish_parent (parent_begin, current_begin);
        Token.BracesGroup (shift_end(loc + e.Location), group, openBrace, null, generated);
      }
    }

    parse_round_group(loc : Location, openBrace : Token.BeginRound) : Token.RoundGroup
    {
      def parent_begin = parent_stream.Count;
      def current_begin = current_stream.Count;     
      
      def loop () {
        def tok = get_token ();
        match (tok) {
          // finish entire round group
          | Token.EndRound as closeBrace =>
            def round_group = finish_parent (parent_begin, current_begin);
            eat_newlines();
            Token.RoundGroup (loc + tok.Location, round_group, openBrace, closeBrace);

          // finish current loose group
          | Token.Comma =>
            finish_current (current_begin, tok);
            eat_newlines();
            loop ()

          | _ => handle_default_token (current_begin, tok, TokenLocation.RoundGroup, false); loop ()
        }
      }
      try { loop () }
      catch
      { e is PreParserException =>
        def Manager = lexer.Manager; // need for surroundwith (related_messages)
        surroundwith (related_messages)
        {
          Message.Error (loc, "unclosed bracket");
          Message.Hint (e.Location, $"$(e.Message) when parsing this `(' brace group");
        }
        def group = finish_parent (parent_begin, current_begin);
        Token.RoundGroup (shift_end(loc + e.Location), group, openBrace, null);
      }
    }

    parse_square_group (loc : Location, openBrace : Token.BeginSquare) : Token.SquareGroup
    {
      def parent_begin = parent_stream.Count;
      def current_begin = current_stream.Count;
      
      def loop () {
        def tok = get_token ();
        match (tok) {
          // finish entire brace group
          | Token.EndSquare as closeBrace =>
            def group = finish_parent (parent_begin, current_begin);
            def groupLoc = loc + tok.Location;
            when (group != null)
              group.Location = groupLoc;
            eat_newlines();
            Token.SquareGroup (groupLoc, group, openBrace, closeBrace);

          // finish current loose group
          | Token.Comma => finish_current (current_begin, tok); eat_newlines(); loop ()
          | _ => handle_default_token (current_begin, tok, TokenLocation.SquareGroup, false); loop ()
        }
      }
      try { loop () }
      catch { e is PreParserException =>
        Message.Error (loc, "when parsing this `[' brace group");
        Message.Error (e.Location, e.Message);
        def group = finish_parent (parent_begin, current_begin);
        def groupLoc = loc + e.Location;
        when (group != null)
          group.Location = groupLoc;
        Token.SquareGroup (shift_end(groupLoc), group, openBrace, null);
      }
    }

    parse_quote_group (loc : Location, openBrace : Token.BeginQuote) : Token.QuoteGroup
    {
      def parent_begin = parent_stream.Count;
      def current_begin = current_stream.Count;
      
      def loop () {
        def tok = get_token ();
        match (tok) {
          // finish entire brace group
          | Token.EndQuote as closeBrace =>
            def group = finish_parent (parent_begin, current_begin);
            eat_newlines();
            Token.QuoteGroup (loc + tok.Location, group, openBrace, closeBrace);

          // finish current loose group
          | Token.Semicolon => finish_current (current_begin, tok); eat_newlines(); loop ()
          | Token.NewLine => loop()
          | _ => handle_default_token (current_begin, tok, TokenLocation.QuoteGroup); loop ()
        }
      }
      try { loop () }
      catch { e is PreParserException =>
        Message.Error (loc, "when parsing this `<[' brace group");
        Message.Error (e.Location, e.Message);
        def group = finish_parent (parent_begin, current_begin);
        Token.QuoteGroup (shift_end(loc + e.Location), group, openBrace, null);
      }
    }

    ParseTopLevelImpl (nesting : int = 0) : Token
    {
      def parent_begin = parent_stream.Count;
      def current_begin = current_stream.Count;
      mutable currentNsEnv = Env; // GlobalEnv of current namespace
      
      def get_qualified_identifier () : list [string] * list [Location]
      {
        def tok1 = get_token ();
        match (tok1)
        {
          | Token.Identifier (x) =>
            def tok2 = get_token(); //skip_newlines(get_token());
            match (tok2)
            {
              | Token.Operator (".") =>
                def (ident, locs) = get_qualified_identifier ();
                match (ident)
                {
                  | [] => ([x], [tok1.Location, tok2.Location])
                  | _  => (x :: ident, tok1.Location :: tok2.Location :: locs)
                }
              | t => push_back (t); ([x], [tok1.Location])
            }
          | t =>
            Message.Error (t.Location, $"expected qualified identifier, got token $t");
            push_back (t);
            ([], [])
        }
      }

      def get_qualified_tokens () : list [string] * list [Location] * list[Token]
      {
        def tok1 = get_token ();
        match (tok1)
        {
          | Token.Identifier (x) =>
            def tok2 = get_token();//skip_newlines(get_token());
            match (tok2)
            {
              | Token.Operator (".") =>
                def (ident, locs, toks) = get_qualified_tokens ();
                match (ident)
                {
                  | [] => ([x], [tok1.Location, tok2.Location], [tok1, tok2])
                  | _  => (x :: ident, tok1.Location :: tok2.Location :: locs, tok1 :: tok2 :: toks)
                }
              | t => 
                push_back (t);
                // Message.Debug($"Pushing token: $(get_token_type(t)) back.");
                ([x], [tok1.Location], [tok1]);
            }
          | t =>
            Message.Error (t.Location, $"expected qualified identifier, got token $t");
            push_back (t);
            ([], [], [])
        }
      }

      def make_before_location (location)
      {
        Location(location.FileIndex, location.Line, location.Column);
      }

      def parse_using_directive (tok)
      {
        finish_current (current_begin);
        def (id, idLocs, idToks) = get_qualified_tokens ();

        mutable tokens_in_body = idToks;

        def create_body_token()
        {
          def body = tokens_in_body.Rev();
          mutable next = body.Tail;
          mutable loc = body.Head.Location;

          body.Iter(current =>
            {
              current.Next = match (next) { | [] => null | _ => next.Head };
              unless (next == []) next = next.Tail;
              loc += current.Location;
            });
          Token.LooseGroup(loc, body.Head);
        }

        match (get_token ()) {
          | Token.NewLine as st => 
            def loc = tok.Location;
            Env = Env.AddOpenNamespace (id, loc);
            lexer.Keywords = Env.Keywords;

            def using_tok = Token.Using (loc, Env, tok, create_body_token());
            // Message.Debug($"Writing token: $(get_token_type(using_tok))");
            current_stream.Add (using_tok);
            current_stream.Add (Token.Semicolon(st.Location, true));                       
            
            lexer.OnAfterUsingDirectiveParse(loc
              + make_before_location (st.Location), id, idLocs,
              "", Location.Default, currentNsEnv, Env);

          | Token.Semicolon as st =>
            def loc = tok.Location + st.Location;
            Env = Env.AddOpenNamespace (id, loc);
            lexer.Keywords = Env.Keywords;

            def using_tok = Token.Using (loc, Env, tok, create_body_token());
            current_stream.Add (using_tok);

            // Message.Debug($"Writing token: $(get_token_type(using_tok))");
            
            lexer.OnAfterUsingDirectiveParse(loc
              + make_before_location (st.Location), id, idLocs,
              "", Location.Default, currentNsEnv, Env);

          | Token.Operator ("=") as eq =>
            def (id2, idLocs2, idToks2) = get_qualified_tokens ();

            tokens_in_body = (eq :: tokens_in_body).Append(idToks2);

            def st = get_token ();
            def ty =
              match (st)
              {
                | Token.Semicolon | Token.NewLine => null
                | Token.BeginSquare => parseTypeName(idToks2, st)
                | _ =>
                  push_back (st);
                  Message.Error(st.Location, "expecting `;' after using alias");
                  null
              };

            match (id)
            {
              | [name] when ty == null =>
                Env = Env.AddNamespaceAlias (name, id2, tok.Location);
                lexer.OnAfterUsingDirectiveParse(tok.Location
                  + make_before_location (st.Location), id2, idLocs2,
                  name, idLocs.Head, currentNsEnv, Env);
                assert(idLocs.Length == 1);

              | [_name] => ()
                // make generic type alias...

              | [] => // occur if syntax error
                lexer.OnAfterUsingDirectiveParse(tok.Location
                  + make_before_location (st.Location), id2, idLocs2,
                  "", Location.Default, currentNsEnv, Env);

              | _ =>
                Message.Error (tok.Location, "using alias must be simple name without dots");
                lexer.OnAfterUsingDirectiveParse(tok.Location
                  + make_before_location (st.Location), id2, idLocs2,
                  id.ToString(), idLocs.Head + idLocs.Last, currentNsEnv, Env);
            }

            def using_tok = Token.Using (tok.Location + st.Location, Env, tok, create_body_token());
            // Message.Debug($"Writing token: $(get_token_type(using_tok))");
            current_stream.Add (using_tok);

          | x =>
            push_back (x);
            // The error message must point to last using token
            def loc1 = match (idLocs) { | [] => tok.Location | _ => idLocs.Last };
            def loc2 = Location(loc1.FileIndex, loc1.EndLine, loc1.EndColumn);
            Message.Error (loc2, "expecting `;' or `='");
            // In notification location must point before first token of next directive
            lexer.OnAfterUsingDirectiveParse(tok.Location + x.Location.FromStart(),
              id, idLocs, "", Location.Default, currentNsEnv, Env);
        }

        finish_current (current_begin);
      }

      def read_until_first_real_token () : void
      {
          match (get_token()) {
            | Token.Comment
            | Token.NewLine => read_until_first_real_token ()
            | x => push_back(x)
          }
      }
      
      def loop ()
      {       
        def tok = get_token ();
        unless(ReferenceEquals(Env.Defines, lexer.Defines))
          Env = Env.SetDefines(lexer.Defines);
        match (tok)
        {
          | Token.Keyword ("using") => parse_using_directive (tok); loop ()

          | Token.Keyword ("namespace") =>
            finish_current (current_begin);

            def prevNsEnv = currentNsEnv;
            currentNsEnv = Env;

            def (id, idLocs) = get_qualified_identifier ();
            def headerLocation = if (idLocs.IsEmpty) tok.Location else tok.Location + idLocs.Last;

            def inner_loop() {
              match (get_token ())
              {
                | Token.BeginBrace as br =>
                  last_declaration_token = null;
                  def loc = tok.Location + br.Location;
                  def oldEnv = Env;
                  Env = Env.EnterIntoNamespace (id);
                  lexer.Keywords = Env.Keywords;

                  lexer.OnBeforeNamespaceParse ();

                  def decls = ParseTopLevelImpl (nesting + 1);
                  def namespace_tok = Token.Namespace (loc, Env, tok, decls);

                  // make location of namespace body
                  def endLoc = if (last_declaration_token is null)
                    Location.Default
                  else
                  {
                    def end = last_declaration_token.Location;
                    last_declaration_token = null;
                    end
                  };

                  lexer.OnAfterNamespaceParse (loc + endLoc,
                    id, idLocs, oldEnv, Env, headerLocation, br.Location, endLoc);

                  Env = oldEnv;
                  lexer.Keywords = Env.Keywords;

                  // Message.Debug($"Writing token: $(get_token_type(namespace_tok))");
                  current_stream.Add (namespace_tok);

                | Token.NewLine => inner_loop()
              
                | x => Message.Error (x.Location, "expecting `{' opening namespace scope")
              }
            }
            inner_loop();
            finish_current (current_begin);
            currentNsEnv = prevNsEnv;
            loop ()

          // finish entire brace group
          | Token.EndBrace when nesting > 0 =>
            last_declaration_token = tok;
            reset_comment (tok);
            finish_parent (parent_begin, current_begin);

          // finish current loose group
          | Token.Semicolon => finish_current (current_begin, tok); loop ()

          | Token.EndOfFile when parent_begin == 0 =>
            // check #region/#endregion completion
            match (lexer.IncompleteRegions)
            {
              | h :: _ => Message.Error (h.Location, "#endregion directive expected")
              | [] => ()
            }

            def brace_group = finish_parent (parent_begin, current_begin);
            finished = true;
            last_declaration_token = tok;
            brace_group;

          | _ => handle_default_token (current_begin, tok, TokenLocation.TopLevel); loop ()
        }
      }
      
      try { read_until_first_real_token(); loop () }
      catch { e is PreParserException =>
        Message.Error (e.Location, e.Message);
        finish_parent (parent_begin, current_begin);
      }
    }

    static parseTypeName(_idToks2 : list[Token], _brace : Token) : FixedType
    {
      null
    }

    indention_based_copy () : PreParser
    {
      def copy = PreParserIndent (lexer);
      token_buffer.Iter(copy.token_buffer.Push(_));
      copy.Env = Env;
      copy.finished = finished;
      copy
    }

    public ParseTopLevel () : Token.BracesGroup {
      try {
        def stream = ParseTopLevelImpl ();
        Token.BracesGroup (if (stream != null) stream.Location else Location.Default, stream, null, null, true)
      } catch {
        | _ is LexerBase.PragmaIndent =>
          indention_based_copy ().ParseTopLevel ()
      }
    }

    [Nemerle.Assertions.Ensures (value != null)]
    public PreParse () : Token.BracesGroup {
      try {
        def top = parse_brace_group (lexer.Location, null, false, true);
        unless (finished)
          Message.Error (lexer.Location, "expected end of file, encountered closing brace");
        top
      } catch {
        | _ is LexerBase.PragmaIndent =>
          indention_based_copy ().PreParse ()
      }
    }

    protected static shift_end(loc : Location) : Location
    {
      if (loc.EndColumn > 1)
        Location(loc.FileIndex, loc.Line, loc.Column, loc.EndLine, loc.EndColumn - 1);
      else
        loc
    }
  }
  
}
