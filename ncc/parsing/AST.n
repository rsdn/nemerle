/*
 * Copyright (c) 2003-2008 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using System.Diagnostics;
using System.Globalization;
using System.Math;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Utility;

using SCG = System.Collections.Generic;

namespace Nemerle.Compiler {

  [Record]
  public struct TextPoint : System.IComparable[TextPoint]
  {
    public Line   : int;
    public Column : int;

    public static @== (x : TextPoint, y : TextPoint) : bool { x.Line == y.Line && x.Column == y.Column }
    public static @!= (x : TextPoint, y : TextPoint) : bool { !(x == y) }
    public static @<  (x : TextPoint, y : TextPoint) : bool { x.Line < y.Line || (x.Line == y.Line && x.Column < y.Column) }
    public static @>  (x : TextPoint, y : TextPoint) : bool { y < x }
    public static @<= (x : TextPoint, y : TextPoint) : bool { !(y < x) }
    public static @>= (x : TextPoint, y : TextPoint) : bool { !(x < y) }

    public Offcet(other : TextPoint) : TextPoint
    {
      Offcet(other.Line - 1, other.Column - 1)
    }

    public Offcet(lineOffset : int, columnOffset : int) : TextPoint
    {
      TextPoint(Line + lineOffset, if (lineOffset > 0) columnOffset + 1 
                                   else                Column + columnOffset)
    }

    public CompareTo(other : TextPoint) : int
    {
      if (this == other)      0
      else if (this > other)  1
      else                   -1
    }

    override public ToString() : string
    {
      $"$Line:$Column"
    }
  }

  [DebuggerDisplay(<#{File + ":" + Line + ":" + Column + ":" + EndLine + ":" + EndColumn + (IsGeneratedOrEmpty ? "-gen" : "")}#>)]
  public struct Location : System.IComparable[Location], System.IEquatable[Location]
  {
    static this ()
    {
      def index = AddFile(""); // fake file with index 0
      assert(index == 0);
    }

    private static _isFileInIndentationSyntax : SCG.List[bool]         = SCG.List();
    private static _files                     : SCG.List[string]       = SCG.List();
    private static _filesMap                  : Hashtable[string, int] = Hashtable();
    
    public static GetIndexArrayLength() : int { _files.Count }
    
    public static SetIndentationSyntaxForFile(fileIndex : int, isIndntSyntax : bool) : void
    {
      lock (_isFileInIndentationSyntax)
        _isFileInIndentationSyntax[fileIndex] = isIndntSyntax;
    }

    public this (fileIndex : int, line : int, col : int)
    {
      this (fileIndex, line, col, line, col);
    }

    public this (fileIndex : int, begin : TextPoint)
    {
      this (fileIndex, begin.Line, begin.Column, begin.Line, begin.Column);
    }

    public this (fileName : string, line : int, col : int, endLine : int, endCol : int)
    {
      this (GetFileIndex (fileName), line, col, endLine, endCol);
    }

    public this (fileName : string, begin : TextPoint, end : TextPoint)
    {
      this (fileName, begin.Line, begin.Column, end.Line, end.Column);
    }

    public this (fileIndex : int, line : int, col : int, endLine : int, endCol : int)
    {
      assert(fileIndex >= 0);

      _fileIndex = fileIndex;
      _line      = line;
      _column    = col :> short;
      _endLine   = endLine;
      _endColumn = endCol :> short;
    }

    public this (fileIndex : int, begin : TextPoint, end : TextPoint)
    {
      this (fileIndex, begin.Line, begin.Column, end.Line, end.Column);
    }

    public this (source : Location, line : int, col : int, endLine : int, endCol : int)
    {
      _fileIndex = source._fileIndex;
      _line      = line;
      _column    = col :> short;
      _endLine   = endLine;
      _endColumn = endCol :> short;
    }

    public this (source : Location, begin : TextPoint, end : TextPoint)
    {
      this (source, begin.Line, begin.Column, end.Line, end.Column);
    }

    public this (source : Location, line : int, col : int) { this (source, line, col, line, col) }
    
    public static Default : Location = Location (0, 0, 0, 0, 0);

    public static @== (x : Location, y : Location) : bool { x.Equals (y) }
    public static @!= (x : Location, y : Location) : bool { !x.Equals (y) }
   
    /// This operator is not commutative!
    public static @+ (x : Location, y : Location) : Location
    {
      def xFileIndex = x.FileIndex;
      if (xFileIndex == y.FileIndex && x.IsGenerated == y.IsGenerated)
      {
        //def genmask = if (x.IsGenerated) GeneratedMask else 0; // VladD2: What for this need? IsGenerated an equal!
        Location(
          x._fileIndex | y._fileIndex, // marge masks // | genmask,
          x.Line,
          x.Column,
          if (y.EndLine > x.EndLine) y.EndLine else x.EndLine,
          if (x.EndLine < y.EndLine)          y.EndColumn 
          else if (x.EndLine > y.EndLine)     x.EndColumn 
          else if (x.EndColumn < y.EndColumn) y.EndColumn 
          else                                x.EndColumn);
      }
      else if (y == Default || y.IsGenerated)
        x
      else
        y
    }    
    
    //public AsParsed () : Location 
    //{ def copy = this; copy._fileIndex &= ~GeneratedMask; copy }
    //public AsParsed () : Location 
    //{ def copy = this; copy._fileIndex &= ~GeneratedMask; copy }

    public AsGenerated () : Location
    { AsGenerated (_fileIndex, _line, _column, _endLine, _endColumn) }

    public static AsGenerated (fileIndex : int, line : int, col : int) : Location
    { AsGenerated (fileIndex, line, col, line, col); }    

    public static AsGenerated (fileName : string, line : int, col : int, endLine : int, endCol : int) : Location
    { AsGenerated (GetFileIndex (fileName), line, col, endLine, endCol); }

    public static AsGenerated (fileIndex : int, line : int, col : int, endLine : int, endCol : int) : Location
    { Location (fileIndex | GeneratedMask, line, col, endLine, endCol) }

    public IsGenerated : bool { get { _fileIndex %&& GeneratedMask } }
    public MarkAsGenerated() : void { _fileIndex |= GeneratedMask; }

    public MarkAsFakeSorceAvailable() : void { assert2(_line > 0 && FileIndex > 0); _fileIndex |= FakeSourceMask; }
    public AsFakeSorceAvailable() : Location
    {
      Location(_fileIndex | FakeSourceMask, _line, _column, _endLine, _endColumn)
    }

    public IsGeneratedOrEmpty : bool { get { IsGenerated || _line == 0 } }

    public IsSourceAvailable : bool
    {
      get
      {
        def mask = _fileIndex & FakeSourceMask;
        (mask == 0 || mask == FakeSourceMask) && FileIndex > 0 && Line > 0
      }
    }

    public IsSourceFileAvailable : bool { get { FileIndex != 0 && Line > 0 && System.IO.File.Exists(File) } }

    public static GetFileName(index : int) : string
    {
      _files[index];
    }

    /** Adds new filename to locations index. If filename in already in
        store, an error message is outputted.
     */
    public static AddFile (name : string) : int
    {
      when (_filesMap.Contains (name))
        Message.Error ($"file '$name' occured twice on the list to compile");

      GetFileIndex (name)
    }
    
    /** Removes a filename from the location index */
    public static RemoveFile (name : string) : void
    {
      unless ((_filesMap : SCG.Dictionary[string, int]).Remove (name))
          throw System.ArgumentException ($"file '$name' do not exist");
    }

    public static IsFileInIndentationSyntax(fileIndex : int) : bool
    {
      _isFileInIndentationSyntax[fileIndex]
    }

    /** Gets index of given filename in locations store. If one doesn't exist
        it is being added and new index is returned.
     */
    public static GetFileIndex ([NotNull] name : string) : int
    {
      mutable index;

      if (_filesMap.TryGetValue(name, out index))
        index
      else lock (_filesMap)
      {
        if (_filesMap.TryGetValue(name, out index))
          index
        else
        {
          index = _files.Count;
          _files.Add(name);
          _isFileInIndentationSyntax.Add(false);
          _filesMap[name] = index;
          index
        }
      }
    }

    static AllMasks       = 0xF000_0000;
    static FileIndexMask  = 0x0FFF_FFFF;
    static FakeSourceMask = 0x2000_0000 | 0x4000_0000; // include GeneratedMask!
    static GeneratedMask  = 0x4000_0000;

    public FileIndex : int { [DebuggerNonUserCode] get { _fileIndex & FileIndexMask } }
    
               mutable _fileIndex  : int;
    [Accessor]         _line       : int;
                       _column     : short;
    public             Column      : int    { get { _column } }

    [Accessor]          _endLine   : int;
                        _endColumn : short;
    public              EndColumn  : int    { get { _endColumn } }

    public              Begin      : TextPoint { get { TextPoint(Line, Column) } }
    public              End        : TextPoint { get { TextPoint(EndLine, EndColumn) } }

    public File : string
    {
      [Nemerle.Assertions.Ensures (value != null)]
      get { _files[FileIndex]; }
    }

    public CompareTo(x : Location) : int
    {
      if (FileIndex == x.FileIndex) // here we ignore generated / parsed bit
        if (Line == x.Line)
          Column - x.Column
        else
          Line - x.Line
      else
        File.CompareTo (x.File)
    }

    public override ToString () : string
    {
      if (this == Default)
        ""
      else
        if (EndLine != 0)
          $"$File:$Line:$Column:$EndLine:$EndColumn: "
        else if (Line != 0)
          $"$File:$Line:$Column: "
        else
          File + ": "
    }

    [Nemerle.OverrideObjectEquals]
    public Equals (other : Location) : bool
      implements System.IEquatable[Location].Equals
    {
      FileIndex == other.FileIndex // ignore generated / parsed bit
      && _line == other._line       && _column == other._column
      && _endLine == other._endLine && _endColumn == other._endColumn
    }

    public override GetHashCode() : int
    {
      FileIndex ^ _line ^ _column ^ _endLine ^ _endColumn
    }

    public FromStart () : Location
    { Location(_fileIndex, Line, Column, Line, Column) }

    public FromStartAsGenerated() : Location
    { Location(_fileIndex | GeneratedMask, Line, Column, Line, Column) }

    public FromEnd () : Location
    { Location(_fileIndex, EndLine, EndColumn, EndLine, EndColumn) }

    public FromEndAsGenerated() : Location
    { Location(_fileIndex | GeneratedMask, EndLine, EndColumn, EndLine, EndColumn) }

    public Contains(point : TextPoint) : bool { Contains(point.Line, point.Column) }

    public Contains(testLine : int, testCol : int) : bool
    {
      if (testLine >= this.Line && testLine <= this.EndLine)
      {
        if (testLine == this.Line)
        {
          if (testLine == this.EndLine)
            testCol >= this.Column && testCol <= this.EndColumn
          else
            testCol >= this.Column
        }
        else if (testLine == this.EndLine)
          testCol <= this.EndColumn
        else
          true
      }
      else
        false
    }

    /// Returns whether the first location is strictly inside the second
    public StrictlyContains(second : Location) : bool
    {
      Contains(second) && this != second
    }

    /// Returns whether the first location is (not strictly) inside the second
    public Contains(second : Location) : bool
    {
      if (FileIndex == second.FileIndex)
        Contains(second.Line, second.Column) && Contains(second.EndLine, second.EndColumn)
      else
        false
    }

    /// Returns whether the first location is (not strictly) 
    /// before the second (the left of first is to the left of second)
    public StartsBefore(second: Location) : bool
    {
      if (Line < second.Line)
        true
      else if (Line > second.Line)
        false
      else if (Column < second.Column)
        true
      else if (Column > second.Column)
        false
      else
        true
    }

    public Contains(testFileIndex : int, 
      testLine : int, testCol : int) : bool
    {
      if (FileIndex == testFileIndex)
        Contains(testLine, testCol)
      else
        false
    }

    /// The 'lst' must be ordered. This function test only first and last elements.
    public static EnclosingLocation(this lst : list[Location]) : Location
    {
      Debug.Assert(lst.IsOrdered((x, y) => x.CompareTo(y) > 0));
      Debug.Assert(!lst.IsEmpty);
      
      lst.Head + lst.Last
    }

    public static EnclosingLocation[T](this lst : list[T]) : Location
      where T: Located
    {
      Debug.Assert(lst.IsOrdered((x, y) => x.Location.CompareTo(y.Location) > 0));
      Debug.Assert(!lst.IsEmpty);
      
      lst.Head.Location + lst.Last.Location
    }

    public TrimStart(second : Location) : Location
    {
      TrimStart(second, true)
    }

    public TrimStart(l2 : Location, adjustBegin : bool) : Location
    {
      mutable lbeg;
      mutable cbeg;

      def adj = if (adjustBegin) 1 else 0;

      if      (Line < l2.EndLine) { lbeg = l2.EndLine; cbeg = l2.EndColumn + adj; }
      else if (Line > l2.EndLine) { lbeg = Line;    cbeg = Column; }
      else
      {
        lbeg = Line;
        cbeg = if (Column < l2.EndColumn) l2.EndColumn + adj else Column;
      }

      Location(this, lbeg, cbeg, EndLine, EndColumn)
    }

    public TrimEnd(l2 : Location) : Location
    {
      mutable lend;
      mutable cend;

      if      (EndLine > l2.Line) { lend = l2.Line;    cend = l2.Column - 1; }
      else if (EndLine < l2.Line) { lend = EndLine; cend = l2.EndColumn; }
      else
      {
        lend = EndLine;
        cend = if (EndColumn > l2.Column) l2.Column else EndColumn;
      }

      Location(this, Line, Column, lend, cend)
    }

    public Trim(l2 : Location, line : int, col : int) : Location
    {
      if (line < l2.Line || line == l2.Line && col < l2.Column)
        TrimEnd(l2)
      else if (line > l2.EndLine || line == l2.EndLine && col > l2.EndColumn)
        TrimStart(l2, true)
      else
        this
    }

    public Combine(l2 : Location) : Location
    {
      if (IsEmpty)
        l2
      else if (l2.IsEmpty)
        this
      else
      {
        mutable lbeg;
        mutable cbeg;

        if      (Line < l2.Line) { lbeg = Line; cbeg = Column; }
        else if (Line > l2.Line) { lbeg = l2.Line; cbeg = l2.Column; }
        else
        {
          lbeg = Line;
          cbeg = if (Column < l2.Column) Column else l2.Column;
        }

        mutable lend;
        mutable cend;

        if      (EndLine > l2.EndLine) { lend = EndLine; cend = EndColumn; }
        else if (EndLine < l2.EndLine) { lend = l2.EndLine; cend = l2.EndColumn; }
        else
        {
          lend = EndLine;
          cend = if (EndColumn > l2.EndColumn) EndColumn else l2.EndColumn;
        }

        Location(this, lbeg, cbeg, lend, cend)
      }
    }

    public Combine(l2 : Located) : Location
    {
      Combine(l2.Location)
    }

    public IsIntersect(l2 : Location) : bool
      requires FileIndex == l2.FileIndex || FileIndex == 0 || l2.FileIndex == 0
    {
      !Intersect(l2).IsEmpty
    }

    public Intersect(l2 : Location) : Location
      requires FileIndex == l2.FileIndex || FileIndex == 0 || l2.FileIndex == 0
    {
      mutable lbeg;
      mutable cbeg;

      if      (Line < l2.Line) { lbeg = l2.Line; cbeg = l2.Column; }
      else if (Line > l2.Line) { lbeg = Line;    cbeg = Column; }
      else
      {
        lbeg = Line;
        cbeg = if (Column < l2.Column) l2.Column else Column;
      }

      mutable lend;
      mutable cend;

      if      (EndLine > l2.EndLine) { lend = l2.EndLine; cend = l2.EndColumn; }
      else if (EndLine < l2.EndLine) { lend = EndLine;    cend = EndColumn; }
      else
      {
        lend = EndLine;
        cend = if (EndColumn > l2.EndColumn) l2.EndColumn else EndColumn;
      }

      Location(this, lbeg, cbeg, lend, cend)
    }

    public IsEqualExcludingFile(l2 : Location) : bool
    {
      Line   == l2.Line   && EndLine   == l2.EndLine &&
      Column == l2.Column && EndColumn == l2.EndColumn
    }

    public IsEmpty : bool
    {
      get { EndLine == 0 || EndLine < Line || (EndLine == Line && EndColumn <= Column) }
    }

    /// True if second contain inside this location and them not equal.
    public IsNestedIn(second : Location) : bool
    {
      second.StrictlyContains(this)
    }

    public static IndexOfMostNested2[T](
      this seq : SCG.IList[T], 
      convert : System.Converter[T, Location],
      line : int,
      col : int
    )
      : int
    {
      IndexOfMostNested(seq, convert(_), line, col)
    }

    /// Return index of object in seq which conain most nested Lication.
    public static IndexOfMostNested[T](
      this seq : SCG.IList[T], 
      convert : T -> Location,
      line : int,
      col : int
    )
      : int
    {
      def (_, resIndex, _) = seq.Fold((0, -1, Location.Default), 
        fun(elem, (i, resIndex, curr))
        {
          def loc = convert(elem);
          if (loc.Contains(line, col) && (resIndex < 0 || loc.IsNestedIn(curr)))
            (i + 1, i,        loc)
          else
            (i + 1, resIndex, curr);
        });

      resIndex
    }
  }

  public class Located
  {
    private mutable loc : Location;

    public this ()
    {
      loc = LocationStack.Top();
    }
    public this (loc : Location)
    {
      this.loc = loc;
    }
    public IsGenerated : bool { get { loc.IsGenerated } }

    public virtual Location : Location
    { [System.Diagnostics.DebuggerStepThrough]
      get { loc }
      set { loc = value; }
    }
  }

  /// Root of parsed AST
  [Record]
  public class ParsedBase : Located
  {
    [RecordIgnore] public TypedObject : TypedBase { get; private set; }

    internal ResetTypedObject() : void
    {
      TypedObject = null;
    }

    internal SetTypedObject(related : TypedBase) : void
    {
      when (TypedObject : object != related)
        TypedObject = related;
    }
  }

  /// Root of parsed AST
  [Record]
  public class TypedBase : Located
  {
    [RecordIgnore] public ParsedObject : ParsedBase { get; private set; }

    public virtual SetParsedObject([NotNull] related : ParsedBase) : void
    {
      def relatedIsGenerated = related.Location.IsGenerated;

      when (ParsedObject == null || (ParsedObject.Location.IsGenerated && !relatedIsGenerated))
      {
        related.SetTypedObject(this);
        ParsedObject = related;
      }

      when (!related.Location.IsEmpty && (Location.IsEmpty || Location.IsGenerated && !relatedIsGenerated))
        Location = related.Location;
    }

    public UpdateRelatedParsedObject() : void
    {
      ParsedObject?.SetTypedObject(this);
    }
  }

  public type NemerleAttributes = NemerleModifiers;

  [System.Flags]
  public enum NemerleModifiers
  {
    | None            = 0x00000
    | Public          = 0x00001
    | Private         = 0x00002
    | New             = 0x00004
    | Protected       = 0x00008
    | Abstract        = 0x00010
    | Virtual         = 0x00020
    | Sealed          = 0x00040
    | Static          = 0x00080
    | Mutable         = 0x00100
    | Internal        = 0x00200
    | Override        = 0x00400
    | Struct          = 0x01000
    | Macro           = 0x02000
    | Volatile        = 0x04000
    | SpecialName     = 0x08000
    | Partial         = 0x10000
    | Extern          = 0x20000
    /// field is immutable, but compiler overrides it and can assign something
    | CompilerMutable = 0x40000 

    | VirtualityModifiers = New %| Abstract %| Virtual %| Override
    | OverrideModifiers   = Abstract %| Virtual %| Override
    | AccessModifiers     = Public %| Private %| Protected %| Internal
  }
 
  public type Modifiers = AttributesAndModifiers;
  
  public partial class AttributesAndModifiers : Located
  {
    public CustomAttributesLocation : Location              { get; internal        set; }
    public Modifiers                : NemerleModifiers      { get { mods }         set { mods = value; } }
    public CustomAttributes         : list[Parsetree.PExpr] { get { custom_attrs } set { custom_attrs = value; } }
    
    public mutable mods : NemerleModifiers;
    public mutable custom_attrs : list[Parsetree.PExpr];
    internal mutable macro_attrs : list [string * Parsetree.PExpr];
    /// This property contains only custom attributes which parsed from sources. Macros can't modify it.
    public ParsedCustomAttributes : list [Parsetree.PExpr]
    {
      mutable parsed_custom_attrs : list [Parsetree.PExpr] = [];
      get          { parsed_custom_attrs }
      internal set { parsed_custom_attrs = value ?? [] };
    }
    /// This property contains only modifiers which parsed from sources. Macros can't modify it.
    public ParsedModifiers        : NemerleModifiers      { get; }

    public IsEmpty : bool { get { custom_attrs.IsEmpty && macro_attrs.IsEmpty } }

    public this(mods : NemerleModifiers, custom_attrs : list [Parsetree.PExpr])
    {
      ParsedModifiers = mods;
      this.mods = mods;
      this.custom_attrs = custom_attrs;
      this.macro_attrs = [];
    }

    public this() { this(NemerleModifiers.None, []) }

    /// For Clone()
    private this(other : AttributesAndModifiers)
    {
      CustomAttributesLocation  = other.CustomAttributesLocation;
      mods                      = other.mods;
      custom_attrs              = other.custom_attrs;
      macro_attrs               = other.macro_attrs;
      ParsedCustomAttributes    = other.ParsedCustomAttributes;
      ParsedModifiers           = other.ParsedModifiers;
    }

    public Clone() : AttributesAndModifiers{ AttributesAndModifiers(this) }

    public override Location : Location { get { CustomAttributesLocation } }

    public Attributes : NemerleModifiers { get { mods } }

    public GetCustomAttributes () : list [Parsetree.PExpr]
    {
      custom_attrs
    }
    
    public GetMacroAttributes () : list [Parsetree.PExpr]
    {
      macro_attrs.Map (Pair.Second)
    }
    
    public AddCustomAttribute (expr : Parsetree.PExpr) : void
    {
      custom_attrs ::= expr;
    }

    override public ToString() : string
    {
      $"$custom_attrs $mods"
    }
  }

  public variant Literal : System.IEquatable[Literal]
  {
    | Void
    | Null
    | String 
      {
        val : string; 
        public this(value : string, rawString : string) { val = value; RawString = rawString; } 
      }
    | Float { val : float; }
    | Double { val : double; }
    | Decimal { val : decimal; }
    | Char { val : char; }
    | Bool { val : bool; }
    | Integer {
        val : ulong; 
        is_negative : bool; 
        mutable treat_as : FixedType.Class;
      } 

    | Enum { val : Literal.Integer; ty : TypeInfo; field : IField; }

    public RawString : string { get; set; }

    [OverrideObjectEquals]
    public Equals (lit : Literal) : bool
      implements System.IEquatable[Literal].Equals
    {
      match ((this, lit)) {
        | (Void, Void)
        | (Null, Null) => true
        | (String (x1), String (x2)) => x1 == x2
        | (Float (x1), Float (x2)) => x1 == x2
        | (Double (x1), Double (x2)) => x1 == x2
        | (Decimal (x1), Decimal (x2)) => x1 == x2
        | (Char (x1), Char (x2)) => x1 == x2
        | (Bool (x1), Bool (x2)) => x1 == x2
        | (Integer (val, is_neg, _), Integer (val', is_neg', _)) =>
          val == val' && is_neg == is_neg'
        | (Enum (v1, t1, f1), Enum (v2, t2, f2)) => 
          v1.Equals (v2) && t1.Equals (t2) && (if (f1 == null) f2 == null else f1.Equals (f2))
        | _ => false
      }
    }

    static EscapeChar(ch : char) : string
    {
      | '\"'      => <#\"#> // "
      | '\\'      => @"\\" // \ 
      | '\n'      => @"\n" // new line
      | '\t'      => @"\t" // horizontal tab
      | '\r'      => @"\r" // carriage return
      | '\e'      => @"\e" 
      | '\a'      => @"\a" // alert
      | '\b'      => @"\b" // backspace
      | '\f'      => @"\f" // form feed
      | '\v'      => @"\v" // vertical tab
      | '\0'      => @"\0" // null
      | '\u2028'  => @"\u2028" // Line separator character
      | '\u2029'  => @"\u2029" // Paragraph separator character
      | '\u0085'  => @"\u0085" // Paragraph separator character
      | '\uFFFF'  => @"\uFFFF"
      | _         => ch.ToString()
    }

    static EscapeString(str : string) : string
    {
      def sb = System.Text.StringBuilder();

      foreach (ch in str)
        _ = sb.Append(EscapeChar(ch));

      sb.ToString()
    }
      
    /**
     * Converts 'this' literal to an equivalent (lexable) string
     */
    public override ToString () : string
    {
      match (this)
      {
        | Literal.Void           => "()"
        | Literal.Null           => "null"

        | Literal.String   (val) => "\"" + EscapeString(val) + "\""
        | Literal.Float    (val) => val.ToString(NumberFormatInfo.InvariantInfo) + "f"
        | Literal.Double   (val) => val.ToString(NumberFormatInfo.InvariantInfo) + "d"
        | Literal.Decimal  (val) => val.ToString(NumberFormatInfo.InvariantInfo) + "m"
        | Literal.Char     (val) => "'" + EscapeChar(val) + "'"
        | Literal.Bool     (val) => if (val) "true" else "false"
        | Literal.Integer  (val, is_negative, treat_as) =>
          def s =
            if (is_negative)
              "-" + val.ToString()
            else if (treat_as == null)
              val.ToString()
            else
            {
              def types = treat_as.InternalType;

              if (treat_as.Equals(types.Int32)) // the most frequent case
                val.ToString()
              else if (treat_as.Equals(types.Int64))
                $"$(val)L"
              else if (treat_as.Equals(types.UInt64))
                $"$(val)UL"
              else if (treat_as.Equals(types.UInt32))
                $"$(val)U"
              else if (treat_as.Equals(types.Int16))
                $"$(val)S"
              else if (treat_as.Equals(types.UInt16))
                $"$(val)SU"
              else if (treat_as.Equals(types.Byte))
                $"$(val)B"
              else if (treat_as.Equals(types.SByte))
                $"$(val)SB"
              else 
                val.ToString();
            };
          s
          
        | Literal.Enum(val, ty, _) => "(" + val.ToString() + " :> " + ty.FullName + ")"
      }
    }
    
    public SystemType (InternalType : InternalTypeClass) : System.Type
    {
      GetInternalType (InternalType).GetSystemType ()
    }

    public GetInternalType (InternalType : InternalTypeClass) : FixedType
    {
      match (this)
      {
        | Literal.Void => InternalType.Void
        | Literal.Null => InternalType.Object
        | Literal.Char => InternalType.Char
        | Literal.String => InternalType.String
        | Literal.Float => InternalType.Single
        | Literal.Double => InternalType.Double
        | Literal.Decimal => InternalType.Decimal
        | Literal.Bool => InternalType.Boolean
        // for enums we want to stay with original type
        // because e.g. ToString is called on enum not int
        | Literal.Enum (_, ty, _) => ty.GetMemType ()
        | Literal.Integer (_, _, t) => t
      }
    }

    public WithType (t : FixedType) : option [Literal]
    {
      def InternalType = t.Manager.InternalType;
      match (this) {
        | Literal.Void => None ()
        | Literal.Null when t.CanBeNull
        | Literal.Char when t.Equals (InternalType.Char)
        | Literal.String when t.Equals (InternalType.String)
        | Literal.Float when t.Equals (InternalType.Single)
        | Literal.Double when t.Equals (InternalType.Double)
        | Literal.Decimal when t.Equals (InternalType.Decimal)
        | Literal.Bool when t.Equals (InternalType.Boolean) 
        | Literal.Enum (_, tc, _) when FixedType.Class (tc, []).Equals (t)
          => Some (this)
          
        | Literal.Integer (val, is_neg, cur) =>
          if (cur.Equals (t)) Some (this)
          else
            if (Typer.LiteralConversionPossible (this, t))
              Some (Literal.Integer (val, is_neg, t :> FixedType.Class))
            else
              None ()

        | _ => None ()
      }
    }
    
    public WithProperType () : Literal
    {
      def InternalType = ManagerClass.Instance.InternalType;
      match (this) {
        | Literal.Integer (0, true, _) => Literal.Integer (0, false, InternalType.Int32)
        | Literal.Integer (val, is_neg, _) =>
          def t =
            if (is_neg)
              if (val - 1 <= int.MaxValue)
                InternalType.Int32
              else
                InternalType.Int64
            else
              if (val <= int.MaxValue)
                InternalType.Int32
              else if (val <= uint.MaxValue)
                InternalType.UInt32
              else if (val <= System.Convert.ToUInt64 (long.MaxValue))
                InternalType.Int64
              else
                InternalType.UInt64;
          Literal.Integer (val, is_neg, t)
        | _ => this
      }
    }

    public AsObject (InternalType : InternalTypeClass) : object
    {
      match (this) {
        | Literal.Void => assert(false)
        | Literal.Null => null
        | Literal.Char (c) => c : object
        | Literal.String (s) => s
        | Literal.Float (f) => f
        | Literal.Double (d) => d
        | Literal.Decimal (d) => d
        | Literal.Bool (b) => b
        | Literal.Enum (l, t, _) =>
          def t = t.SystemType;
          if (t is System.Reflection.Emit.EnumBuilder || t is System.Reflection.Emit.TypeBuilder)
            l.AsObject (InternalType)
          else
            System.Enum.ToObject (t, l.AsObject (InternalType))
        | Literal.Integer (val, is_neg, t) =>
          def t = if (t == null) InternalType.Int32 else t;
          
          if (t.Equals (InternalType.UInt64)) {
            assert(!is_neg);
            val : object
          } else if (val == 0x8000000000000000UL) {
            assert(is_neg);
            assert(t.Equals (InternalType.Int64));
            long.MinValue : object
          } else {
            def val = 
              if (is_neg) 
                -System.Convert.ToInt64 (val)
              else
                System.Convert.ToInt64 (val);
            match (t.tycon.FullName) {
              | "System.UInt32" => (val :> uint) : object
              | "System.Int32" => val :> int
              | "System.Int16" => val :> short
              | "System.UInt16" => val :> ushort
              | "System.SByte" => val :> System.SByte
              | "System.Byte" => val :> System.Byte
              | "System.Int64" => val
              | _ => assert(false, t.tycon.FullName)
            }
          }
      }
    }

    public AsInt : option [int]
    {
      get {
        match (this) {
          | Literal.Integer (0x80000000ul, true, _) => Some (int.MinValue)          
          | Literal.Integer (x, neg, _) when x & 0x7FFFFFFFul == x =>
            Some (if (neg) -(x :> int) else x :> int)
          | _ => None ()
        }
      }
    }

    /**
      Returns plain integer value of Literal.Integer or Literal.Enum.
     */
    internal AsRawInt : option[int]
    {
      get {
        match(AsInt) {
          | Some as some => some
          | _ =>
            match(this) {
              | Literal.Enum(val, _, _) => val.AsInt
              | _ => None()
            }
        }
      }
    }

    public AsSByte : option [sbyte]
    {
      get {
        match (this) {
          | Literal.Integer (0x80ul, true, _) => Some (sbyte.MinValue)          
          | Literal.Integer (x, neg, _) when x & 0x7Ful == x =>
            Some (if (neg) -(x :> int) :> sbyte else x :> sbyte)
          | _ => None ()
        }
      }
    }

    public AsByte : option [byte]
    {
      get {
        match (this) {
          | Literal.Integer (x, false, _) when x <= byte.MaxValue => Some (x :> byte)
          | _ => None ()
        }
      }
    }

    public AsShort : option [short]
    {
      get {
        match (this) {
          | Literal.Integer (0x8000ul, true, _) => Some (short.MinValue)          
          | Literal.Integer (x, neg, _) when x & 0x7FFFul == x =>
            Some (if (neg) -(x :> int) :> short else x :> short)
          | _ => None ()
        }
      }
    }

    public AsUShort : option [ushort]
    {
      get {
        match (this) {
          | Literal.Integer (x, false, _) when x <= ushort.MaxValue => Some (x :> ushort)
          | _ => None ()
        }
      }
    }

    public AsUInt : option [uint]
    {
      get {
        match (this) {
          | Literal.Integer (x, false, _) when x <= uint.MaxValue => Some (x :> uint)
          | _ => None ()
        }
      }
    }

    public AsLong : option [long]
    {
      get {
        match (this) {
          | Literal.Integer (0x8000000000000000ul, true, _) => Some (long.MinValue)          
          | Literal.Integer (x, neg, _) when x & 0x7FFFFFFFFFFFFFFFul == x =>
            Some (if (neg) -(x :> long) else x :> long)
          | _ => None ()
        }
      }
    }

    public AsULong : option [ulong]
    {
      get {
        match (this) {
          | Literal.Integer (x, false, _) => Some (x)
          | _ => None ()
        }
      }
    }

    public static FromInt (x : int) : Literal.Integer
    {
      def InternalType = ManagerClass.Instance.InternalType;
      if (x == int.MinValue)
        Literal.Integer (0x80000000UL, true, InternalType.Int32)
      else
        Literal.Integer (Abs (x) :> ulong, x < 0, InternalType.Int32)
    }

    public static FromSByte (x : sbyte) : Literal.Integer
    {
      def InternalType = ManagerClass.Instance.InternalType;
      if (x == sbyte.MinValue)
        Literal.Integer (0x80UL, true, InternalType.SByte)
      else
        Literal.Integer (Abs (x) :> ulong, x < 0, InternalType.SByte)
    }

    public static FromByte (x : byte) : Literal.Integer
    {
      def InternalType = ManagerClass.Instance.InternalType;
      Literal.Integer (x, false, InternalType.Byte)
    }

    public static FromShort (x : short) : Literal.Integer
    {
      def InternalType = ManagerClass.Instance.InternalType;
      if (x == short.MinValue)
        Literal.Integer (0x8000UL, true, InternalType.Int16)
      else
        Literal.Integer (Abs (x) :> ulong, x < 0, InternalType.Int16)
    }

    public static FromUShort (x : ushort) : Literal.Integer
    {
      def InternalType = ManagerClass.Instance.InternalType;
      Literal.Integer (x, false, InternalType.UInt16)
    }

    public static FromUInt (x : uint) : Literal.Integer
    {
      def InternalType = ManagerClass.Instance.InternalType;
      Literal.Integer (x, false, InternalType.UInt32)
    }

    public static FromLong (x : long) : Literal.Integer
    {
      def InternalType = ManagerClass.Instance.InternalType;
      if (x == long.MinValue)
        Literal.Integer (0x8000000000000000UL, true, InternalType.Int64)
      else
        Literal.Integer (Abs (x) :> ulong, x < 0, InternalType.Int64)
    }

    public static FromULong (x : ulong) : Literal.Integer
    {
      def InternalType = ManagerClass.Instance.InternalType;
      Literal.Integer (x, false, InternalType.UInt64)
    }

    public static FromObject (o : object) : Literal
    {
      if (o == null) Null ()
      else
        match (o) {
          | o is bool => Bool (o)
          | o is string => String (o)
          | o is float => Float (o)
          | o is double => Double (o)
          | o is decimal => Decimal (o)
          | o is char => Char (o)
          
          | o is int => FromInt (o)
          | o is sbyte => FromSByte (o)
          | o is byte => FromByte (o)
          | o is short => FromShort (o)
          | o is ushort => FromUShort (o)
          | o is uint => FromUInt (o)
          | o is long => FromLong (o)
          | o is ulong => FromULong (o)

          | o is System.Enum =>
            def s = o.ToString ("d");
            def tyname = NString.Split (o.GetType ().TypeFullName (), '+', '.');
            def tc = match (ManagerClass.Instance.NameTree.LookupExactType (tyname)) {
              | Some (tc) => tc
              | None => Message.FatalError ($"type `$(tyname.ToString (\".\"))' is not available - it is either not public or not referenced properly");
            }
            def t = tc.GetMemType ();
            def int_lit =
              if (s [0] == '-')
                Integer (ulong.Parse (s.Substring (1)), true, t)
              else
                Integer (ulong.Parse (s), false, t);
            // IT : Need IField
            Enum (int_lit, tc, null)

          | _ =>
            Util.ice ($ "cannot create literal from $o")
        }
    }
  }

  public variant FunBody
  {
    | Parsed { expr : Parsetree.PExpr; }
    | Typed { expr : Typedtree.TExpr; }
    | ILed
    | Abstract  // for interface method

    public override ToString() : string
    {
      match (this)
      {
        | Parsed(expr) => $"Parsed: $expr"
        | Typed(expr)  => $"Typed: $expr"
        | ILed         => "FunBody.ILed"
        | Abstract     => "FunBody.Abstract"
      }
    }
  }
} // Nemerle.Compiler
