using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Utility;
using Nemerle.WPF;

using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;

using System.Console;

[NotifyPropertyChanged]
public class Person
{
    public Age       : int { get { DateTime.Today.Year - BirthDate.Year } }

    [NotifyChangedOptions(Dependent = [Age, FullNameAndAge], HideSelfChanges)]
    public BirthDate : DateTime { get; set; }
    
    [NotifyChangedOptions(Dependent = [FullNameAndAge])]
    public FirstName : string { get; set; }
    
    [NotifyChangedOptions(Dependent = FullNameAndAge)]
    public LastName  : string { get; set; }
    
    public FullNameAndAge  : string { get { $"$FirstName $LastName $Age"} }
    
    [NotifyChangedOptions(HideSelfChanges)]
    public IgnoredProperty : string { get; set; }
    
    public RaiseIgnoredPropertyChanged() : void
    {
        RaisePropertyChanged(IgnoredProperty);
    }
    
    public RaiseAllPropertiesChanged() : void
    {
        RaisePropertyChanged(null); //"null for the propertyName parameter indicates that all of the properties have changed" (http://msdn.microsoft.com/en-us/library/system.componentmodel.propertychangedeventargs.propertyname.aspx)
    }
}

[NotifyPropertyChanged]
public class Student : Person
{
    public Id : uint { get; set; }
}

public module PersonTests
{
    public Run() : void
    {
        def person = Person();
        def eventData = Dictionary();
        person.PropertyChanged += (_, e) => { if (eventData.ContainsKey(e.PropertyName)) eventData[e.PropertyName] += 1 else eventData[e.PropertyName] = 1 }
        
        person.BirthDate = DateTime.Now;
        assert(eventData["Age"] == 1);
        assert(eventData["FullNameAndAge"] == 1);
        assert(!eventData.ContainsKey("BirthDate")); //BirthDate marked with HideSelfChanges option 
        
        eventData.Clear();
        person.IgnoredProperty = "value";
        assert(!eventData.Any());
        
        eventData.Clear();
        person.RaiseIgnoredPropertyChanged();
        assert(eventData["IgnoredProperty"] == 1);
        
        mutable allPropsChanged;
        def person1 = Person();
        person1.PropertyChanged += (_, e) => { allPropsChanged = (e.PropertyName == null) }
        person1.RaiseAllPropertiesChanged();
        assert(allPropsChanged);
        
        eventData.Clear();
        def student = Student();
        student.PropertyChanged += (_, e) => { if (eventData.ContainsKey(e.PropertyName)) eventData[e.PropertyName] += 1 else eventData[e.PropertyName] = 1 };
        student.Id = 123;
        assert(eventData["Id"] == 1);
    }
}