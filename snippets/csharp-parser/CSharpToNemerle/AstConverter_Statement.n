using System;
using SCG = System.Collections.Generic;

using Nemerle.Assertions;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Collections;

using PT = Nemerle.Compiler.Parsetree;
using TT = Nemerle.Compiler.Typedtree;
using PEG = Nemerle.Peg;
using CS = CSharpParser;

namespace CSharpToNemerle
{
  public partial class AstConverter
  {
    ConvertStatement(stmt : CS.Statement) : list[PT.PExpr]
    {
      def loc = stmt |> NLocation;

      match(stmt) {
        | Empty
        | Block([]) =>
          [Util.locate(loc, <[ { } ]>)]

        | Block(stmts) =>
          [ConvertStatements(loc, stmts)]

        | Expression(expr) =>
          def expr = WithIntoExpression(false).ConvertExpr(expr);
          [Util.locate(loc, <[ _ = $expr ]>)]

        | VariableDecl(varType, decls) =>
          decls.Map(
            fun(loc, id : CSharpParser.Identifier, decl) : PT.PExpr
            {
              def name  = ConvertExpr(id);
              def value = ConvertVariableInitializer(varType, decl);

              if (varType == null)
                PT.PExpr.DefMutable(loc |> NLocation, name, value)
              else if (decl == null)
                Util.locate(loc |> NLocation, <[ mutable $name : $(ConvertExpr(varType)); ]>)
              else
                Util.locate(loc |> NLocation, <[ mutable $name : $(ConvertExpr(varType)) = $value; ]>)
            })

        | ConstantDecl(constType, decls) =>
          decls.Map(fun(loc, id, val) {
            def name  = ConvertExpr(id);
            def value = PT.PExpr.TypeEnforcement(constType |> NLocation, ConvertExpr(val), ConvertExpr(constType));
            PT.PExpr.Define(loc |> NLocation, name, value)
          })

        | If(CS.Expr.BinaryOperator(left, right, CS.Identifier where (Id = "is")), trueStmt, falseStmt) =>
          [Util.locate(loc,
          {
            def doElse = match(falseStmt) {
              | null => <[ () ]>
              | _ => ConvertExpr(falseStmt)
            }
            <[
              match($(ConvertExpr(left)))
              {
                | _ is $(ConvertExpr(right)) => $(ConvertExpr(trueStmt))
                | _ => $doElse
              }
            ]>
          })]

        | If(expr, trueStmt, null) =>
          [Util.locate(loc,
            <[
              when($(ConvertExpr(expr)))
                $(WithLastStatement(false).ConvertExpr(trueStmt))
            ]>)]

        | If(expr, trueStmt, falseStmt) =>
          [Util.locate(loc,
            <[
              if($(ConvertExpr(expr)))
                $(ConvertExpr(trueStmt))
              else
                $(ConvertExpr(falseStmt))
            ]>)]

        | Switch as switch =>
          [WithNewSwitchScope().ConvertSwitchStatement(switch)]

        | While(cond, stmt) =>
          Util.locate(loc,
            <[
              while($(ConvertExpr(cond)))
                $(WithLastStatement(false).WithBreakFromLoop(true).ConvertExpr(stmt))
            ]> |> AsVoid)

        | DoWhile(cond, stmt) =>
          Util.locate(loc,
            <[
              do 
                $(WithLastStatement(false).WithBreakFromLoop(true).ConvertExpr(stmt))
              while($(ConvertExpr(cond)))
            ]> |> AsVoid)

        | ForVar(declExprs, cond, change, body)
          with( initExprs = null,
                init = declExprs.decls.FoldLeft([],
                  fun((loc, id, init), acc) {
                    def loc = loc |> NLocation;
                    match(init : CS.VariableInitializer) {
                      | Expr(expr) =>
                        def init = match(declExprs.variableType) {
                          | null  => ConvertExpr(expr)
                          | ty    => PT.PExpr.TypeEnforcement(loc, ConvertExpr(expr), ConvertExpr(ty))
                        }
                        PT.PExpr.DefMutable(loc, ConvertExpr(id), init) :: acc
                      | _ =>
                        Message.Error(loc, "expression expected");
                        acc
                    }
                  }))
        | ForExpr(initExprs, cond, change, body)
          with( declExprs = null,
                init = initExprs.RevMap(ConvertExpr)) =>
          def cond = match(cond) {
            | null  => PT.PExpr.Literal(loc, Literal.Bool(true))
            | _     => ConvertExpr(cond)
          }
          def change = match(change.Map(WithIntoExpression(false).ConvertExpr)) {
            | []    => PT.PExpr.Sequence(loc, [])
            | [x]   => x
            | many  => PT.PExpr.Sequence(many.Head.Location + many.Last.Location, many)
          }
          def body = WithLastStatement(false).WithBreakFromLoop(true).ConvertExpr(body);
          Util.locate(loc,
            (match(init) {
              | []      => <[ Nemerle.Core.@for((), $cond, $change, $body) ]>
              | [init]  => <[ Nemerle.Core.@for($init, $cond, $change, $body) ]>
              | _       =>
                def loop = (<[ Nemerle.Core.@for((), $cond, $change, $body) ]> :: init).Rev();
                <[ { ..$loop } ]>
            }) |> AsVoid
          )

        | Foreach(var, null, expr, body) =>
          Util.locate(loc,
            <[
              foreach($(ConvertExpr(var)) in $(ConvertExpr(expr)))
                $(WithLastStatement(false).WithBreakFromLoop(true).ConvertExpr(body))
            ]> |> AsVoid)

        | Foreach(var, varType, expr, body) =>
          Util.locate(loc,
            <[
              foreach($(ConvertExpr(var)) is $(ConvertExpr(varType)) in $(ConvertExpr(expr)))
                $(WithLastStatement(false).WithBreakFromLoop(true).ConvertExpr(body))
            ]> |> AsVoid)

        | Break when isBreakFromLoop =>
          [Util.locate(loc, <[ Nemerle.Imperative.Break() ]>)]

        | Break => //break from switch
          [Util.locate(loc, <[ () ]>)]

        | Continue =>
          [Util.locate(loc, <[ Nemerle.Imperative.Continue() ]>)]

        | Label(label, stmt) =>
          PT.PExpr.Typed(label |> NLocation,
            TT.TExpr.Label(manager.InternalType.Void, labelScope.DeclareLabel(label),
              TT.TExpr.Literal(manager.InternalType.Void, Literal.Void())))
            :: ConvertStatement(stmt)

        | Goto(label)    with labelId = labelScope.UseLabel(label) 
        | GotoCase(expr) with labelId = switchScope.UseLabel(ConvertExpr(expr))
        | GotoDefault    with labelId = switchScope.UseLabel(PT.PExpr.Wildcard()) =>
          [PT.PExpr.Typed(loc, TT.TExpr.Goto(manager.InternalType.Void, labelId, 1))]

        | Return(null) =>
          [Util.locate(loc, 
            if(isLastStatement)
              <[ { } ]>
            else
              <[ Nemerle.Imperative.Return() ]>)]

        | Return(expr) =>
          if(isLastStatement)
            [ConvertExpr(expr)]
          else
            [Util.locate(loc, <[ Nemerle.Imperative.Return($(ConvertExpr(expr))) ]>)]

        | Throw(null) =>
          [PT.PExpr.Throw(loc, null)]

        | Throw(expr) =>
          [PT.PExpr.Throw(loc, ConvertExpr(expr))]

        | Try(body, [], finallyBlock) =>
          [PT.PExpr.TryFinally(loc, ConvertExpr(body), WithLastStatement(false).ConvertExpr(finallyBlock))]

        | Try(body, catchCases, finallyBlock) =>
          def convertCatchCase(entry) {
            def loc = entry |> NLocation;
            def exnTy = match(entry.ExceptionType) {
              | null  => Util.locate(loc, <[ System.Exception ]>)
              | exnTy => ConvertExpr(exnTy)
            }
            def var = match(entry.Variable) {
              | null => MakeWildcardSplicableName(loc)
              | var  => MakeSplicableName(var)
            }
            PT.TryCase.Catch(loc, var, exnTy, ConvertExpr(entry.Body))
          }

          def tryCatch = PT.PExpr.Try(loc, ConvertExpr(body), catchCases.Map(convertCatchCase));
          [match(finallyBlock) {
            | null => tryCatch
            | _ => PT.PExpr.TryFinally(loc, tryCatch, WithLastStatement(false).ConvertExpr(finallyBlock))
          }]

        | Checked(body, true)   with (macroName = "checked",
                                      expr = ConvertExpr(body))
        | Checked(body, false)  with (macroName = "unchecked",
                                      expr = ConvertExpr(body))
        | YieldReturn(result)   with (macroName = "yield",
                                      expr = ConvertExpr(result))
        | YieldBreak            with (macroName = "yield",
                                      expr = <[ () ]>) =>
          [MakeSpecialMacroCall(loc, macroName, expr)]

        | Lock(expr, body) =>
          [Util.locate(loc, <[ Nemerle.Core.@lock($(ConvertExpr(expr)), $(ConvertExpr(body))) ]>)]

        | UsingVar(VariableDecl(varType, decls), body) =>
          def args = decls.FoldLeft([ConvertExpr(body)],
            fun((loc, id, init), acc) {
              def loc = loc |> NLocation;
              match(init : CS.VariableInitializer) {
                | Expr(expr) =>
                  def init = match(varType) {
                    | null  => ConvertExpr(expr)
                    | _     => PT.PExpr.TypeEnforcement(loc, ConvertExpr(expr), ConvertExpr(varType))
                  }
                  PT.PExpr.Assign(loc, ConvertExpr(id), init) :: acc
                | _ =>
                  Message.Error(loc, "expression expected");
                  acc
              }
            }).Rev();
          [Util.locate(loc, <[ Nemerle.Core.@using(..$args) ]>)]

        | UsingExpr(expr, body) =>
          [Util.locate(loc, <[ Nemerle.Core.@using($(ConvertExpr(body)), $(ConvertExpr(expr))) ]>)]

        | Unsafe with msg = "unsafe code is not supported"
        | Fixed  with msg = "`fixed' statement is not supported"
        | Error(msg) =>
          Message.Error(loc, msg);
          [PT.PExpr.Error(loc)]
      }
    }

    AsVoid(expr : PT.PExpr) : list[PT.PExpr]
    {
      if(isLastStatement)
        [expr, <[ {} ]>]
      else
        [expr]
    }

    ConvertSwitchStatement(statement : CS.Statement.Switch) : PT.PExpr
    {
      def loc = statement |> NLocation;
      def expr = ConvertExpr(statement.expr);

      mutable matchCases1 = [];
      mutable currentEntriesRev = [];
      mutable wasDefault = false;

      foreach(entry in statement.entries)
      {
        currentEntriesRev ::= entry;
        unless(entry.Body.IsEmpty())
        {
          mutable patterns = [];
          foreach(entry in currentEntriesRev)
          {
            | CS.SwitchCaseEntry.Case(id) =>
              patterns ::= ConvertExpr(id);

            | CS.SwitchCaseEntry.Default =>
              wasDefault = true;
              patterns ::= PT.PExpr.Wildcard(entry |> NLocation);
          }
          matchCases1 ::= (patterns, switchScope.DeclareLabel(patterns), entry.Body);
          currentEntriesRev = [];
        }
      }
      unless(wasDefault)
      {
        def loc = expr.Location;
        def patterns = [PT.PExpr.Wildcard(loc)];
        matchCases1 ::= (patterns, 0, [CS.Statement.Block(statement.Location, [])]);
      }

      def matchCases2 = matchCases1.Map(fun(patterns, labelId, stmts)
      {
        // convert inner expressions
        // they possibly can use labels we defined
        (patterns, labelId, ConvertStatements(statement |> NLocation, stmts))
      });

      def matchCases3 = matchCases2.Map(fun(patterns, labelId, expr)
      {
        if(switchScope.IsLabelUsed(labelId))
          PT.MatchCase(patterns,
            PT.PExpr.Sequence([
              PT.PExpr.Typed(patterns.Head.Location,
                TT.TExpr.Label(manager.InternalType.Void, labelId,
                  TT.TExpr.DefaultValue(manager.InternalType.Void))),
              expr ]))
        else
          PT.MatchCase(patterns, expr)
      });

      unless(currentEntriesRev.IsEmpty())
      {
        def x = currentEntriesRev.Last;
        Message.Error(x |> NLocation, $"control cannot fall from one case label `$x' to another");
      }

      Util.locate(loc,
      <[
          match($expr) { ..$(matchCases3.Rev()) }
      ]>)
    }

    ConvertStatements(loc : Location, stmts : list[CS.Statement]) : PT.PExpr
    {
      def mapStatements(_) {
        | []      => []
        | [x]     => ConvertStatement(x)
        | x :: xs => WithLastStatement(false).ConvertStatement(x) + mapStatements(xs)
      }
      match(mapStatements(stmts)) {
        | []  => PT.PExpr.Void(loc)
        | [x] => x
        | xs  => PT.PExpr.Sequence(loc, xs)
      }
    }

    ConvertExpr(stmt : CS.Statement) : PT.PExpr
    {
      match(WithIntoExpression(true).ConvertStatement(stmt)) {
        | []    => PT.PExpr.Void(stmt |> NLocation)
        | [x]   => x
        | many  => PT.PExpr.Sequence(many.Head.Location + many.Last.Location, many)
      }
    }
  }
}