using System;
using System.Console;
using System.Collections.Generic;
using Nemerle.Collections;
using Nemerle.Utility;
using CommonLib.Macros;
using Nemerle.Statechart;

namespace TestFsm
{
    
  class TestFsm
  {        
    mutable cur_state : State;    
    StateNManager : State.NManager;
    StateSub1 : State.Sub1;
    StateSub2 : State.Sub2;
    StateInner : State.Inner;
    StateInner2 : State.Inner2;    
    
    class State
    {
      fsm : TestFsm;

      mutable Sub1instance : State;
      mutable NManagerinstance : State;
      mutable Sub2instance : State;
      mutable Inner2instance : State;
      mutable Innerinstance : State;
      
      [Visibility(Public)]
      
      this(fsm : TestFsm) {this.fsm=fsm;}
      virtual Going() : State {fsm.StateSub1}
      virtual Open() : void {}
      virtual AnotherEvent() : void {}
      virtual AnotherEvent2() : State {NManagerinstance}
      virtual Close() : State {null}
      virtual Switch() : State {null}
      // for deep history
      virtual FromNManagerInitial() : void {null}      
      virtual NManagerSubstate() : State {null}
      
      public class NManager : State
      {                    
        
        [Visibility(Public)]
        this(fsm : TestFsm) {base(fsm);NManagerinstance=this;}                             
        
        override NManagerSubstate() : State {null}
        Exit() : void
        {
          history=fsm.cur_state; // deep
            //history=fsm.cur_state.NManagerSubstate(); // shallow
        }
        
        EnterByHistory() : State
        {
          history.FromNManagerInitial();
          history
        }
        
        override Going() : State {Sub1instance}   
        override AnotherEvent() : void
        {
          fsm.SomeAction();
          fsm.Another();                      
        }
        
        mutable history : State;
      }
              
      public class Sub1 : NManager
      {
        [Visibility(Public)]
        this(fsm : TestFsm) {base(fsm);Sub1instance=this;}
        history : Sub1;             
        
        override NManagerSubstate() : State {this}
        // for deep history
        override FromNManagerInitial() : void
        {
            //fsm.NManagerToSub1InitialTransition(); // entry actions NManager Sub1
            //this
        }
        
        override Going() : State 
        {
            //fsm.Sub1ToSub1Transition();
          Sub1instance
        }   
        
        override Close() : State {NManagerinstance;}    
        override Switch() : State {Sub2instance}          
      }
        
      public class Sub2 : NManager
      {
   // exit sub2, enter sub1
        [Visibility(Public)]        
        this(fsm : TestFsm) {base(fsm);Sub2instance=this;}

        override NManagerSubstate() : State {this}
        override FromNManagerInitial() : void
        {
            //fsm.NManagerToInnerInitialTransition(); // entry actions NManager Sub2 Initial
        }
        
        override Going() : State 
        {
            //fsm.Sub2ToSub1Transition();
          Sub1instance
        }   
    
          // exit sub2, enter sub1        
        override Close() : State 
        {
            
          Sub1instance
        }           
      }
            
      public class Inner2 : Sub1
      {
        [Visibility(Public)]    
        this(fsm : TestFsm) {base(fsm);Inner2instance=this;}                      
        
        override Open() : void
        {
          fsm.SomeAction();
        }
      }
        
      public class Inner : Sub2
      {
// exit inner, exit sub2, enter sub1
    //        // exit inner, exit sub2, enter sub1
    //        override Going() : State {fsm.StateSub1;}
    //        // exit inner, exit sub2, enter sub1, enter inner2
        [Visibility(Public)]        
        this(fsm : TestFsm) {base(fsm);}
        override Close() : State 
        {
          fsm.InnerToSub1Transition();
          Sub1instance;
        }                
        
        override FromNManagerInitial() : void
        {
            //fsm.NManagerToInnerInitialTransition(); // entry actions NManager Sub2 Initial
        }
        
        override Switch() : State 
        {
          fsm.InnerToInner2Transition();
          Inner2instance
        }
      }
    }
        
    InnerToSub1Transition() : void
    {
      Sub1Entry();    
    }
    
    InnerToInner2Transition() : void
    {
      Sub1Entry();    
      OnA();
    }
        
    OnNManagerEntry() : void
    {
      event_call NManagerEntry;
    }
      
    OnAction2() : void
    {
      event_call Action2Action;
    }
    
    Sub1Entry() : void
    {
      Onbegin();
      Onstart();
      Oninit();        
    }
    
    Onbegin() : void
    {
      event_call beginAction;
    }
    
    Onstart() : void
    {
      event_call startAction;
    }
    
    Oninit() : void
    {
      event_call initAction;
    }
    
    OnA() : void
    {
      event_call AAction;
    }
    
    SomeAction() : void
    {
      event_call SomeActionAction;
    }
    
    Another() : void
    {
      event_call AnotherAction;
    }       
            
    RunEvent1(evt : Event) : void
    {
      match (evt)
      {
        |Going => Going()
        |Open => Open()
        |Close => Close()
        |Switch => Switch()
        |AnotherEvent => AnotherEvent()
        |AnotherEvent2 => AnotherEvent2()
      }        
    }

    RunEvent2(evt : Event) : void
    {
      //evt_map[evt :> int]();
    }
    
    evt_map : array[void -> void];
    
    [Visibility(Public)]
    
    this()
    {
      StateNManager=State.NManager(this);
      StateSub1=State.Sub1(this);
      StateSub2=State.Sub2(this);
      StateInner=State.Inner(this);
      StateInner2=State.Inner2(this);      
      evt_map=array[Going,Open,Close,Switch,AnotherEvent,AnotherEvent2];      
    }
        
    Going() : void {cur_state=cur_state.Going();}
    Open() : void {cur_state.Open();}
    AnotherEvent() : void {cur_state.AnotherEvent();}
    AnotherEvent2() : void {cur_state=cur_state.AnotherEvent2();}
    Close() : void {cur_state=cur_state.Close();}
    Switch() : void {cur_state=cur_state.Switch();}
      
    event NManagerEntry : EventHandler;
    event Action2Action : EventHandler;    
    event initAction : EventHandler;
    event beginAction : EventHandler;
    event startAction : EventHandler;
    event AAction : EventHandler;
    event SomeActionAction : EventHandler;
    event AnotherAction : EventHandler;
    
    public variant Event
    {
      | Going {override Exec() : void {fsm.Going();}}
      | Open {override Exec() : void {fsm.Open();}}
      | Close {override Exec() : void {fsm.Close();}}
      | Switch {override Exec() : void {fsm.Switch();}}
      | AnotherEvent {override Exec() : void {fsm.AnotherEvent();}}
      | AnotherEvent2 {override Exec() : void {fsm.AnotherEvent2();}}
        
      public virtual Exec() : void {}
      
      public mutable fsm : TestFsm;
    }       
        
    IsInState(st : State) : bool
    {
        cur_state is st
    }
    
    Process(evt : Event) : void
    {   
      evt.fsm=this;
      evt.Exec();
      //RunEvent1(evt)
    }             
    
    Initiate() : void 
    {
      OnNManagerEntry();
      cur_state=StateNManager;
    }
    
  }
 

}