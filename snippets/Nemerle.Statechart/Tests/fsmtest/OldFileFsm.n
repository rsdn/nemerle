using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Sanford.StateMachineToolkit;
using System;
using System.Collections.Generic;
using System.Linq;
using CommonLib.Fsm;

namespace Nemerle.Statechart.Tests
{

    public enum StateID
    {
        //| Files
        | Waiting
        //| Opened
        | NotSaved
        | New
        | Changed
        | Saved
        | NotNeedSave
    };

    public enum EventID
    {
        | Changed
        | NewFile
        | OpenFile
        | SaveFile

        //===========
        //evt_Final,
        | evt_Completion
    };

    //[DebuggerDisplay("State = {CurrentStateID}")]
    public class OldFileFsm : StateMachine[StateID,EventID]
    {
                
        public this()
        {            
            this[StateID.Waiting].EntryHandler+=FileFsm_WaitingEntryHandler;
            this[StateID.NotSaved].EntryHandler += FileFsm_NotSavedEntryHandler;
            this[StateID.New].EntryHandler += FileFsm_NewEntryHandler;
            this[StateID.Changed].EntryHandler += FileFsm_ChangedEntryHandler;
            this[StateID.Saved].EntryHandler += FileFsm_SavedEntryHandler;
            //this[StateID.SavingNew].EntryHandler+= FileFsm_SavingEntryHandler;
            //this[StateID.NewDialog].EntryHandler += FileFsm_NewDialogEntryHandler;
            //this[StateID.SaveFile].EntryHandler += FileFsm_SaveFileEntryHandler;
            //this[StateID.SaveFileAs].EntryHandler += FileFsm_SaveFileAsEntryHandler;
            //this[StateID.SavingOpen].EntryHandler += FileFsm_SavingEntryHandler;
            //this[StateID.OpenDialog].EntryHandler += FileFsm_OpenDialogEntryHandler;
            //this[StateID.SaveClose].EntryHandler += FileFsm_SavingEntryHandler;
            //this[StateID.Opened].EntryHandler += FileFsm_OpenedEntryHandler;
            //this[StateID.Closed].EntryHandler += FileFsm_ExitedEntryHandler;            
            //SetupSubstates(StateID.Files, HistoryType.None, StateID.NotNeedSave, StateID.NotSaved);
            //SetupSubstates(StateID.Opened, HistoryType.None, StateID.NotSaved, StateID.Saved);
            SetupSubstates(StateID.NotSaved, HistoryType.None, StateID.New, StateID.Changed);
            SetupSubstates(StateID.NotNeedSave, HistoryType.None, StateID.Saved, StateID.Waiting);
            //SetupSubstates(StateID.Processing, HistoryType.None, 
            //    StateID.CreatingNew,
            //    StateID.SaveFile,
            //    StateID.SaveFileAs,
            //    StateID.OpeningFile,
            //    StateID.Closing
            //    );            
            //SetupSubstates(StateID.CreatingNew, HistoryType.None, StateID.SavingNew, StateID.NewDialog);
            //SetupSubstates(StateID.OpeningFile, HistoryType.None, StateID.SavingOpen,StateID.OpenDialog);
            //SetupSubstates(StateID.Closing, HistoryType.None, StateID.SaveClose,StateID.Closed);

            AddTransition(StateID.Saved, EventID.Changed, StateID.Changed);
            AddTransition(StateID.Saved, EventID.SaveFile,StateID.Saved);
            AddTransition(StateID.NotSaved, EventID.SaveFile,StateID.NotNeedSave);
            AddTransition(StateID.NotSaved, EventID.OpenFile, StateID.NotNeedSave);
            //AddTransition(StateID.Files, EventID.OpenFile, StateID.OpeningFile);
            AddTransition(StateID.NotNeedSave, EventID.NewFile, StateID.NotSaved);
            AddTransition(StateID.NotNeedSave, EventID.OpenFile,StateID.NotNeedSave);
            AddTransition(StateID.NotSaved,EventID.NewFile, StateID.NotSaved);
            //AddTransition(StateID.Files, EventID.NewFile, StateID.Processing);
            //AddTransition(StateID.SavingNew, EventID.evt_Completion, StateID.NewDialog);
            //AddTransition(StateID.CreatingNew, EventID.evt_Completion, StateID.Opened);
            //AddTransition(StateID.Processing, EventID.Cancel, StateID.Files);
            //AddTransition(StateID.Processing, EventID.evt_Completion, StateID.Saved);
            //AddTransition(StateID.SavingOpen, EventID.evt_Completion, StateID.OpenDialog);
            //AddTransition(StateID.SaveClose, EventID.evt_Completion, StateID.Closed);
            //AddTransition(StateID.Files, EventID.Exit, StateID.Closing);
            //CurWantToSave = WantToSaveString;
            //CurOverwrite = WantToOverwriteString;
            base.TransitionCompleted += FileFsm_TransitionCompleted;
        }

        FileFsm_ExitedEntryHandler(_ : object, _ : TransitionEventArgs[StateID, EventID, EventArgs]) : void
        {
            OnExitAction();
        }

        FileFsm_OpenedEntryHandler(_ : object, _ : TransitionEventArgs[StateID, EventID, EventArgs]) : void
        {
            when (SaveAsEna != null) SaveAsEna();
            OnOpenedEntry();
        }

        OnOpenedEntry() : void
        {
            when (OpenedEntry != null) OpenedEntry();
        }

        FileFsm_SaveFileAsEntryHandler(_ : object, _ : TransitionEventArgs[StateID, EventID, EventArgs]) : void
        {
            //SaveAsDialog();
        }

        FileFsm_SavedEntryHandler(_ : object, _ : TransitionEventArgs[StateID, EventID, EventArgs]) : void
        {
            //LastSavedFile = CurFile;
            when (SaveDis != null) SaveDis();
            when (SavedEntry != null) SavedEntry();            
        }

        FileFsm_ChangedEntryHandler(_ : object, _ : TransitionEventArgs[StateID, EventID, EventArgs]) : void
        {
            when (ChangedEntry != null) ChangedEntry();
        }

        FileFsm_NewEntryHandler(_ : object, _ : TransitionEventArgs[StateID, EventID, EventArgs]) : void
        {            
            when (NewEntry != null) NewEntry();
            //LastSavedFile = "";
        }

        FileFsm_NotSavedEntryHandler(_ : object, _ : TransitionEventArgs[StateID, EventID, EventArgs]) : void
        {
            when (SaveEna != null) SaveEna();
        }

        FileFsm_WaitingEntryHandler(_ : object, _ : TransitionEventArgs[StateID, EventID, EventArgs]) : void
        {
            when (SaveDis != null) SaveDis();
            when (SaveAsDis != null) SaveAsDis();
            when (WaitEntry != null) WaitEntry();
        }

        FileFsm_OpenDialogEntryHandler(_ : object, _ : TransitionEventArgs[StateID, EventID, EventArgs]) : void
        {
            //DialogResult res;
            //res = ViewOpenDialog();
            //when (res == DialogResult.Cancel)
            //{
            //    CancelEvent();
            //    return;
            //}
            //CurFile = OpenDialog.FileName;
            //when (OpenFileAction != null)
            //{
            //    CompleteOrCancel(OpenFileAction(CurFile));
            //}
            //else throw new InvalidOperationException();
            
        }

        FileFsm_SaveFileEntryHandler(_ : object, _ : TransitionEventArgs[StateID, EventID, EventArgs]) : void
        {
            //DoSaveFile();
        }

        FileFsm_NewDialogEntryHandler(_ : object, _ : TransitionEventArgs[StateID, EventID, EventArgs]) : void
        {
            //when (NewFileAction != null)
            //{                
            //    CompleteOrCancel(NewFileAction());                
            //}
            //else Completion();
        }


        FileFsm_SavingEntryHandler(_ : object, _ : TransitionEventArgs[StateID, EventID, EventArgs]) : void
        {
           // DoSaving();
        }

        //void DoSaving()
        //{
        //    DialogResult res;
        //    when (IsNeedSave)
        //    {
        //        res = ViewWantToSave();
        //        when (res == DialogResult.Cancel)
        //        {
        //            CancelEvent();
        //            return;
        //        }
        //        when (res == DialogResult.Yes)
        //        {
        //            DoSaveFile();
        //        }
        //        else Completion();
        //    }
        //    else Completion();
        //}

        //void DoSaveFile()
        //{
        //    DialogResult res;
        //    when (IsNewFile)
        //    {
        //        SaveAsDialog();
        //    }
        //    else
        //    {
        //        res = ViewOverwrite();
        //        when (res == DialogResult.Cancel)
        //        {
        //            CancelEvent();
        //            return;
        //        }
        //        when (res == DialogResult.Yes)
        //        {
        //            CurFile = LastSavedFile;
        //            SaveCurrentFile();
        //        }
        //        else
        //            SaveAsDialog();
        //    }
        //}

        OnExitAction() : void
        {
            when (ExitAction != null) ExitAction();
        }

        //CompleteOrCancel(val : bool) : void
        //{
        //    if (val) Completion(); else CancelEvent();
        //}

        SaveCurrentFile(): void
        {
            when (SaveFileAction != null)
            {
                //CompleteOrCancel(SaveFileAction(CurFile));                
            }
            //else Completion();
        }

        //SaveAsDialog(): void
        //{
        //    DialogResult res;
        //    SaveDialog.FileName = CurFile;
        //    res = ViewSaveAsDialog();
        //    if (res == DialogResult.OK)
        //    {
        //        CurFile = SaveDialog.FileName;
        //        SaveCurrentFile();
        //    }
        //    else CancelEvent();
        //}

        //CancelEvent() : void
        //{            
        //    base.Send(EventID.Cancel);
        //}

        Completion() : void
        {       
            base.Send(EventID.evt_Completion);                        
        }

        FileFsm_TransitionCompleted(_ : object,_ : TransitionCompletedEventArgs[StateID, EventID, EventArgs]): void
        {
            base.Execute();
        }

        FileFsm_TransitionDeclined(_ : object,e : TransitionEventArgs[StateID, EventID, EventArgs]) : void
        {
            base.Execute();
        }

        //public const string WantToSaveString = "Вы не сохранили текущий файл, Хотите сохранить?";
        //public const string WantToOverwriteString = "Файл будет перезаписан, вы уверены?";
        /// <summary>
        /// текущая строка хотите сохранить текущий файл
        /// </summary>
        //public string CurWantToSave { get; set; }
        ///// <summary>
        ///// текущая строка хотите перезаписать
        ///// </summary>
        //public string CurOverwrite { get; set; }

        ///// <summary>
        ///// текущий диалог сохранения
        ///// </summary>
        //public SaveFileDialog SaveDialog { get; set; }
        ///// <summary>
        ///// текущий диалог открытия
        ///// </summary>
        //public OpenFileDialog OpenDialog { get; set; }

        ///// <summary>
        ///// текущий файл из диалога
        ///// </summary>
        //public string CurFile { get; private set; }

        ///// <summary>
        ///// последний сохраненный файл
        ///// </summary>
        //public string LastSavedFile { get; private set; }

        //DialogResult ViewOpenDialog()
        //{
        //    when (OpenDialog != null)
        //        return OpenDialog.ShowDialog();
        //    else throw new InvalidOperationException();
        //}

        //DialogResult ViewWantToSave()
        //{
        //    DialogResult res=MessageBox.Show(CurWantToSave, "Предупреждение", MessageBoxButtons.YesNoCancel);
        //    return res;
        //}

        //DialogResult ViewSaveAsDialog()
        //{
        //    when (SaveDialog != null)
        //        return SaveDialog.ShowDialog();
        //    else throw new InvalidOperationException();
        //}

        //DialogResult ViewOverwrite()
        //{
        //    return MessageBox.Show(CurOverwrite, "Предупреждение", MessageBoxButtons.YesNoCancel);
        //}


        public Init() : void
        {
            Initialize(StateID.Waiting);
        }

        public IsNeedSave : bool
        {
            get
            {                       
                base.IsInState(StateID.NotSaved);
            }
        }

        /// <summary>
        /// показывает что файл новый или открыт
        /// </summary>
        //public IsOpened : bool
        //{
        //    get
        //    {
        //        base.IsInState(StateID.Opened);
        //    }
        //}

        IsNewFile : bool
        {
            get
            {                
                CurrentStateID == StateID.New;
            }
        }

        //public IsClosed : bool
        //{
        //    get
        //    {
        //        base.IsInState(StateID.Closing);//CurrentStateID == StateID.Closed;
        //    }
        //}

        public event SaveFileAction : System.Func[string,bool];
        public event NewFileAction : System.Func[bool];
        public event OpenFileAction : System.Func[string,bool];

        public event SaveAsEna : Action;
        public event SaveAsDis : Action;
        public event SaveDis : Action;
        public event SaveEna : Action;
        public event ChangedEntry : Action;
        public event NewEntry : Action;
        public event SavedEntry : Action;
        public event WaitEntry : Action;
        public event OpenedEntry : Action;

        public event ExitAction : Action;
				
    }


}
