using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Sanford.StateMachineToolkit;
using System;
using System.Collections.Generic;
using System.Linq;
using CommonLib.Fsm;

namespace Nemerle.Statechart.Tests
{

    public enum StateID
    {
        |  Waiting
        |  NotSaved
        |  New
        |  Changed
        |  Saved
        |  NotNeedSave
    };

    public enum EventID
    {
        |  Changed
        |  NewFile
        |  OpenFile
        |  SaveFile
        |  evt_Completion
    };

    public class OldFileFsm : StateMachine[StateID, EventID]
    {
                
        public this()
        {            
            this[StateID.Waiting].EntryHandler += FileFsm_WaitingEntryHandler;
            this[StateID.NotSaved].EntryHandler += FileFsm_NotSavedEntryHandler;
            this[StateID.New].EntryHandler += FileFsm_NewEntryHandler;
            this[StateID.Changed].EntryHandler += FileFsm_ChangedEntryHandler;
            this[StateID.Saved].EntryHandler += FileFsm_SavedEntryHandler;
            SetupSubstates(StateID.NotSaved, HistoryType.None, StateID.New, StateID.Changed);
            SetupSubstates(StateID.NotNeedSave, HistoryType.None, StateID.Saved, StateID.Waiting);

            AddTransition(StateID.Saved, EventID.Changed, StateID.Changed);
            AddTransition(StateID.Saved, EventID.SaveFile, StateID.Saved);
            AddTransition(StateID.NotSaved, EventID.SaveFile, StateID.NotNeedSave);
            AddTransition(StateID.NotSaved, EventID.OpenFile, StateID.NotNeedSave);
            AddTransition(StateID.NotNeedSave, EventID.NewFile, StateID.NotSaved);
            AddTransition(StateID.NotNeedSave, EventID.OpenFile, StateID.NotNeedSave);
            AddTransition(StateID.NotSaved, EventID.NewFile, StateID.NotSaved);
            base.TransitionCompleted += FileFsm_TransitionCompleted;
        }

        FileFsm_SavedEntryHandler(_ : object, _ : TransitionEventArgs[StateID, EventID, EventArgs]) : void
        {
            when (SaveDis  != null) SaveDis();
            when (SavedEntry  != null) SavedEntry();            
        }

        FileFsm_ChangedEntryHandler(_ : object, _ : TransitionEventArgs[StateID, EventID, EventArgs]) : void
        {
            when (ChangedEntry != null) ChangedEntry();
        }

        FileFsm_NewEntryHandler(_ : object, _ : TransitionEventArgs[StateID, EventID, EventArgs]) : void
        {            
            when (NewEntry != null) NewEntry();            
        }

        FileFsm_NotSavedEntryHandler(_ : object, _ : TransitionEventArgs[StateID, EventID, EventArgs]) : void
        {
            when (SaveEna != null) SaveEna();
        }

        FileFsm_WaitingEntryHandler(_ : object, _ : TransitionEventArgs[StateID, EventID, EventArgs]) : void
        {
            when (SaveDis != null) SaveDis();
            when (SaveAsDis != null) SaveAsDis();
            when (WaitEntry != null) WaitEntry();
        }

        FileFsm_TransitionCompleted(_ : object, _ : TransitionCompletedEventArgs[StateID, EventID, EventArgs]): void
        {
            base.Execute();
        }

        public Init() : void
        {
            Initialize(StateID.Waiting);
        }

        public IsNeedSave : bool
        {
            get
            {                       
                base.IsInState(StateID.NotSaved);
            }
        }


        IsNewFile : bool
        {
            get
            {                
                CurrentStateID == StateID.New;
            }
        }


        public event SaveFileAction : System.Func[string, bool];
        public event NewFileAction : System.Func[bool];
        public event OpenFileAction : System.Func[string, bool];

        public event SaveAsEna : Action;
        public event SaveAsDis : Action;
        public event SaveDis : Action;
        public event SaveEna : Action;
        public event ChangedEntry : Action;
        public event NewEntry : Action;
        public event SavedEntry : Action;
        public event WaitEntry : Action;
        public event OpenedEntry : Action;

        public event ExitAction : Action;
				
    }


}
