using System;
using System.Console;
using System.Collections.Generic;
using System.Threading;
using Nemerle.Collections;
using Nemerle.Utility;
using System.Diagnostics;
using Nemerle.Statechart;


namespace Nemerle.Statechart.Tests {
      
  using FileFsm;
  using FileFsm.Event;
  using FileFsm.State;
  
  class Test
  {       
    rand : Random = Random(123456789);
    
    mutable events : list[int];
    
    CreateEvents(count : int) : void
    {              
      def loop(count, lst : list[int])
      {
        if (count == 0) lst else
        {
          def idx = rand.Next(4);
          loop(count-1, idx :: lst)
        }
      }
       
      events = loop(count, []);
    }
    
    public ExtLibDiffTest() : TimeSpan * TimeSpan
    {
      def create_fsm_events(evt)
      {               
        match (evt)
        {
          | "New" => Event.НовыйФайл
          | "Open" => Event.ОткрытФайл
          | "Save" => Event.Сохранение
          | "Change" => Event.Изменение
          | _ => Event.Изменение
        }
      }

      def create_old_fsm_events(evt)
      {                
        match (evt)
        {
          | "New" => EventID.NewFile
          | "Open" => EventID.OpenFile
          | "Save" => EventID.SaveFile
          | "Change" 
          |  _ => EventID.Changed
        }
      }
        
      CreateEvents(30000);       
      def fsm = FileFsm();
      def old_fsm = OldFileFsm();
      def ev = array["New", "Open", "Save", "Change"]; 
      def events = events.Map(x => ev[x]);
      def fsm_evt = events.Map(create_fsm_events);
      def old_fsm_evt = events.Map(create_old_fsm_events);      
      fsm.Initiate();       
      old_fsm.Init();
      def watch = Stopwatch(); 
      watch.Start();
      old_fsm_evt.Iter(x => old_fsm.SendAndExec(x));
      watch.Stop();
      def span2 = watch.Elapsed;
      watch.Reset();
      watch.Start();
      fsm_evt.Iter(x => fsm.RunEvent(x));
      watch.Stop();
      def span = watch.Elapsed;                  
      (span, span2)         
    }
    
    public IsInStateTest() : bool
    {            
      mutable res = true; 
      def fsm = FileFsm();
      
      def is_in_state(st)
      {
        res = res && fsm.IsInState(st);      
      }

      def not_in_state(st)
      {
        res = res && !fsm.IsInState(st);
      }
      
      fsm.Initiate();
      is_in_state(Ожидание.Instance);
      is_in_state(НенужноСохранение.Instance);            
      fsm.Новый();
      is_in_state(Новый.Instance);                  
      is_in_state(НужноСохранение.Instance);            
      fsm.Изменение();
      is_in_state(Новый.Instance);
      fsm.Сохранение();
      is_in_state(Сохранен.Instance);                  
      is_in_state(НенужноСохранение.Instance);                  
      fsm.Изменение();
      is_in_state(Измененный.Instance);     
      not_in_state(Ожидание.Instance);
      fsm.Сохранение();
      is_in_state(Сохранен.Instance);
      fsm.ОткрытФайл();
      is_in_state(Сохранен.Instance);
      is_in_state(НенужноСохранение.Instance);      
      res
    }
    
    Write(str : string, _ : object, _ : EventArgs) : void
    {
      WriteLine(str);
    }
    
    CoverTest() : void
    {
      def fsm = PathCoverFsm();
      fsm.activity1+= _ => {while (true) {Console.WriteLine("Do activity !!!");Thread.Sleep(1000)}};      
      fsm.AEntry+= Write("A entry", _, _);
      fsm.AExit+= Write("A exit", _, _);
      fsm.BEntry+= Write("B entry", _, _);
      fsm.BExit+= Write("B exit", _, _);
      fsm.CEntry+= Write("C entry", _, _);
      fsm.CExit+= Write("C exit", _, _);
      fsm.DEntry+= Write("D entry", _, _);
      fsm.DExit+= Write("D exit", _, _);
      fsm.EEntry+= Write("E entry", _, _);
      fsm.EExit+= Write("E exit", _, _);        
      WriteLine("Beginning Statechart test...");	
      fsm.Initiate();	
      
	// Internal transition.
      WriteLine("Processing an 'a'");	
      fsm.a();	

	// 
      WriteLine("Processing an 'g'");	
      fsm.g();	
      
	// Testing simple-to-simple transition.
      WriteLine("Processing a 'b'");	
      fsm.b();

	// Testing simple-to-composite transition
	// (transition to outermost state).
      WriteLine("Processing a 'j'");
      fsm.j();

	// Testing simple-to-simple, via composite.
      WriteLine("Processing a 'd'");
      fsm.d();

	// Testing for no match.
      WriteLine("Processing an 'a'");
      fsm.a();

	// Testing simple to (non-ancestor) composite.
      WriteLine("Processing an 'e'");
      fsm.e();

	// Testing simple-to-simple transition again.
      WriteLine("Processing a 'b'");
      fsm.b();

	// Testing simple-to-simple, across ancestor.
      WriteLine("Processing an 'i'");
      fsm.i();

	// Testing simple-to-composite with history.
      WriteLine("Processing a 'g'");
      fsm.g();

	// Get back to state C.
      WriteLine("Processing an 'e'");
      fsm.e();

	// Testing composite-to-composite transition.
      WriteLine("Processing a 'f'");
      fsm.f();

	// Testing simple to sibling simple via composite transition.
      WriteLine("Processing a 'c'");
      fsm.c();

      WriteLine("Processing a 'g'");
      fsm.g();
      
	// Testing composite-to-composite transition.
      WriteLine("Processing a 'k'");
      fsm.k();
	
	// Testing transition to self, but leaving the state.
      WriteLine("Processing an 'm'");
      fsm.m();

	// Get to state D.
      WriteLine("Processing a 'd'");
      fsm.d();

	// Test going to non-ancestor composite with history (and
	// returning to the same state).
      WriteLine("Processing an 'n'");
      fsm.n();

	// Get us to state E, then D.
      WriteLine("Processing a 'b'");
      fsm.b();
	
      WriteLine("Processing a 'i'");
      fsm.i();

	// Now, test returning with history to a non-default state.
      WriteLine("Processing an 'n'");
      fsm.n();

      WriteLine("Leaving test.");
      fsm.Terminate();  
    }
    
    public Run() : void
    {      
      def (span, span2) = ExtLibDiffTest();
      CoverTest();
      WriteLine($"time1:$span, time2: $span2, diff: {0} times", (span2.Ticks : double) / span.Ticks);
      def res = IsInStateTest();  
      def res = if (res)  "passed!!!" else "not passed. :(";
      WriteLine($"File fsm test $res");
    }
  }
  
  module Program
  {
    
    
    
    Main() : void
    {
      def test = Test();
      test.Run();     
      _ = ReadLine();
    }
  }
}
