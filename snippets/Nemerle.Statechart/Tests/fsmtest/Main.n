using System;
using System.Console;
using System.Collections.Generic;
using System.Threading;
using Nemerle.Collections;
using Nemerle.Utility;
using System.Diagnostics;
using Nemerle.Statechart;


namespace Nemerle.Statechart.Tests {
      
  using FileFsm;
  using FileFsm.Event;
  using FileFsm.State;
    
  class Test
  {       
    rand : Random = Random(123456789);
    test_events_count = 50000;
    
    mutable events : list[int];
    
    CreateEvents(count : int) : void
    {              
      def loop(count, lst : list[int])
      {
        if (count == 0) lst else
        {
          def idx = rand.Next(4);
          loop(count-1, idx :: lst)
        }
      }
       
      events = loop(count, []);
    }
    
    public ExtLibDiffTest() : TimeSpan * TimeSpan
    {
      def create_fsm_events(evt)
      {               
        match (evt)
        {
          | "New" => Event.NewFile
          | "Open" => Event.OpenFile
          | "Save" => Event.Save
          | "Change" => Event.Change
          | _ => Event.Change
        }
      }

      def create_old_fsm_events(evt)
      {                
        match (evt)
        {
          | "New" => EventID.NewFile
          | "Open" => EventID.OpenFile
          | "Save" => EventID.SaveFile
          | "Change" 
          |  _ => EventID.Changed
        }
      }
      
      WriteLine($"Creating $test_events_count events...");
      CreateEvents(test_events_count);       
      def fsm = FileFsm();
      def old_fsm = OldFileFsm();
      def ev = array["New", "Open", "Save", "Change"]; 
      def events = events.Map(x => ev[x]);
      def fsm_evt = events.Map(create_fsm_events);
      def old_fsm_evt = events.Map(create_old_fsm_events);
      fsm.Initiate();
      old_fsm.Init();
      WriteLine("Sending to old lib fsm");
      def watch = Stopwatch();
      watch.Start();
      old_fsm_evt.Iter(old_fsm.SendAndExec(_));
      watch.Stop();
      def span2 = watch.Elapsed;
      WriteLine("Sending to new lib fsm");
      watch.Reset();
      watch.Start();
      fsm_evt.Iter(fsm.RunEvent(_));
      watch.Stop();
      def span = watch.Elapsed;                  
      (span, span2)         
    }
    
    public IsInStateTest() : bool
    {            
      mutable res = true; 
      def fsm = FileFsm();
      
      def is_in_state(st)
      {
        res = res && fsm.IsInState(st);      
      }

      def not_in_state(st)
      {
        res = res && !fsm.IsInState(st);
      }
      
      fsm.Initiate();      
      is_in_state(Waiting());
      is_in_state(NotNeedSaving());
      fsm.NewFile();
      is_in_state(New());                  
      is_in_state(NeedSaving());            
      fsm.Change();
      is_in_state(New());
      fsm.Save();      
      is_in_state(Saved());                  
      is_in_state(NotNeedSaving());                  
      fsm.Change();
      is_in_state(Changed());     
      not_in_state(Waiting());
      fsm.Save();
      is_in_state(Saved());
      fsm.OpenFile();
      is_in_state(Saved());
      is_in_state(NotNeedSaving());
      fsm.Exit();
      res = res && fsm.IsTerminated;
      res
    }
        
    CoverTest() : void
    {
      def fsm = PathCoverFsm();
      fsm.activity1+= tok => 
                            {         
                            while (!tok.IsCancellationRequested)
                            {
                              Console.WriteLine("Do activity !!!");
                              Thread.Sleep(1000);
                            }
                           };      
      fsm.AEntry+= () => WriteLine("A entry");
      fsm.AExit+= () => WriteLine("A exit");
      fsm.BEntry+= () => WriteLine("B entry");
      fsm.BExit+= () => WriteLine("B exit");
      fsm.CEntry+= () => WriteLine("C entry");
      fsm.CExit+= () => WriteLine("C exit");
      fsm.DEntry+= () => WriteLine("D entry");
      fsm.DExit+= () => WriteLine("D exit");
      fsm.EEntry+= () => WriteLine("E entry");
      fsm.EExit+= () => WriteLine("E exit");        
      WriteLine("Beginning Statechart test...");	
      fsm.Initiate();	      
      
	// Internal transition.
      WriteLine("Processing an 'a'");	
      fsm.a();	

	// 
      WriteLine("Processing an 'g'");	
      fsm.g();	
      
	// Testing simple-to-simple transition.
      WriteLine("Processing a 'b'");	
      fsm.b();

	// Testing simple-to-composite transition
	// (transition to outermost state).
      WriteLine("Processing a 'j'");
      fsm.j();

	// Testing simple-to-simple, via composite.
      WriteLine("Processing a 'd'");
      fsm.d();

	// Testing for no match.
      WriteLine("Processing an 'a'");
      fsm.a();

	// Testing simple to (non-ancestor) composite.
      WriteLine("Processing an 'e'");
      fsm.e();

	// Testing simple-to-simple transition again.
      WriteLine("Processing a 'b'");
      fsm.b();

	// Testing simple-to-simple, across ancestor.
      WriteLine("Processing an 'i'");
      fsm.i();

	// Testing simple-to-composite with history.
      WriteLine("Processing a 'g'");
      fsm.g();

	// Get back to state C.
      WriteLine("Processing an 'e'");
      fsm.e();

	// Testing composite-to-composite transition.
      WriteLine("Processing a 'f'");
      fsm.f();

	// Testing simple to sibling simple via composite transition.
      WriteLine("Processing a 'c'");
      fsm.c();

      WriteLine("Processing a 'g'");
      fsm.g();
      
	// Testing composite-to-composite transition.
      WriteLine("Processing a 'k'");
      fsm.k();
	
	// Testing transition to self, but leaving the state.
      WriteLine("Processing an 'm'");
      fsm.m();

	// Get to state D.
      WriteLine("Processing a 'd'");
      fsm.d();

	// Test going to non-ancestor composite with history (and
	// returning to the same state).
      WriteLine("Processing an 'n'");
      fsm.n();

	// Get us to state E, then D.
      WriteLine("Processing a 'b'");
      fsm.b();
	
      WriteLine("Processing a 'i'");
      fsm.i();

	// Now, test returning with history to a non-default state.
      WriteLine("Processing an 'n'");
      fsm.n();

      WriteLine("Leaving test.");
      fsm.Terminate();  
    }
    
    public Run() : void
    {      
      def (span, span2) = ExtLibDiffTest();
      CoverTest();
      WriteLine($"Diff result of process two fsms $test_events_count events");
      WriteLine($"process time: old: $span2, new: $span, diff: {0:F4} times", (span2.Ticks : double) / span.Ticks);
      WriteLine("event send time average: old: {0} ticks, new: {1} ticks", (span2.Ticks : double) / test_events_count, (span.Ticks : double) / test_events_count);
      def res = IsInStateTest();  
      def res = if (res) "passed!!!" else "not passed. :(";
      WriteLine($"File fsm test $res");
    }
  }
  
  module Program
  {
            
    Main() : void
    {
      def test = Test();
      test.Run();     
      _ = ReadLine();
    }
  }
}
