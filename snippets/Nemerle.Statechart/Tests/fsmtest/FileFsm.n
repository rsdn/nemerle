using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
//using Nemerle.Imperative;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;
using Nemerle.Statechart;

namespace Nemerle.Statechart.Tests
{
  [statechart(<#

  flags : auto_initial transition_completed_events debug;

  0 => Ожидание;

  state НенужноСохранение
  {

      $> / СохранениеВыкл;
            
      НовыйФайл => НужноСохранение;
      ОткрытФайл =>@;
      Выход => X;
      
      state Сохранен
      {
          $> / НадписьИмяФайла ПоследнийФайлТек;
          Сохранение =>@;
          Изменение => Измененный;
      }

      state Ожидание
      {
          $> / СохранениеВсеВыкл НадписьНазваниеПрограммы;
          $< / СохранениеКакВкл;
      }

  }

  state НужноСохранение
  {
      $> / СохранениеВкл;
      ОткрытФайл, Сохранение => НенужноСохранение;
      НовыйФайл =>@;
      Выход => X;
      
      state Новый
      {
          $> / НадписьФайл ПоследнийФайлПустой;
      }

      state Измененный
      {
          $> / НадписьИзменен;
      }

  }

  X;
  #>
  )]
  public class FileFsm
  {
    [ActionFor(ПоследнийФайлТек)]
    LastFileCur() : void
    {
      LastSaved = CurFile;
    }

    [ActionFor(ПоследнийФайлПустой)]
    LastFileEmpty() : void
    {
      LastSaved = "";
    }

    [Constructor]
    Init() : void
    {
      OpenDialog = OpenFileDialog();
      SaveDialog = SaveFileDialog();
      CurWantToSave = "Хотите сохранить файл?";
      CurOverwrite = "Хотите перезаписать файл?";
    }

    ViewOpenDialog() : DialogResult
    {
      OpenDialog.ShowDialog();
    }

    ViewSaveAsDialog() : DialogResult
    {
      SaveDialog.ShowDialog();
    }

    ViewNewDialog() : bool
    {
      if (NewDialog!= null) NewDialog(); else true
    }
      /*
         final : result
         exit : false
         cancel => exit
         initial
         {
             need_save => view_want_to_save
             else => final
         }
         view_want_to_save
         {
             no => final
             yes => junction
         }
         junction
         {
             new_file => view_save_as
             exist => want_to_overwrite
         }
         view_save_as
         {
             ok => junction2
         }
         want_to_overwrite
         {
             yes => junction2
             no => view_save_as
         }
         junction2 /save => final

        */

    // TODO: язык описания кондиционной логики простой
    ОткрытиеДиалога() : bool
    {
      def check_need_save()
      {
        if (IsNeedSave) DoSaving() else true
      }
      break :
      {
        when (!check_need_save()) break(false);
        def answ = ViewOpenDialog();
        when (answ != DialogResult.OK) break(false);
        CurFile = OpenDialog.FileName;
        when (OpenFileAction == null) break(true);
        OpenFileAction(CurFile);
      }
    }

    НовыйДиалог() : bool
    {
      def check_need_save()
      {
        if (IsNeedSave) DoSaving() else true
      }

      if (check_need_save()) ViewNewDialog(); else false
    }

    SaveCurrentFile() : bool
    {
      if (SaveFileAction!= null)
        SaveFileAction(CurFile) else true
    }

    ViewOverwrite() : DialogResult
    {
      MessageBox.Show(CurOverwrite, "Предупреждение", MessageBoxButtons.YesNoCancel);
    }

    ViewWantToSave() : DialogResult
    {
      MessageBox.Show(CurWantToSave, "Предупреждение", MessageBoxButtons.YesNoCancel);
    }

    SaveAsDialog() : bool
    {
      SaveDialog.FileName = CurFile;
      def res = ViewSaveAsDialog();
      if (res == DialogResult.OK)
      {
        CurFile = SaveDialog.FileName;
        SaveCurrentFile()
      }
      else false
    }

    DoSaveFile() : bool
    {
      if (IsNewFile)
      {
        SaveAsDialog();
      }
      else
      {        
        match (ViewOverwrite())
        {
          | Yes => CurFile = LastSaved;SaveCurrentFile()
          | No => SaveAsDialog()
          | _ => false
        }
      }
    }

    DoSaving() : bool
    {
      if (IsNeedSave)
      {        
        match (ViewWantToSave())
        {
          | Yes => DoSaveFile()
          | No => true
          | _ => false
        }
      } else true
    }

    public IsNewFile : bool
    {
      get
      {
        IsInState(State.Новый());
      }
    }

    public IsNeedSave : bool
    {
      get
      {
        IsInState(State.НужноСохранение());
      }
    }    

    public OpenDialog : OpenFileDialog {get;set;}
    public SaveDialog : SaveFileDialog {get;set;}
    public NewDialog : void -> bool {get;set;}

    public LastSaved : string {get;private set;}
    public CurFile : string {get;private set;}
    public OpenFileAction : string -> bool {get;set;}
    public SaveFileAction : string -> bool {get;set;}
    public CurWantToSave : string {get;set;}
    public CurOverwrite : string {get;set;}
        
    public Открыть() : void
    {
      when (ОткрытиеДиалога()) ОткрытФайл();
    }
    
    public Сохранить() : void
    {
      when (DoSaveFile()) Сохранение();
    }

    public СохранениеКак() : void
    {
      when (SaveAsDialog()) Сохранение();
    }
    
    public ВыходИзПрограммы() : void
    {
        when (DoSaving()) Выход();
    }
        
    public Новый() : void
    {
        when (НовыйДиалог()) НовыйФайл();
    }
  }
}
