using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;


namespace Nemerle.Statechart.Tests
{
  /// <summary>
  /// Description of PathCover.
  /// </summary>
  [statechart(<#
  
  flags : auto_initial, transition_completed_events;
  
  state A
  {
      (H*) => D;
      
      (H) => F;
      $>;
      $<;

      0  / init_actionA => B;
      //0 [test_guard1] => C;
      
      b => E;
      f => D; // cross
          _ [test_guard1] => D; //
          //_ [test_guard1] => A; //
      
          a / D => F;
      state B
      {
      0 [test_guard1] /init_actionB => C;
      0 [test_guard1] => E;
          //0 /init_action => C;
          (H*) => E;
          $>;
          $<;

          do / activity1;
          
          b => D; // cross
          
          d => D;
          f [test_guard1] / f_action =>@;
          k => A;
          c => E;          
          
          state C
          {
              $>;
              a [test_guard1] / A;
              a / B;
              //a [test_guard2] / B => G;
              
              $<;
              
              b [test_guard1] => E;
              //b [test_guard1] => D;
              m =>@;
          }
          
          state E
          {
              $>;
              $<;
              i => D;
              j => A;
              o / final_action1 => $0;
              
              state F
              {
                $>;
                $<;
                  
              }
              
              state G
              {
                
                _ => D;
                
                state C1
                {
                  a => C4;
                }
                
                state C4
                {
                  b => $0;
                }
                
                [-----------]
                
                
                state C2
                {
                  c => C3;
                }
                
                state C3
                {
                  b => $0;
                }
                  
              }
              
              state Dummy
              {
              }
              (H) => G;
          }
          
      }
            
      state D
      {
          $>;  
          $<;
          e => B;
          n => B.H;
          f => A.H*;
          b => A.H;
      }
      
      g => H;
  }
  #>
  )]
  class PathCoverFsm
  {
      
      //[GuardFor(test_guard1)]
    test_guard1() : bool// {get;set;}
    {
      true
    }
      
    test_guard2 : bool// {get;set;}
    {
      get
      {
        true
      }
    }
      
    test_guard3 : bool// {get;set;}
    {
      get
      {
        true
      }
    }      
  }
}
