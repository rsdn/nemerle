using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;


namespace Nemerle.Statechart.Tests
{
  /// <summary>
  /// Description of PathCover.
  /// </summary>
  [statechart(<#
  
  flags : auto_initial, transition_completed_event;
  
  state A
  {
      (H*) => D;
      
      (H) => F;
      $>;
      $<;

      //0 => H*;
      0  / init_actionA => D; //b
      //0 [test_guard1] / a => C;
      //0 [test_guard2] / b => C;
      
      l [test_guard1] /act1 => E; // b => E;
      l [test_guard2] /act2 => E;
      
      f => D; // cross
          _ [test_guard1] / a => D; //
          _ [test_guard2] / A => D; //
      
          a / D => F;
      state B
      {
        0 [test_guard1] /init_actionB => C;
        0 [guard1] => E;
          //0 /init_action => C;
          (H*) => E;
          $> / b_action_entry;
          $< / b_action_exit;
          
          [Concurrently, NoWait, NotLong] do / activity1 activity2;
          
          b => D; // cross
          
          d => D;
          f [test_guard1] / f_action =>@;
          k => A;
          c => E;
          
          state C
          {
              $>;
              //a [test_guard1] / A;
              a / B;
              //a [test_guard2] / A;
              
              $<;
              
              b [test_guard1] => E;
              //b [test_guard1] => D;
              m =>@;
              d => C72;
          }
          
          state E
          {
              $>;
              $<;
              i => D;
              j => A;
              o / final_action1 => $0;
              c => G; // transition to region
              d => C72;
              a => C4; // transition to sub region state
              b => C2 C4;
              e => C72 C4;
              
              state F
              {
                $>;
                $<;
              }
              
              state G
              {
                $>;
                $<;
                _ => D;
                m => A;
                
                state C1
                {
                  $>;
                  $<;

                  [NoWait] do / activityC1;
                  a => C4;
                  c [JGuard1] => (j1);
                  
                  state C5
                  {
                    $>;
                    $<;
                    b => C4;
                    e => D;
                    d => A;
                    
                    state C6
                    {
                      $>;
                      $<;
                      e => E;
                    }
                  }
                  
                }
                
                state C4
                {
                  $>;
                  $<;
                  
                  do / activityC4;
                  
                  b => $0;
                  c => Dummy;
                }
                
                [-----------]
                
                $>;
                $<;
                
                state C3
                {
                  $>;
                  $<;
                  
                  do / activityC3;
                  b => $0;
                  c [JGuard2] => (j1);
                  
                  state C7
                  {
                    $>;
                    $<;
                    state C71
                    {
                      $>;
                      $<;
                      
                      state C8
                      {
                        $>;
                        $<;
                        
                        o => B;
                        
                        state C82
                        {
                        }
                        
                        [-----------]
                        
                        state C81
                        {
                        }
                      }
                    }
                    
                    [-----------]

                    $>;
                    $<;
                    
                    state C72
                    {
                        $>;
                        $<;
                    }
                  }
                }

                state C2
                {
                  $>;
                  $<;
                  
                  do / activityC2;
                  c => C3;
                }
                
                [-----------]
                  $>;
                  $<;
                
                state C9
                {
                  $>;
                  $<;
                }
              }
                
                
              
              join j1 => D;
              
              state Dummy
              {
                $>;
                $<;
              }
          }
          
      }
            
      state D
      {
          $>;  
          $<;
          e => B;
          n => B.H;
          f => A.H*;
          b => A.H;
      }
      
      g => H;
  }
  #>
  )]
  class PathCoverFsm
  {
      
      //[GuardFor(test_guard1)]
    test_guard1() : bool// {get;set;}
    {
      true
    }
      
    test_guard2 : bool// {get;set;}
    {
      get
      {
        true
      }
    }
      
    test_guard3 : bool// {get;set;}
    {
      get
      {
        true
      }
    }      
  }
}
