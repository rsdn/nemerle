using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;

namespace Nemerle.Statechart
{
  
  using PathNode;
  using FsmState;  
  
  /// <summary>
  /// Description of GeneratorDecls.
  /// </summary>
  partial class StaticGenerator
  {
    analyser : FsmAnalyser;
    ty : TypeBuilder;
    mutable tran_events : list[string];    
    mutable events : list[string];
    mutable events_call : Map[string, PExpr];        
    mutable actions : list[GenAction];    
    mutable decls : Map[string, ClassMember];
    mutable action_for : Map[string, string]; // source_name * dest_name
    mutable event_for : Map[string, string];    
    mutable macro_actions : Map[string, list[PExpr]];
    mutable constructor : option[string];    
    mutable guard_for : Map[string, string]; // сторожевые условия объявленные в классе
    mutable history_paths : Map[string, list[GenAction]];
    mutable history_transitions : Map[string, list[GenAction]];
    mutable history_def_transitions : Map[string, list[GenAction]];                
        
    ChartName : string;    
    
    mutable init_exprs : list[PExpr] = [];
    mutable gen_members : list[ClassMember] = [];
    mutable compile_list : list[TypeBuilder] = [];
    mutable state_builders : Map[string, TypeBuilder] = Map();    
    mutable method_decls : list[string];
    
    GuardNeedBody(guard : TransitionNode.Guard) : bool
    {
      def expr = get_guard_cond_expr(guard);
      match (expr)
      {
        |  <[ $(_ : name) ]>
        |  PExpr.Call(<[ $(_ : name) ]>, [])  => false
        | _  => true
      }
    }

    get_guard_cond_expr(g : TransitionNode.Guard) : PExpr
    {
      def cond = g.condition;
      def guard = GenElement(cond, guard_for);
      def name = guard.exec_name;
      if (guard.IsDeclared)
      {        
        if (!decls.Contains(name)) <[ $(name : usesite)() ]> else
          match (decls.Get(name))
          {
            | Field(ParsedType  =  <[ bool ]>)
            | Property(returnType  =  <[ bool ]>)  => <[ $(name : usesite) ]>
            | Field(ParsedType  =  <[ void -> bool ]>)
            | Property(returnType  =  <[ void -> bool ]>)  => <[ if ($(name : usesite) != null) $(name : usesite)() else false]>
            | Function
            | _  => <[ $(name : usesite)() ]>
          }
      } else
      {
        def name = GenElement.CreateExecName(g.Name);
        <[$(name : usesite)()]>
      }
    }
    
    GetGuardedBody(tran : StateTransition, body : PExpr) : PExpr
    {
      match (tran)
      {
        // check guard condition                
        | StateTransition where (guard = Some(g), IsNeedCheckRegionFinal = check_final)  => def cond = get_guard_cond_expr(g);
            match (check_final) 
            {
              | Some(r) => def name = $"$(r)State";
                    <[
                    {
                     res:
                      {
                         unless ($(name : usesite).IsFinal) res(null);
                         def cond =  $cond;
                         unless (cond) res(null);
                         $body
                      }
                     }
                     ]>
              | _ =>
                    <[
                    {
                     res:
                      {
                         def cond =  $cond;
                         unless (cond) res(null);
                         $body
                      }
                     }]>
            }
        | StateTransition where (IsNeedCheckRegionFinal = Some(r)) =>            
            def name = $"$(r)State";        
                    <[
                    {
                     res:
                      {
                         unless ($(name : usesite).IsFinal) res(null);
                         $body
                      }
                     }
                     ]>           
        | _  => body
      }
    }

    FinalizeGen() : void
    {
      Define(gen_members);
      compile_list.Iter(x => x.Compile());
    }
    
    public WithSources : bool {get;set;}

    public this(analyser : FsmAnalyser, ty : TypeBuilder)
    {
      this.analyser = analyser;
      this.ty = ty;
      ChartName = ty.Name;
      WithSources = true;
    }

    public Generate() : void
    {
      Init();      
      DefineEvents();
      DefineActions();
      DefineGuards();
      DefineTransitionActions();      
      DefineDoActivity();
      DefineInit();
      FinalizeGen();
    }

  }
}
