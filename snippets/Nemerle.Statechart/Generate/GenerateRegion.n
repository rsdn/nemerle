using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler;

namespace Nemerle.Statechart
{
  
  using PseudoStateNode;
  
  /// <summary>
  /// Description of GenerationRegion.
  /// </summary>
  partial class StaticGenerator
  {
    

    DefineActions(type : TypeBuilder,st : FsmState) : void
    {
      if (st.IsTopState)
      {
        def get_exit(r)
        {
          def name = $"ExitFrom$r";
          <[decl: public virtual $(name : usesite)(_ : $(ChartName : usesite)) : void {}]>;
        }
        
        def exit = analyser.Regions.Map(get_exit);
        Define(type, exit);
      } else
        match (st.PartOfSubRegion)
        {
          | Some(ConcurrentSubRegion where (contained_in = ConcurrentRegion where (MayTakePlaceForcedTransitions = true) as reg)) => 
              def name = $"ExitFrom$reg";              
              def exit = <[decl: public override $(name : usesite)(fsm : $(ChartName : usesite)) : void
                 {
                   fsm.$($"$(name)In$st" : usesite)();
                 }]>;
              Define(type,exit);
          | _ => ()
        }
    }
        
    DefineRegions(ty : TypeBuilder) : void
    {
      
      def create_regions(reg)
      {
        def get_name(r)
        {
          $"cur_state$(r.index)";
        }
        
        def states = reg.sub_regions.Map(get_name);
        
        def create_region_reaction(sreg, evt)
        {
          def name = get_name(sreg);
          <[
             def st = $(name : usesite).$(evt.Name : usesite)(fsm); 
             when (exited) res(st);
             Switch(ref $(name : usesite), st);
          ]>
        }
        
        def check_states(tr)
        {
          | StateTransition where (FromAndSourceSame = true, From = FsmState where (Name = st, PartOfSubRegion = Some(r))) =>          
              def name = get_name(r);
             <[
              $(name : usesite) : object == $(st : usesite)()
             ]>
          | StateTransition where (From = FsmState where (Name = st, PartOfSubRegion = Some(r))) => 
              def name = get_name(r);             
             <[
              IsInState($(name : usesite), $(st : usesite)())
             ]>
          |_ => <[ null ]>
        }
        
        def create_reaction_body(evt)
        {
          match (reg.sub_regions.Filter(r => r.events_nested.Exists(_ == evt)))
          {
            | [] => <[ _ = fsm; null ]>
            | act =>  
                def react = act |> create_region_reaction(_, evt);
                      <[ {
                         res:
                             {
                             {..$react}
                             null
                             }
                         }
                      ]>
          }
        }
        
        def create_join_reaction(j, tr)
        {                  
          | (Join(joined_tran = jtran),StateTransition where (Name = n, Trigger = evt)) =>
              
              def get_reaction()
              {
                def act = reg.sub_regions.Filter(r => r.events_nested.Exists(_ == evt));
                def react = act |> create_region_reaction(_, evt);
                <[ {..$react} ]>
              }
                      
              def check = jtran.Map(check_states); // check states are active
              def check = MergeExpr(check, merge_and);
                            
              def react = get_reaction();
              def joined_ok = jtran.Length;
              def check_join = <[ join == $(joined_ok : int) ]>;
              def jtran = jtran.Filter(x => !x.Path.Actions.IsEmpty());
              def jtran = jtran.Map(x => <[ fsm.$(x.Name : usesite)()]>);
              def body = if (j.region.JoinCrossed(j))
              <[
                $react;
                when ($check_join) 
                 {
                   join = 0;
                   res(fsm.$(n : usesite)())
                 }
              ]> else
              <[
                {..$jtran;}
                fsm.$(tr.Name : usesite)()
              ]>;
              
              <[
              {
                res:
                {
                  when ($check)
                  {
                    $body
                  }
                  null
                }
              }
              ]>          
        }
                
        def create_join_body(evt)
        {
          def jtran = reg.join_transitions.Filter((j, _) => j.trigger == evt);
          def body = jtran.Map(create_join_reaction);
          // if have other transitions on this event          
            <[ {..$body} ]>
        }
        
        def def_init_body(r)
        {
          def name = get_name(r);
          def init = r.Initial |> _ : StateTransition;
          def tran = DefineTransBody(init, true);
          <[ $(name : usesite) = $tran]>
        }
        
        def get_initial_body()
        {          
          def init = reg.sub_regions.Map(def_init_body);
          <[ 
          {..$init} 
          exited = false;
          ]>
        }

        def def_exit_body(r)
        {
          def name = get_name(r);
          def exit = $"ExitFrom$reg";
          <[ $(name : usesite).$(exit : usesite)(fsm); ]>
        }        
        
        def get_exit_body()
        {
          def exit = reg.sub_regions.Map(def_exit_body);          
          <[ 
          {..$exit} 
          exited = true;
          ]>
        }
        
        def get_exit_pattern(pat, r)
        {
          def exit = r.Map(def_exit_body);
          def name = $"Exit$pat";
          <[decl: public $(name : usesite)(fsm : $(ChartName : usesite)) : void
          {
            {..$exit}
            exited = true;
          }]>
        }
        
        def get_enter_pattern(pat, r)
        {
          def enter = r.Map(def_init_body);
          def name = $"Initial$pat";
          def creg = reg.RegionExcept(r);
          def idx = creg.index;
          <[decl: public $(name : usesite)(fsm : $(ChartName : usesite), st : State) : void
          {
            $($"cur_state$idx" : usesite) = st;
            {..$enter}
            exited = false;
          }]>
        }
        
        def get_is_final()
        {
          def get_final(r)
          {
            def name = get_name(r);
            <[ $(name : usesite) : object == $($"$(r)Final" : usesite)();]>
          }
          
          def final = reg.sub_regions.Map(get_final);
          MergeExpr(final, merge_and)
        }
        
        def get_fork_method()
        {          
          def regs = reg.sub_regions;
          def names = regs.Map(x => (x, $"st$(x.index)"));
          def pars = names.Map((_, x) => <[parameter: $(x : usesite) : State]>);          
          def init = names.Map((x, y) => <[ $($"cur_state$(x.index)" : usesite) = $(y : usesite); ]>);
          <[decl: public Initial(..$pars) : void
          {
            {..$init}
            exited = false;
          }]>
        }
        
        def (join, evt) = reg.events_nested.Partition(x => reg.HaveJoinTransitions(x));
        def join = join.Map(x => (x, create_join_body(x)));
        def evt = evt.Map(x => (x, create_reaction_body(x))) + join;
        def trans = evt.Map((x, body)  => <[decl: public override $(x.Name : usesite)(fsm : $(ChartName : usesite)) : State {$body}]>);        
        def (type, _, _) = GetId(TopState.Id);
        def get_id = states.Map(x => <[$(x : usesite).get_id() ]>);
        def get_id = MergeExpr(get_id, (x, y) => <[$x | $y]>);
        def states = states.Map(x => <[decl: mutable $(x : usesite) : State]>);        
        def defs = states + trans;
        
        def type = <[variant_option: | $(reg.Name : usesite)
                   {
                     public this() {}
                     mutable exited : bool;
                     public override get_id() : $type {$get_id}
                     
                     Switch(st : ref State, newst : State) : void
                     {
                       when (newst != null) st = newst;
                     }
                     
                     public Initial(fsm : $(ChartName : usesite)) : void
                     {
                       $(get_initial_body())
                     }
                   }
                   ]>;
        
        def exit = <[decl: public Exit(fsm : $(ChartName : usesite)) : void
                     {
                       $(get_exit_body())
                     } ]>;
        def defs = exit :: defs;
        def defs = if (reg.join_transitions.IsEmpty()) defs else 
                   {
                     def join = <[ decl: mutable join : int; ]>;
                     def jsetter = <[decl: public SetJoin() : void {join++} ]>;
                     join :: jsetter :: defs;
                   }
        def defs = if (reg.HaveFinal) <[ decl: public IsFinal : bool
                                         {
                                           get
                                           {
                                             $(get_is_final())
                                           }
                                         }
                                      ]> :: defs else defs;
        def defs = if (reg.MayTakePlaceForcedTransitions) 
                   {
                     def exit_pat = reg.exit_pattern.Map(get_exit_pattern);
                     defs + exit_pat
                   } else defs;                   
        def defs = if (reg.enter_pattern.Count() != 0) 
                   {
                     def enter_pat = reg.enter_pattern.Map(get_enter_pattern);
                     defs + enter_pat                     
                   } else defs;
        def defs = if (reg.MayForkingFromOut)
                   {
                     def fork_pat = get_fork_method();
                     fork_pat :: defs
                   } else defs;
        def type = DefineNested(ty, type);
        Define(type, defs);
        type.Compile();
      }
      
      def regions = analyser.Regions;
      regions.Iter(create_regions);      
    }    
  }
}
