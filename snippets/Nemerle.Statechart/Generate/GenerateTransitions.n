using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  using StateTransition;
  using TransitionDestination;
  
  /// <summary>
  /// Description of GenerateTransitions.
  /// </summary>
  partial class StaticGenerator
  {
  
    GetTransitionFunction(tran : list[StateTransition]) : list[ClassMember]
    {
      tran |> <[ decl: $(_.Name : usesite)() : State {$(GetTransitionBody(_))} ]>;       
    }

    GetTransitionFunction(tran : list[string * StateTransition]) : list[ClassMember]
    {
      tran |> <[ decl: $(_ : usesite)() : State {$(GetTransitionBody(_[2]))} ]>;
    }
    
    GetDestination(tran : TransitionDestination, ctx : bool = false) : PExpr
    {
      match (tran)
      {                                            
        | State(st) => GenPath.GetExecStateName(st, ctx)
        | NoStateChange => if (ctx) <[ fsm.cur_state ]> else <[ cur_state ]>
        | Choice(_, tran, Some(st)) => def target = GenPath.GetExecStateName(st, ctx);
            DefineTransBody(tran, ctx, target)
        | Choice(_, tran, _) => DefineTransBody(tran, ctx)
        | Terminate => if (ctx) <[ fsm.Terminate();null ]> else <[ Terminate();null ]>        
        | History(StateChartHistory where (Default = Some()) as h) => def name = $"$(h)Run";
            if (ctx) <[ fsm.$(name : usesite)();]> else <[ $(name : usesite)();]>
        | History(StateChartHistory where (Name = n, State = p, Type = t)) =>
            def t = if (p.BothHistories) $"$t" else "";
                          // call function of run history
            def name = $"$(t)HistoryFrom$p";
            if (ctx) <[ fsm.$(n : usesite).$(name : usesite)() ]> else <[ $(n : usesite).$(name : usesite)() ]>;
        | SubRegion(reg, st, from) =>             
            def regs = reg.PartOfRegionsOf(from).Rev();
            // TODO: вынести логику генерации, ctx и переходов в отдельный класс            
            
            def enter_region(r)
            {
              | head :: tail => 
              
                  def other = head.RegionsExcept(st.ToState);
                  def pat = FsmState.ConcurrentRegion.get_pattern(other);
                  def reg = GenPath.GetExecStateName(head, ctx);                                    
                  def name = $"Initial$pat";
                  def refsm = if (ctx) <[fsm]> else <[ this ]>;
                  <[
                  $reg.$(name : usesite)($refsm, $(enter_region(tail)));
                    $reg
                  ]>                                  
                  
              | _ => GetDestination(st, ctx)
            }
                       
            // entering in region
            enter_region(regs);
            
        | Region(reg) => def target = GenPath.GetExecStateName(reg, ctx);                          
              <[
              $(target).Initial(this);
              $target
              ]>
        | Fork(reg, tran) => def target = GenPath.GetExecStateName(reg, ctx);
            def sub_region(t)
            {
              match (t.AtLeastTo)
              {
               | FsmState.ConcurrentSubRegion as st => st
               | x => x.PartOfSubRegion.Value
              }
            }
            
            def trans = tran.Map(x => (sub_region(x), <[ $(x.Name : usesite)(); ]>));
            def parms = <[this]> :: reg.sub_regions.Map(x => match (trans.Find((y, _) => x == y)) 
                                                 {
                                                   | Some((_, t)) => t
                                                   | _ => <[ null ]>                                                   
                                                 });
            <[
              $(target).Initial(..$parms);
              $target
            ]>
        | Join(join = Join(name = n, region = reg), have_guard = g) => 
            def target = GenPath.GetExecStateName(reg, ctx);            
            def body = if (g) <[ $(target).$($"SetJoin$n" : usesite)(); ]> else <[ () ]>;            
           <[ $body;null ]>
            
        | Final(Final(PartOfSubRegion = Some(sr)) as st, FsmState.ConcurrentRegion(sub_regions = srg) as reg, tran) => 
            def regname = GenPath.GetExecStateName(reg, ctx);
            def target = GenPath.GetExecStateName(st, ctx);              
            def trans = DefineTransBody(tran, ctx);                 
            if (reg.HaveFinal)
            {
            def parms = srg.Map(x => if (x == sr) <[ $target ]> else <[ null ]>);
            <[
              $regname.SetState(..$parms);
              if ($regname.IsFinal) $trans else null
            ]>            
            } else
            {
              <[ $target ]>
            }
        | _ => <[ null ]>
      }      
    }
    
    GuardNeedBody(guard : TransitionNode.Guard) : bool
    {
      def expr = get_guard_cond_expr(guard);
      match (expr)
      {
        |  <[ $(_ : name) ]>
        |  PExpr.Call(<[ $(_ : name) ]>, [])  => false
        | _  => true
      }
    }

    public get_guard_cond_expr(g : TransitionNode.Guard) : PExpr
    {
      def cond = g.condition;
      def guard = GenElement(cond, guard_for);
      def name = guard.exec_name;
      if (guard.IsDeclared)
      {        
        if (!decls.Contains(name)) <[ $(name : usesite)() ]> else
          match (decls.Get(name))
          {
            | Field(ParsedType  =  <[ bool ]>)
            | Property(returnType  =  <[ bool ]>)  => <[ $(name : usesite) ]>
            | Field(ParsedType  =  <[ void -> bool ]>)
            | Property(returnType  =  <[ void -> bool ]>)  => <[ if ($(name : usesite) != null) $(name : usesite)() else false]>
            | Function
            | _  => <[ $(name : usesite)() ]>
          }
      } else
      {
        def name = GenElement.CreateExecName(g.Name);
        <[$(name : usesite)()]>
      }
    }
    
    public GetCheck(node : CheckNode) : PExpr
    {
      | RegionStates(reg, st) => def reg_state = GenPath.GetExecStateName(reg);
          def check_st = reg.sub_regions.Map(x => if (st.Exists(x => x.PartOfSubRegion.Value == x)) GenPath.GetExecStateName(x) else <[ null ]>);          
          if (st.All(x => x.Lived && x.LivedSubStatesNested.IsEmpty()))
            <[ $reg_state.IsInStateConcrete(..$check_st) ]>
          else 
            <[ $reg_state.IsInState(..$check_st) ]>
      | Join(Join(region = reg, name = n, joined_tran = tran)) => def reg_state = GenPath.GetExecStateName(reg);
          def count = tran.Length - 1;
          def join = $"GetJoin$n";
            <[ $reg_state.$(join : usesite)() == $(count : int) ]>      
      | Guard(tran) => def guards = tran.FilterValues(x => x.guard);
          def g = guards |> get_guard_cond_expr(_);
          MergeExprAnd(g);            
    }
    
    GetGuardedBody(tran : StateTransition, body : PExpr) : PExpr
    {
      match (tran)
      {
        | StateTransition where (executeCheck = (_ :: _) as check, guard = Some(g)) =>
            def check = check.Map(GetCheck);
            def cond = get_guard_cond_expr(g);
            def check = MergeExprAnd(check);
             <[
                    {
                     res:
                      {
                         unless ($cond && $check) res(null);
                         $body
                      }
                     }
             ]>
        | StateTransition where (executeCheck = (_ :: _) as check) =>
            def check = check.Map(GetCheck);            
            def check = MergeExprAnd(check);
             <[
                    {
                     res:
                      {
                         unless ($check) res(null);
                         $body
                      }
                     }
             ]>             
        // check guard condition                
        | StateTransition where (guard = Some(g))  => def cond = get_guard_cond_expr(g);
                    <[
                    {
                     res:
                      {
                         unless ($cond) res(null);
                         $body
                      }
                     }]>
        | _  => body
      }
    }
    
    GetTransitionBody(tran : StateTransition, ctx : bool = false) : PExpr
    {
      match (tran)
      {
        | StateTransition where (PathNode = acts) =>
      
            def gen_path = GenPath(acts, action_for);      
            def expr = gen_path.GetActions(true);
            def target = GetDestination(tran.Destination, ctx);
                     
            def body =  <[ $expr;$target ]>;
            GetGuardedBody(tran, body)
      }
    }
    
    DefineTransBody(tr : list[StateTransition], ctx : bool = true, alt : PExpr = null) : PExpr
    {       
      def get_body(tr)      
      {
        def name = tr.Name;
        if (tr.MaybeInlined && GenPath.IsEmpty(tr.PathNode))
        {
             <[ $(GetTransitionBody(tr, ctx)) ]>
        } else 
          if (ctx) <[ fsm.$(name : usesite)(); ]> else <[ $(name : usesite)();]>
      }          
      
      match (tr)
      {
        | [StateTransition where (IsCrossed = true) as tr] => 
            def body =  get_body(tr);
                  <[
                  {
                  def res =  $body;
                  if (res != null) res else $(DefineTransBody(tr.ParentCrossed, ctx, alt))
                  }
                  ]>
        | [tr]  => def body = get_body(tr);
            if (alt != null) 
            <[
              def res = $body;
              if (res != null) res else $alt
            ]> else body
                   
        | tr :: tail  =>         
            def body = get_body(tr);
                  <[
                  {
                    def res =  $body;
                    if (res != null) res else $(DefineTransBody(tail, ctx, alt))
                  }
                  ]>                  
        |  _  => if (alt != null) alt else <[ null ]>
      } 
          
    }
    
    DefineTransitions(ty : TypeBuilder, st : FsmState) : void
    {               
      def defs = if (st.IsTopState)
                 {
                   analyser.TransitionEvents |> <[decl: public virtual $(_.Name : usesite)(_ : $(ChartName : usesite)) : State {null}]>;                  
                 }
                 else
                 {
                   if (st.Lived)
                   {
                     st.work_transition_group.MapToList((x, y)  => <[decl: 
                       public override $(x : usesite)(fsm : $(ChartName : usesite)) : State {$(DefineTransBody(y))}]>)
                   } else [];
                 }
      Define(ty, defs)      
    }

    DefineHistoryPaths(builder : TypeBuilder, st : FsmState) : void
    {        
      def create_body(hist)
      {        
        <[ fsm.$(hist.Name : usesite)(); ]>
      }
                
      def get_name(h, x)
      {
        | (StateChartHistory where (State = FsmState where (BothHistories = true), Type = t), x) => $"$(t)HistoryFrom$x"
        | (_, x) => $"HistoryFrom$x"        
      }
        
      def get_run_hist_body(hist)
      {
        | StateTransition.Default(From = from, history = StateChartHistory where (SimpleName = name) as hist) as t =>
            def hname = get_name(hist, from.Name);
                <[ 
                if ($(name : usesite) != null) // определяем выбор в случае если есть переход по умолчанию в случ.если нет истории
                    $(name : usesite).$(hname : usesite)(this); else $(DefineTransBody([t], false));
                ]> 
      }
      
      if (st.IsTopState) // if it is top state
      {
        def names = analyser.HistoryStates |> get_name(_, _.State.Name); // get name of history states
        def decls = names |> <[decl: public virtual $(_ : usesite)(_ : $(ChartName : usesite)) : State {null} ]>; // create transition methods for history states
        Define(builder, decls);
      } else
      {
        when (st.HaveHistoryPaths && st.Lived) // if state has history paths or it is lived
        {
          def paths  =  st.HistoryPaths;
          def name  =  paths |> (get_name(_[2].History, _), _[2]); // create transition names
          def decl  =  name.MapToList((n, y) => <[decl: public override $(n : usesite)(fsm : $(ChartName : usesite)) : State {$(create_body(y))}]>);
          Define(builder, decl);
        }        
      }
            
      def def_history(h)
      {                
        def hist_func =  h.Head.SimpleName;
        def hist_field =  <[decl: mutable $(hist_func : usesite) : State;]>;
        def body = <[ $(hist_func : usesite)  =  cur_state;]>;
            // save history function
        def save =  <[decl: $($"$(hist_func)Save" : usesite)() : void 
            {
                $body
            }]>;
        def defs = [save, hist_field];        
        // default transitions
        def defaults = h |>< (_.Default.Map(x  => [<[decl: $($"$(x.history)Run" : usesite)() : State {$(get_run_hist_body(x));} ]>]).WithDefault([]));
        def defs = defaults + defs;            
        Define(defs); // add definition to state class
      }
      
      when (st.history.HasValue)
      {
        def hist = st.UsedHistory;        
        when (!hist.IsEmpty()) def_history(hist);
      }
    }
    
    DefineTransitionActions() : void
    {              
      def trans  =  analyser.all_transitions;
      
      def trans = trans.Filter(x => !(x.MaybeInlined && GenPath.IsEmpty(x.PathNode)));      
      def body = GetTransitionFunction(trans);
            
      // history paths
      def body_name = analyser.HistoryPaths |> (Name, _.transition);
      def hist = GetTransitionFunction(body_name);
      Define(hist + body);
    }
    
  }
}
