using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Diagnostics;
using Nemerle.Statechart;


namespace Nemerle.Statechart
{
  using FsmState;
  // TODO: Action events with flag
  /// <summary>
  /// Description of StaticGenerator.
  /// </summary>
  partial class StaticGenerator
  {
    
    DefineStates(builder : TypeBuilder, st : FsmState) : void
    {
      def (id_type, expr, default) = GetId(st.Id);

      def type = if (st.IsTopState)
                 {
                <[ decl:
                   public variant State
                   {

                       public virtual GetCopy(_ : int) : State {this}
                       public virtual get_id() : $id_type {$default}

                       public override ToString() : string
                       {
                         $(FsmState.TopStateName : string)
                       }
                   } ]>;

                 } else
                 {
                 <[ variant_option: |  $(st.Name : usesite)
                    {
                        public override get_id() : $id_type {$expr}
                        
                        public static Id() : $id_type
                        {
                            $expr
                        }
                        
                        public override ToString() : string
                        {
                            $(st.Name : string)
                        }
                    } ]>
                 }
      match (st)            
      {
        | Final
        | State(LivedNested = true)
        | State(IsTopState = true) => 
            def type = DefineNested(builder, type);
            state_builders = state_builders.Add(st.Name, type);
            compile_list ::= type;
            DefineActions(type, st);
            DefineTransitions(type, st); // define transitions in state
            DefineHistoryPaths(type, st); // define history paths
            def builder = if (st.IsTopState) 
                          {
                            DefineRegions(type);
                            type 
                          } else builder;
            st.SubStates.Iter(DefineStates(builder, _));
        | _ => st.SubStates.Iter(DefineStates(builder, _));
      }
    }

    TopState : FsmState
    {
      get
      {
        analyser.TopState
      }
    }

    DefineStates() : void
    {
      DefineStates(ty, analyser.TopState);
    }

    
    DefineEvents() : void
    {
      def get_body(e)
      {
        <[Switch($(events_call.Get(e.name)));]>
      }
      
      def decl_events = events;
      def decl_events = decl_events.Map(n => <[decl: | $(n : usesite) ]>);
      DefineNested(<[ decl:
            public enum Event
            {
              ..$decl_events
            }]>).Compile();
      def events = tran_events |> GenElement(_, event_for);
      def (hiden, defs) = events.Partition(_.IsDeclared);
      def def_events = events.Map(x => (x, x.Declared));
      def hiden = hiden.Filter(x => !method_decls.Contains(x.name));
      def hiden = hiden |> <[decl: private $(_.name : usesite)() : void {$(get_body(_))} ]>;
      def defs = (defs |> <[decl: public $(_.name : usesite)() : void {$(get_body(_))} ]>) + hiden;
      
      def evts = def_events.Map((x, y) => <[case: | Event.$(x.name : usesite) => this.$(y : usesite)();]>);
      Define(<[ decl:
            public RunEvent(evt : Event) : void
            {
                match (evt)
                {
                  ..$evts
                }
            }
            ]>);
      Define(defs);
    }
    
    DefineGuards() : void
    {
      def guards = analyser.guards;
      def guards_elem = guards |> (_, GenElement(_.condition, _.Name, guard_for));
      def actions = guards_elem.Filter((_, x)  => !x.IsDeclared);
      def need_body = guards.Filter(x  => GuardNeedBody(x));
      def need_body = need_body.Map(x  => (x, get_guard_cond_expr(x)));
      need_body.Iter((x, _)  => guard_for = guard_for.Replace(x.condition, x.Name));
      def cond_body = need_body.Map((x, y)  => <[decl: $(x.Name : usesite)() : bool {$y}]>);
      def gnames = actions.Map((x, e) => (e.exec_name, x.Name));
      def methods = gnames |> <[decl: $(_ : usesite)() : bool {$(get_guard_call(_[2]))}]>;
      def props = gnames.Map((_, y) => <[decl: $(y : usesite) : void -> bool {get;set;}]>);
      def defs = methods + props + cond_body;
      Define(defs);
    }    
    
    DefineDoActivity() : void
    {
      def create_activity(act)
      {
        | StateAction.Do(Name = name, actions = act, Concurrently = conc, NoWaitCancel = no_wait, NotLong = not_long) => 
            def actions = $"$(name)Actions";
            def task = $"$(name)Task";
            def cancel_source = $"$(name)CancelSource";
            def act_list = act |> $"On$_";
            act.Iter(x => DefineEvent(x,<[ Action[System.Threading.CancellationToken] ]>, [<[parameter: tok : System.Threading.CancellationToken ]>], <[ tok ]>));
            gen_members ::= <[decl: mutable $(cancel_source : usesite) : System.Threading.CancellationTokenSource; ]>;
            def tok = <[def tok = $(cancel_source : usesite).Token; ]>;
            def (run_body, stop_body) = if (conc)
                                        {
                                          def act_run = act.Map(x => (x,$"$name$(x)Action"));
                                          gen_members += act_run.Map((n,x) => <[decl: $(x : usesite) : Action = () => $($"On$n" : usesite)($(cancel_source : usesite).Token);]>);
                                          def tasks = act.Map(x => $"$task$x");
                                          def task_arr = <[decl: mutable $(task : usesite) : array[System.Threading.Tasks.Task] = array($(tasks.Length : int));]>;
                                          gen_members ::= task_arr;
                                          def stop = if (no_wait) <[ () ]> else <[ System.Threading.Tasks.Task.WaitAll($(task : usesite)); ]>;
                                          def tasks = act_run.MapIndex(((_,y),i) => 
                                                                         if (not_long) <[$(task : usesite)[$(i : int)] = System.Threading.Tasks.Task.Factory.StartNew($(y : usesite), tok, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Current);]> else
                                               <[$(task : usesite)[$(i : int)] = System.Threading.Tasks.Task.Factory.StartNew($(y : usesite), tok);]>
                                               );
                                          (<[ $tok;{..$tasks}]>, <[ $stop ]>)
                                        } else
                                        {
                                          def run_act = $"$(actions)Action";
                                          gen_members ::= <[decl: mutable $(task : usesite) : System.Threading.Tasks.Task;]>;
                                          gen_members ::= <[decl: $(run_act : usesite) : Action; ]>;
                                          init_exprs ::= <[ $(run_act : usesite) = Action($(actions : usesite));]>;;
                                          def act_body = match (act_list)
                                                         {
                                                           | head :: [] => <[ $(head : usesite)($(cancel_source : usesite).Token); ]>
                                                           | _ => 
                                                               def run_acts = act_list |> <[ $(_ : usesite)(tok); ]>;
                                                            <[ 
                                                               def tok = $(cancel_source : usesite).Token;
                                                            {..$run_acts}
                                                            ]>
                                                         }
                                          DefineMethod(actions, act_body);
                                          def run = if (not_long) <[ $(task : usesite) = System.Threading.Tasks.Task.Factory.StartNew($(run_act : usesite), $(cancel_source : usesite).Token, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Current); ]> else
                                                         <[ $(task : usesite) = System.Threading.Tasks.Task.Factory.StartNew($(run_act : usesite), $(cancel_source : usesite).Token);]>;
                                          def stop = if (no_wait) <[ () ]> else <[ $(task : usesite).Wait(); ]>;
                                          (run, stop)
                                        }
            def stop_name = $"$(name)Stop";
            def run_name = $"$(name)Run";
            def run = <[decl: $(run_name : usesite)() : void
                              {
                               $(cancel_source : usesite) = System.Threading.CancellationTokenSource();
                               $run_body
                              } ]>;
            def stop = if (no_wait) 
                                <[decl: $(stop_name : usesite)() : void
                                {
                                  $(cancel_source : usesite).Cancel();
                                  $stop_body
                                }
                                ]> else
                                <[decl: $(stop_name : usesite)() : void
                              {
                                  try
                                  {
                                    $(cancel_source : usesite).Cancel();
                                    $stop_body
                                  }
                                  catch
                                  {
                                    |_ is AggregateException => ()
                                  }
                              } ]>;
            [run, stop]
      }
        
      def act = analyser.DoActivities;
      def defs = act |>< create_activity(_);
      when (!act.IsEmpty())
      {        
        Define(<[decl: task_factory : System.Threading.Tasks.TaskFactory = System.Threading.Tasks.TaskFactory(System.Threading.Tasks.TaskCreationOptions.LongRunning, System.Threading.Tasks.TaskContinuationOptions.None); ]>);
      }
      
      Define(defs);
    }

    DefineActions() : void
    {
      def st = analyser.LivedStates.Filter(x => x.PartOfSubRegion.HasValue);
      
      def st_exit = st.Map(x => ($"ExitFrom$(x.PartOfRegion.Value)In$(x.Name)", GenPath.GetActions(x.region_exit_path, action_for)));
      def exit_acts = st |>< GenAction.CreateActions(_.region_exit_path, action_for);
      def actions = actions.Filter(x => !x.IsDeclared) + exit_acts;
      def actions = actions.RemoveDuplicatesSort((x, y) => FsmAnalyser.StringComparator(x.end_name, y.end_name));
      DefineActionEvent(actions);
      DefineMethods(st_exit);
    }

  }
}
