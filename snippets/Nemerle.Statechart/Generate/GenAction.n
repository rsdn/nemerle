using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler.Parsetree;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  using PathNode;
  
  class GenElement
  {
    public decl_map : Map[string, string] {get;set;}
    
    public name : string;
    public mutable exec_name : string;
    
    public this(n : string)
    {
      name = n;
    }

    public this(n : string, exec : string, map : Map[string, string])
    {
      name = n;
      decl_map = map;
      exec_name = if (IsDeclared) decl_map.Get(name) else CreateExecName(exec);            
    }
    
    public this(n : string, map : Map[string, string])
    {
      name = n;
      decl_map = map;
      CreateEndExecName();
    }

    public CreateEndExecName() : void
    {
      exec_name = if (IsDeclared) decl_map.Get(name) else CreateExecName(name)
    }

    public static CreateExecName(act : string) : string
    {
      $"On$act"
    }
    
    public IsDestDeclared : bool
    {
      get
      {
        decl_map.Exists((_, x)  => FsmAnalyser.StrEq(name, x))
      }
    }

    public IsDeclared : bool
    {
      get
      {
        decl_map.Exists((x, _)  => FsmAnalyser.StrEq(name, x))
      }
    }

    public Declared : string
    {
      get
      {
        if (decl_map.Contains(name)) decl_map.Get(name) else name
      }

    }
    
    public override ToString() : string
    {
      exec_name
    }
    
  }
  
  /// <summary>
  /// Description of GenAction.
  /// </summary>
  class GenAction : GenElement
  {
    [Accessor] node : PathNode;
    
    [Accessor] mutable inlined_actions : list[GenAction] = [];          

    public this(act : string, node : PathNode, map : Map[string, string])
    {
      base(act);
      exec_name = act;
      decl_map = map;
      this.node = node;
      CreateEndName();
      TryInline();
    }

    public this(act : string, exec_name : string, node : PathNode, map : Map[string, string])
    {
      base(act);
      this.exec_name = exec_name;
      decl_map = map;
      this.node = node;
      CreateEndName();
      TryInline();
    }
    
    public action : string
    {
      get
      {
        name
      }
    }
        
    public mutable end_name : string;
    
    public ExecExpr : PExpr
    {
      get
      {
        <[ $(end_name : usesite)(); ]>
      }
    }
    
    public override ToString() : string
    {
      end_name
    }
                
    CreateExecActionName() : string
    {
      if (IsDeclared) Declared else CreateExecName(exec_name)
    }    
         
    public TryInline() : void
    {
      match (node)
      {      
        | Entry(action = act)
        | Exit(action = act) => inlined_actions = create_act_name(act, Action(act), decl_map)
        | _ => ()
      }
    }
        
    public static CreateActions(node : PathNode, map : Map[string, string]) : list[GenAction]
    {
      match (node)
      {
        | Action(act)  => create_act_name(act, node, map)
        | Entry(action = StateAction.Entry(state = st)) => [GenAction($"$(st)Entry", node, map)]
        | Exit(action = StateAction.Exit(state = st)) => [GenAction($"$(st)Exit", node, map)]
        | Sequence(lst) => lst |>< CreateActions(_, map)
        | RunDoActivity as n
        | StopDoActivity as n => [GenAction(n.ToString(), node, map)]
        | _  => []
      }
    }

    public static GetActions(node : PathNode, map : Map[string, string]) : list[GenAction]
    {
      match (node)
      {
        | Action(act)  => create_act_name(act, node, map)
        | Entry(action = StateAction.Entry(state = st) as act) => GenAction($"$(st)Entry", node, map) :: create_act_name(act, Action(act), map)
        | Exit(action = StateAction.Exit(state = st) as act) => GenAction($"$(st)Exit", node, map) :: create_act_name(act, Action(act), map)
        | Sequence(lst) => lst |>< CreateActions(_, map)
        | RunDoActivity as n
        | StopDoActivity as n => [GenAction(n.ToString(), node, map)]
        | _  => []
      }
    }
    
    public CreateEndName() : void
    {
      end_name = match (node)
                 {
                   | Action
                   | Entry 
                   | Exit => CreateExecActionName()      
                   | RunDoActivity
                   | StopDoActivity => action
                   | _  => action
                 }
    }        

    static create_act_name(act : Actions, node : PathNode, map : Map[string, string]) : list[GenAction]
    {      
      def names = act.ActionList |> (_, $"$(_)Action");
      names |> GenAction(_,_[2], node, map)
    }
          
  }

  class GenPath
  {
    node : PathNode;
    decl_map : Map[string, string];
    
    public this(n : PathNode, map : Map[string, string])
    {
      node = n;
      decl_map = map;
    }
    
    public GetActions(supress_inline : bool = false) : PExpr
    {
      GetActions(node, decl_map, supress_inline);
    }
        
    public static GetExecStateName(st : FsmState) : PExpr
    {
      <[ $($"State$st" : usesite) ]>
    }
        
    public static GetSubRegionsExit(reg : list[FsmState.ConcurrentSubRegion]) : string
    {
      def pat = FsmState.ConcurrentRegion.get_pattern(reg);
      $"Exit$pat"
    }
    
    public static IsEmpty(node : PathNode) : bool
    {
      def implicit = node.Unsequenced.Exists(x => x is Exit || x is Entry);
      node.Actions.IsEmpty() && !implicit
    }    
    
    public static GetActions(node : PathNode, map : Map[string, string], supress_inline : bool = false) : PExpr
    {
      match (node)
      {
        | Sequence(seq) => def act = seq |> GetActions(_, map, supress_inline);
                           <[ {..$act} ]>
        | ClearHistory(hist)  => def expr = hist.Map(x => <[ $($"$(x)Clear" : usesite)(); ]>); 
                                         <[ {..$expr} ]>      
        | SaveHistory(hist) => if (supress_inline) <[ () ]> else
                               {
                                 match (hist.Filter(x => x.Used))
                                 {
                                   | StateChartHistory where (SimpleName = n) :: _ => <[ $($"$(n)Save" : usesite)(); ]>
                                   | _ => <[ () ]>
                                 }
                               }
        | RunDoActivity as n
        | StopDoActivity as n => if (supress_inline) <[ () ]> else <[ $($"$n" : usesite)(); ]>;
        | ForceStateChange(st) => <[ cur_state = $(GetExecStateName(st)); ]>
        | SubRegionsExit(st, reg) => def reg_state = GetExecStateName(reg);
                                     def reg_exit = GetSubRegionsExit(st);
                                     <[ $reg_state.$(reg_exit : usesite)(this) ]>
        | RegionExit(reg) => def reg_state = GetExecStateName(reg);
                             <[ $reg_state.Exit(this) ]>
        | Empty => <[ () ]>
        | _  => def act =  GenAction.CreateActions(node, map);
                def act = act |> end_name;
                def acts = act |> <[$(_ : usesite)();]>;
                <[ {..$acts} ]>
      }         
    }
    
  }
}
