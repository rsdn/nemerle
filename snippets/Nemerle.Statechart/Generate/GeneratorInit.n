using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler.Parsetree;
using Nemerle.Statechart;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of GeneratorInit.
  /// </summary>
  partial class StaticGenerator
  {      
      
    /// <summary>
    /// Определяем начальные конструкции
    /// </summary>
    DefineInit() : void
    {
      def def_initial(i)
      {
        |[init] =>  if (init.ToChoice.IsEmpty()) 
                    {
                      def target= <[ $($"State$(init.ActualTo)" : usesite) ]>;
                      def names=CreateExecActionNames(init.PathNodes) |> <[ $(_ : usesite)();]>;
                      <[
                       {..$names}
                       cur_state = $target;
                      ]>
                    }
                    else 
                    {                                           
                      def res=DefineTransBody(init : StateTransition,false);
                      <[ cur_state= $res; ]>
                    }
        |init => DefineTransBody(init |> (_ : StateTransition));

      }
        
      def state_names=analyser.States |> (_, $"State$_"); // создаем имена состояний             
      //def initial=analyser.TopState.initial.Value;
      def initial=def_initial(analyser.TopState.initial);            
      
      def cons_expr=constructor.MapDefault(x => <[ $(x : usesite)(); ]>,<[ () ]>);
      //def cons_expr=if (constructor.HasValue) <[ $(constructor.Value : usesite)(); ]> else <[ ]>;//ifvalue (constructor) <[ $_(); ]> else <[ () ]>;
      def state_init_expr= state_names |> <[ $(_[2] : usesite) = State.$(_ : usesite)(this);]>;
      def trans_complete_expr= if (analyser.Fsm.flags.TransitionCompleted) <[ OnTransitionCompleted(); ]> else <[ () ]>;
      def dummy= <[decl: 
                   class Test
                   {                     
                     [Accessor] mutable cur_state : State;
                     //StateTop : State;
                     
                     // определяем конструктор
                     public this()
                     {
                     // тело конструктора
                        //StateTop=State(this,0);
                        {..$state_init_expr}
                        $cons_expr
                     }   
         
                     // определяем метод для изменения состояния  
                     Switch(st : State) : void 
                     {
                        when (st!=null) 
                         {                             
                             cur_state=st;
                             $trans_complete_expr
                         }
                     }     
                
                     public Initiate() : void 
                     {
                         $initial
                     }                
                     
                    public override ToString() : string
                    {
                        cur_state.ToString()
                    }
                     
                    }
                    
                  ]>;
        
      def states=state_names |> <[decl: public $(_[2] : usesite) : State.$(_ : usesite);]>; // создаем переменные состояний                              
      Define(states);      
      Define(dummy.td.GetMembers());
      DefineStates(); // определяем состояния        
      def is_in_state=if (mask_type!=TypeCode.Empty) <[decl: 
                public IsInState(st : State) : bool
                {
                    cur_state.id & st.id == st.id 
                }
             ]> else <[decl: 
                public IsInState[T](st : T) : bool where T : State
                {
                    cur_state is T
                }
             ]>;
      when (analyser.Fsm.flags.TransitionCompleted)
      {
        Define(<[ decl:
               OnTransitionCompleted() : void
               {
                   def temp=TransitionCompleted;
                   when (temp!=null) temp(this,null);
               } 
               ]>);   
        Define(<[decl: public event TransitionCompleted : EventHandler;]>);
      }        
      Define(is_in_state);                            
    }      
  }
}
