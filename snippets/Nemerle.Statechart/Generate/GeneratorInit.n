using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler.Parsetree;
using Nemerle.Statechart;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of GeneratorInit.
  /// </summary>
  partial class StaticGenerator
  {
    DefineMain() : void
    {
      def def_initial(i)
      {
        def trans = DefineTransBody(i |> (_ : StateTransition), false);
       <[ cur_state = $trans ]>
      }

      def initial = def_initial(analyser.TopState.Initial);
      def state_names = $[(st.Name, $"State$(st)"), st in analyser.LivedStates, !st.IsTopState && !(st is FsmState.ConcurrentSubRegion)]; // создаем имена состояний      
      def state_init_expr = state_names |> <[ $(_[2] : usesite) = State.$(_ : usesite)();]>;
      def cons_expr = constructor.MapDefault(x  => <[ $(x : usesite)(); ]>, <[ () ]>);
      def trans_complete_expr =  if (analyser.Fsm.flags.TransitionCompleted) <[ OnTransitionCompleted(); ]> else <[ () ]>;
      def dummy =  <[decl:
                   class Test
                   {
                     [Accessor] mutable cur_state : State;

                     // определяем конструктор
                     public this()
                     {
                     // тело конструктора
                        {..$state_init_expr}
                        {..$init_exprs}
                        $cons_expr
                     }

                     // определяем метод для изменения состояния
                     Switch(st : State) : void
                     {
                        when (st != null)
                         {
                             cur_state = st;
                             $trans_complete_expr
                         }
                     }

                     public IsTerminated : bool
                     {
                         get
                         {
                            cur_state == null
                         }
                     }
                     
                     public Initiate() : void
                     {
                         $initial
                     }

                    public override ToString() : string
                    {
                        cur_state.ToString()
                    }

                    }

                  ]>;

      Define(state_names |> <[decl: public $(_[2] : usesite) : State.$(_ : usesite);]>); // create state variables for using in other languages
      Define(dummy.td.GetMembers());
    }

    /// <summary>
    /// Define initial class structure
    /// </summary>
    DefineInit() : void
    {
      DefineMain();
      DefineStates(); // define states
      when (analyser.Fsm.flags.TransitionCompleted)
      {
        DefineEvent("TransitionCompleted");
      }
      DefineIsInState();
      DefineTerminate();
    }

    DefineTerminate() : void
    {
      def stop_activity(act)
      {
        | StateAction.Do(Name = name) =>
        <[
            when ($($"$(name)CancelSource" : usesite) != null) $($"$(name)Stop" : usesite)();
        ]>
      }

      def get_task_name(act)
      {
        | StateAction.Do(Name = name) => $"$(name)Task";
      }

      def get_wait(act, res)
      {
        | ([head], []) =>
            def r = match (head)
                    {
                      |  StateAction.Do(Concurrently = conc) as act =>
                          def task = get_task_name(act);
                          if (conc) <[ def tasks = $(task : usesite);]> else <[ def tasks = array[$(task : usesite)]; ]>
                    }
            r :: res
        | (head :: tail, []) =>
            def r = match (head)
                    {
                      |  StateAction.Do(Concurrently = conc) as act =>
                          def task = get_task_name(act);
                          if (conc) <[ def tasks = $(task : usesite).NToList();]> else <[ def tasks = $(task : usesite) :: []; ]>
                    }
            get_wait(tail, r :: res)
        | (head :: tail, _) =>
            def r = match (head)
                    {
                      | StateAction.Do(Concurrently = conc) as act=>
                          def task = get_task_name(act);
                          if (conc) <[ def tasks = tasks + $(task : usesite).NToList();]> else <[ def tasks = $(task : usesite) :: tasks; ]>
                    }
            get_wait(tail, r :: res)
        | (_, _) => res
      }

      def tasks = analyser.DoActivities.Filter(x => x.NoWaitCancel);
      def wait_tasks = get_wait(tasks, []);
      def stop_body = analyser.DoActivities |> stop_activity(_);
      def stop_body = match (wait_tasks)
                      {
                        | [] => stop_body
                        | [task] =>
                            [<[  $task;
                                 try
                                 {
                                    {..$stop_body}
                                    System.Threading.Tasks.Task.WaitAll(tasks);
                                 }
                                 catch
                                 {
                                   | _ is AggregateException => ()
                                 }
                              ]>]
                        | lst => lst +
                                   [<[ try
                                       {
                                          {..$stop_body}
                                          System.Threading.Tasks.Task.WaitAll(tasks.ToArray());
                                       }
                                       catch
                                       {
                                         | _ is AggregateException => ()
                                       }
                                    ]>];
                      }
      def terminate = <[ decl: public Terminate() : void
                         {
                           {..$stop_body}
                           cur_state = null;
                         }
                      ]>;
      Define(terminate);
    }

    DefineIsInState() : void
    {
      def create_comp_expr()
      {
        def comp = TopState.Id.Result;
        def comp = comp.MapIndex((_, i) =>
        <[
                                   cur_id.$($"id$i" : usesite) & id.$($"id$i" : usesite) == id.$($"id$i" : usesite)
        ]>);
        def expr = MergeExpr(comp,(x,y) => <[ $x && $y ]> );
        <[
        def id = st.get_id();
           def cur_id = cur_state.get_id();
           $expr
        ]>;
      }

      def id = TopState.Id;
      def body = if (id.IsSimple)
                 <[
                   def id = st.get_id();
                   cur_state.get_id() & id  ==  id
                 ]> else
                 {
                   def ids = id.Result;
                   def names = ids.MapIndex((_, i) => $"id$i");
                   def mem = match (id.MaskType)
                             {
                               | Struct => def ids = names |> <[decl: public $(_ : usesite) : uint; ]>;
                                   def vars = names.Map(x => <[parameter: $(x : usesite) : uint]>);
                                   def assign = names |> <[ this.$(_ : usesite) = $(_ : usesite)]>;
                                   def ctor = <[decl: public this(..$vars)
                                                      {
                                                        ..$assign
                                                      }]>;
                                   def ids = ctor :: ids;
                                 <[decl: struct LongId
                                    {
                                     ..$ids
                                    } ]>;

                               | _ => def ids = names |> <[decl: public mutable $(_ : usesite) : uint; ]>;
                            <[decl: class LongId
                              {
                               ..$ids
                              }
                            ]>;
                             }
                   DefineNested(mem).Compile();
                   create_comp_expr();
                 }

      def is_in_state = <[decl:
                public IsInState(st : State) : bool
                {
                    $body
                }
             ]>;
      Define(is_in_state);
    }


    Init() : void
    {
      def CreateStateMasks()
      {
        TopState.Id.CreateMask(analyser);
      }

      InitActionNames();
      CreateStateMasks(); // creating state masks (identificators)

      tran_events = analyser.TransitionEvents |> Name;
      events = analyser.Events;
      events_call = Map(events |> (_, <[ cur_state.$(_ : usesite)(this) ]>));
      history_paths = Map(analyser.HistoryPaths |> (Name, GenAction.CreateActions(_.Path, action_for)));
      history_transitions = Map(analyser.history_transitions |> (_, GenAction.CreateActions(_[2].PathNode, action_for)));
      history_def_transitions = Map(analyser.history_default_transitions |> (Name, GenAction.CreateActions(_.PathNode, action_for)));
    }

    InitActionNames() : void
    {
      def action_for_name(macros)
      {
        |  <[ $_($name) ]>  => name.ToString()
        | _  => macros.ToString()
      }


      def class_decls  =  ty.GetParsedMembers(false);
      method_decls = class_decls.Filter(_ is ClassMember.Function) |> Name;
      def macros = class_decls |> (Name, _.ParsedAttributsAndModifiers.ParsedCustomAttributes);
      def macros = macros.Filter((_, x)  => !x.IsEmpty());
      macro_actions  =  Map(macros);
      decls = Map(class_decls |> (Name, _));

      def declared = decls.Keys();
      def action_for_decls =  macros.FindSingleList(_ is <[ ActionFor($_) ]>);
      def event_for_decls =  macros.FindSingleList(_ is <[ EventFor($_) ]>);
      def guard_for_decls = macros.FindSingleList(_ is <[ GuardFor($_) ]>);
      constructor =  macros.FindSingle(_ is <[Constructor]>) %|> _;

      def decl = declared |> (_, _);
      def action = action_for_decls |> (action_for_name(_[2]), _);
      def evt = event_for_decls |> (action_for_name(_[2]), _);
      def methods = method_decls |> (_, _);
      action_for = Map(action + methods);
      event_for = Map(evt + methods);
      def guard = guard_for_decls |> (action_for_name(_[2]), _);
      def guard = guard + decl;
      def guard = guard.RemoveDuplicatesSort(((k1, _), (k2, _))  => k1.CompareTo(k2));
      guard_for = Map(guard);
      def acts = analyser.ActionNodes.Filter(x => {
                                                 | PathNode.ClearHistory
                                                 | PathNode.RunDoActivity
                                                 | PathNode.StopDoActivity => false
                                                 | _ => true});
      def acts = acts |>< GenAction.GetActions(_, action_for);
      def acts = acts.RemoveDuplicatesSort((x, y) => FsmAnalyser.StringComparator(x.action, y.action));
      actions = acts;
    }

  }

}
