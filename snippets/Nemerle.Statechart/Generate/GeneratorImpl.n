using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of GeneratorImpl.
  /// </summary>
  partial class StaticGenerator
  {
    Define(f : ClassMember) : void
    {
      Define(ty, f);
    }

    Define(ty : TypeBuilder, f : ClassMember) : void
    {
      if (WithSources) _  =  ty.DefineWithSource(f); else ty.Define(f);
    }

    Define(ty : TypeBuilder, lst : list[ClassMember]) : void
    {
      lst.Iter(Define(ty, _));
    }

    Define(lst : list[ClassMember]) : void
    {
      Define(ty, lst);
    }

    DefineNested(ty : TypeBuilder, f : ClassMember.TypeDeclaration) : TypeBuilder
    {
      when (WithSources)
      {
        def man = ty.TyManager;
        man.GenerateFakeSourceCode(f);
      }
      ty.DefineNestedType(f);
    }
    
    DefineNested(f : ClassMember.TypeDeclaration) : TypeBuilder
    {
      DefineNested(ty, f);
    }

    DefineEvent(name : string) : void
    {
      def evt = <[decl: public event $(name : usesite) : EventHandler;]>;
      def method = <[decl: $($"On$name" : usesite)() : void {$(get_event_call(name))}]>;
      Define([method, evt]);
    }

    DefineEvent(name : string, type : PExpr, pars : list[PParameter], body : PExpr) : void
    {
      def evt = <[decl: public event $(name : usesite) : $type;]>;
      def method = <[decl: $($"On$name" : usesite)(..$pars) : void 
                    {
                      def temp = $(name : usesite);
                      when (temp != null) temp($body);
                    }]>;
      Define([method, evt]);
    }
    
    public static merge_and : PExpr * PExpr -> PExpr = (x, y) => <[$x && $y]>;
    
    DefineActionEvent(name : list[GenAction]) : void
    {
      def get_body(n)
      {
        def act_call = get_action_call(n.exec_name);
        def inline = match (n)
                     {
                       | GenAction where (Node = PathNode.Entry(inline = lst), InlinedActions = i) 
                       | GenAction where (Node = PathNode.Exit(inline = lst), InlinedActions = i) => 
                           def i = i.Map(x => (x.ExecExpr, true));
                           def lst = lst |> (GenPath.GetActions(_, action_for, false), _[2]);
                           i + lst
                       | _ => [(<[ () ]>, false)]
                     }
        
        def (after, before) = inline.Partition((_, x) => x);
        def after = after.Split()[0];
        def before = before.Split()[0];
          <[
        {..$before}
          $act_call;
          {..$after}
          ]>
      }
        
      def events = name.Map(x => <[decl: public event $(x.exec_name : usesite) : Action;]>);
      def methods = name.Map(x => <[decl: $(x.end_name : usesite)() : void 
                              {
                                $(get_body(x))
                              }]>);
      Define(events + methods);
    }
    
    DefineMethod(name : string, body : PExpr) : void
    {
      Define(<[decl: $(name : usesite)() : void {$body}]>)
    }

    DefineMethods(lst : list[string * PExpr]) : void
    {
      def defs = lst.Map((x, y) => <[decl: $(x : usesite)() : void {$y}]>);
      Define(defs)
    }
    
    DefineMethods[T](name : list[string * T], body : T -> PExpr) : void
    {
      def defs = name |> <[decl: $(_ : usesite)() : void {$(body(_[2]))}]>;
      Define(defs);
    }
      
    get_history_run_name(h : StateHistory, x : string) : string
    {
      | (StateHistory where (State = FsmState where (BothHistories = true), Type = t), x) => $"$(t)HistoryFrom$x"
      | (_, x) => $"HistoryFrom$x"
    }

    get_sub_region_name(r : FsmState.ConcurrentSubRegion) : string
    {
       $"cur_state$(r.index)"
    }
    
    get_action_call(act : string) : PExpr
    {
      <[
      def temp =  $(act : usesite);
      when (temp != null) temp();
      ]>;
    }

    get_guard_call(act : string) : PExpr
    {
      <[
      def temp =  $(act : usesite);
      if (temp != null) temp(); else false
      ]>;
    }
    
    get_event_call(act : string) : PExpr
    {
      <[
      def temp =  $(act : usesite);
      when (temp != null) temp(this, null);
      ]>;
    }

    public static MergeExprAnd(expr : list[PExpr]) : PExpr
    {
      MergeExpr(expr, merge_and)
    }
    
    public static MergeExpr(expr : list[PExpr], merge_func : PExpr * PExpr -> PExpr) : PExpr
    {
      def merge_expr(item, res)
      {
        | ((first :: tail), <[ () ]>) => merge_expr(tail, first)
        | ((first :: tail), expr) => merge_expr(tail, merge_func(expr,first))
        | (_, expr) => expr
      }
      
      merge_expr(expr, <[ () ]>)
    }
    
    GetId(id : StateId) : PExpr * PExpr * PExpr
    {
      def get_long_id() : PExpr
      {
        def res = id.Result;
        def pars =  res |> <[ $(_ : int)]>;
        <[ LongId(..$pars) ]>
      }

      def get_class_long_id() : PExpr
      {
        def res = id.Result;
        def res = res.FirstElems(_ == 0);
        def pars = res |> <[ $(_ : int)]>;
        def pars = pars.MapIndex((x,i) => <[ id.$($"id$i" : usesite) = $x;]>);
        <[ 
        def id = LongId();
          {..$pars}
          id
        ]>
      }
      
      match (id.MaskType)
      {
        | Int => (<[uint]>, <[ $((id.Id :> uint) : uint) ]>, <[ 0 ]>)
        | Long => (<[ulong]>, <[ $(id.Id : ulong) ]>, <[ 0 ]>)
        | Struct => (<[LongId]>, <[ $(get_long_id()) ]>, <[ LongId() ]>)
        | Class => (<[LongId]>, <[ $(get_class_long_id()) ]>, <[ null ]>)
      }
    }
  }
}
