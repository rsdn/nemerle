using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler;

namespace Nemerle.Statechart
{
  
  using PseudoStateNode;
  
  /// <summary>
  /// Description of GenerationRegion.
  /// </summary>
  public partial class StaticGenerator
  {
    

    DefineActions(type : TypeBuilder,st : FsmState) : void
    {
      if (st.IsTopState)
      {
        def get_exit(r)
        {
          def name = $"ExitFrom$r";
          <[decl: public virtual $(name : usesite)(_ : $(ChartName : usesite)) : void {}]>;
        }
        
        def exit = analyser.Regions.Map(get_exit);
        Define(type, exit);
      } else
      {
        match (st.PartOfSubRegion)
        {
          | Some(ConcurrentSubRegion where (Lived = true, contained_in = ConcurrentRegion where (MayTakePlaceForcedTransitions = true) as reg)) => 
              def name = $"ExitFrom$reg";
              def exit = <[decl: public override $(name : usesite)(fsm : $(ChartName : usesite)) : void
                 {
                   fsm.$($"$(name)In$st" : usesite)();
                 }]>;
              Define(type,exit);
          | _ => ()
        }
      }
        
    }
        
    DefinePseudo() : void
    {
      def get_join(j)
      {
        | Join(name = n) => 
          
            def fname = $"join$n";
            <[ decl: mutable $(fname : usesite) : int; ]>
      }
      def pseudo = analyser.PseudoStates;
      def joins = pseudo.FilterType();
      def defs = joins |> get_join(_);
      Define(defs);
    }
    
    DefineRegions(ty : TypeBuilder) : void
    {
      
      def create_regions(reg)
      {        
        def regs = reg.sub_regions;
        def cur_st = regs.Map(get_sub_region_name);
        def states = cur_st.Map(x => <[ $(x : usesite) ]>);
        
        // TODO: вынести генерацию региона в отдельный класс и остальное
        def create_region_reaction(sreg, evt)
        {
          def name = get_sub_region_name(sreg);
          <[ 
             def st = $(name : usesite).$(evt.Name : usesite)(fsm);
             when (exited) 
             {
               exited = false;
               res(null)
             }
             when (st != null) $(name : usesite) = st; 
          ]>
        }
        
        def create_reaction_body(evt)
        {
          match (regs.Filter(r => r.events_nested.Exists(_ == evt)))
          {
            | [] => <[ _ = fsm; null ]>
            | act =>  
                def react = act |> create_region_reaction(_, evt);
                <[ 
                {
                res:
                  {
                  {..$react}
                  null
                  }
                }  
                ]>
          }
        }
        
        def def_init_body(r)
        {
          def name = get_sub_region_name(r);
          def init = r.Initial |> _ : StateTransition;
          def tran = DefineTransBody(init, true);
          <[ $(name : usesite) = $tran ]>
        }
        
        def get_initial_body()
        {
          def init = regs.Map(def_init_body);
          <[ {..$init} ]>
        }

        def def_exit_body(r)
        {
          def name = get_sub_region_name(r);
          def exit = $"ExitFrom$reg";
          <[ $(name : usesite).$(exit : usesite)(fsm); ]>
        }
        
        def get_exit_body()
        {
          def exit = regs.Map(def_exit_body);
          <[ 
          {..$exit} 
            exited = true;
          ]>
        }
        
        def get_exit_pattern(pat, r)
        {
          def exit = r.Map(def_exit_body);
          def name = $"Exit$pat";
          <[decl: public $(name : usesite)(fsm : $(ChartName : usesite)) : void
          {
            {..$exit}
            exited = true;
          }]>
        }
        
        def get_enter_pattern(pat, r)
        {
          def enter = r.Map(def_init_body);
          def name = $"Initial$pat";
          def creg = reg.RegionExcept(r);
          def idx = creg.index;
          <[decl: public $(name : usesite)(fsm : $(ChartName : usesite), st : State) : void
          {
            $($"cur_state$idx" : usesite) = st;
            {..$enter}
          }]>;
          
          
        }
        
        def get_is_final()
        {
          def get_final(r)
          {
            def name = get_sub_region_name(r);
            <[ $(name : usesite) : object == $($"$(r)Final" : usesite)();]>
          }
          
          def final = regs.Map(get_final);
          MergeExpr(final, merge_and)
        }
        
        def st_names = regs.Map(x => $"st$(x.index)");
        def st_pars = st_names.Map(x => <[parameter: $(x : usesite) : State]>);
        
        def get_fork_method()
        {
          def names = regs.Map(x => (x, <[ $($"cur_state$(x.index)" : usesite) ]>, $"st$(x.index)"));
          def init_body = names.Map((x, z, y) => <[ if ($(y : usesite) != null) $z = $(y : usesite) else $(def_init_body(x)); ]>);          
          def init_pars = <[parameter: fsm : $(ChartName : usesite)]> :: st_pars;
          
          <[decl: public Initial(..$init_pars) : void
          {
            {..$init_body}
          }]>;
        }
        
        def get_is_in_state()
        {
          def regs = regs.Map(x => ($"st$(x.index)", get_sub_region_name(x)));
          def pars = regs.Map((x, _) => <[parameter: $(x : usesite) : State]>);
          def body = regs.Map((x, y) => <[ if ($(x : usesite) != null) $(ChartName : usesite).IsInState($(y : usesite), $(x : usesite)) else true ]>);
          def concrete = regs.Map((x, y) => <[ if ($(x : usesite) != null) $(y : usesite) : object == $(x : usesite) else true]>);
          def body = MergeExprAnd(body);
          def conc_body = MergeExprAnd(concrete);
          def decl = <[decl: public IsInState(..$pars) : bool
            {
              $body
            }]>;
            
          def conc = <[decl: public IsInStateConcrete(..$pars) : bool
            {
              $conc_body
            }]>;
          [decl, conc]
        }
        
        def get_history_members()
        {
          def get_copy_body()
          {
            def assign = cur_st.Map(x => <[ copy.$(x : usesite) = $(x : usesite).GetCopy(num)]>);
            <[
              def copy = if (copy_holder != null)
                          {
                            copy_holder[num]
                          } else
                          {
                            original
                          }
              {..$assign}
              copy
            ]>
          }
          
          def orig = <[decl: original : $(reg.Name : usesite); ]>;
          def init = analyser.HistoryStates.Map(_ => <[ $(reg.Name : usesite)(this) ]>);
          def cons2 = <[decl: public this() {original = this; copy_holder = array[..$init]} ]>;
          def cons = <[decl: public this(orig : $(reg.Name : usesite)) {original = orig;} ]>;
          def get_copy = <[decl: public override GetCopy(num : int) : State {$(get_copy_body())} ]>;
          def holder = <[decl: copy_holder : array[$(reg.Name : usesite)];]>;
          [orig, cons, cons2, get_copy, holder]
        }

        def evt = reg.events_nested;
        def evt = evt.Map(x => (x, create_reaction_body(x)));
        def trans = evt.Map((x, body)  => <[decl: public override $(x.Name : usesite)(fsm : $(ChartName : usesite)) : State {$body}]>);        
        def (type, _, _) = GetId(TopState.Id);
        def get_id = states.Map(x => <[$x.get_id() ]>);
        def get_id = MergeExpr(get_id, (x, y) => <[$x | $y]>);
        def state_defs = cur_st.Map(x => <[decl: public mutable $(x : usesite) : State]>);
        def defs = state_defs + trans;
        def names = states.Map(x => <[ $x.ToString() ]>);
        def names = MergeExpr(names, (x, y) => <[$x + "|" + $y]>);
        def type = <[variant_option: | $(reg.Name : usesite)
                   {
                     mutable exited : bool;
                     public override get_id() : $type {$get_id}
                     
                     public override ToString() : string 
                     {
                       def reg = $(reg.Name : string);
                       def str = $names;
                       $<#$(reg):($str)#>
                     }
                     public Initial(fsm : $(ChartName : usesite)) : void
                     {
                       $(get_initial_body())
                     }
                   }
                   ]>;
        
        def exit = <[decl: public Exit(fsm : $(ChartName : usesite)) : void
                     {
                       $(get_exit_body())
                     } ]>;
        def is_in_state = get_is_in_state();
        def defs = exit :: defs + is_in_state;
        def defs = if (reg.HaveFinal) <[ decl: public IsFinal : bool
                                         {
                                           get
                                           {
                                             $(get_is_final())
                                           }
                                         }
                                      ]> :: defs else defs;
        def defs = if (reg.MayTakePlaceForcedTransitions) 
                   {
                     def exit_pat = reg.exit_pattern.Map(get_exit_pattern);
                     defs + exit_pat
                   } else defs;
        def defs = if (reg.enter_pattern.Count() != 0) 
                   {
                     def enter_pat = reg.enter_pattern.Map(get_enter_pattern);
                     defs + enter_pat
                   } else defs;
        def defs = if (reg.MayForkingFromOut)
                   {
                     def fork_pat = get_fork_method();
                     fork_pat :: defs
                   } else defs;
        def defs = if (reg.NeedHistorySave)
                   {
                     get_history_members() + defs
                   } else 
                   {
                     def cons = <[decl: public this() {} ]>;
                     cons :: defs
                   }
        def type = DefineNested(ty, type);
        DefineHistoryPaths(type, reg);
        compile_list ::= type;
        Define(type, defs);
      }
      
      def regions = analyser.Regions;
      regions.Iter(create_regions);
    }
  }
}
