using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  using StateTransition;
  using TransitionDestination;
  
  /// <summary>
  /// Description of GenerateTransitions.
  /// </summary>
  public partial class StaticGenerator
  {
  
    GetTransitionFunction(tran : list[StateTransition]) : list[ClassMember]
    {
      tran |> <[ decl: $(_.Name : usesite)() : State {$(GetTransitionBody(_))} ]>;
    }

    GetTransitionFunction(tran : list[string * StateTransition]) : list[ClassMember]
    {
      tran |> <[ decl: $(_ : usesite)() : State {$(GetTransitionBody(_[2]))} ]>;
    }
    
    GetDestination(tran : TransitionDestination, ctx : bool = false) : PExpr
    {
      match (tran)
      {
        | State(st) => 
              
            def body = GenPath.GetExecStateName(st, ctx);
            if (ctx) 
            {
                <[
              _ = fsm;
                  $body;
                ]>
            } else body
        | NoStateChange => if (ctx) <[ fsm.cur_state ]> else <[ cur_state ]>
        | Choice(_, tran, Some(st)) => def target = GenPath.GetExecStateName(st, ctx);
            DefineTransBody(tran, ctx, target)
        | Choice(_, tran, _) => DefineTransBody(tran, ctx)
        | Terminate => if (ctx) <[ fsm.Terminate();null ]> else <[ Terminate();null ]>
        | History(StateHistory where (Default = Some()) as h) => def name = $"$(h)Run";
            if (ctx) <[ fsm.$(name : usesite)();]> else <[ $(name : usesite)();]>
        | History(StateHistory where (Name = n, State = p, Type = t)) =>
            def t = if (p.BothHistories) $"$t" else "";
                          // call function of run history
            def name = $"$(t)HistoryFrom$p";
            if (ctx) <[ fsm.$(n : usesite).$(name : usesite)(fsm) ]> else <[ $(n : usesite).$(name : usesite)(this) ]>;
        | SubRegion(reg, st, from) =>
            def regs = reg.PartOfRegionsOf(from).Rev();
            // TODO: вынести логику генерации, ctx и переходов в отдельный класс

            def enter_region(r)
            {
              | head :: tail => 
              
                  def other = head.RegionsExcept(st.ToState);
                  def pat = FsmState.ConcurrentRegion.get_pattern(other);
                  def reg = GenPath.GetExecStateName(head, ctx);
                  def name = $"Initial$pat";
                  def refsm = if (ctx) <[fsm]> else <[ this ]>;
                  <[
                  $reg.$(name : usesite)($refsm, $(enter_region(tail)));
                    $reg
                  ]>

              | _ => def body = GetDestination(st, ctx);
                  if (ctx && regs.Length <= 1) 
                     <[ 
                    _ = fsm;
                        $body
                     ]> else body
            }

            // entering in region
            enter_region(regs);
            
        | Region(reg) => def target = GenPath.GetExecStateName(reg, ctx);
              <[
            $target.Initial(this);
              $target
              ]>
        | HistoryRestore(h) => <[ $(h.Name : usesite).GetCopy(0) ]>
        | Fork(reg, tran) => def target = GenPath.GetExecStateName(reg, ctx);
            def sub_region(t)
            {
              match (t.AtLeastTo)
              {
                | FsmState.ConcurrentSubRegion as st => st
                | x => x.PartOfSubRegion.Value
              }
            }
            
            def trans = tran.Map(x => (sub_region(x), if (ctx) <[ fsm.$(x.Name : usesite)(); ]> else <[ $(x.Name : usesite)(); ]>));
            def def_this = if (ctx) <[ fsm ]> else <[this]>;
            def parms = def_this :: reg.sub_regions.Map(x => match (trans.Find((y, _) => x == y)) 
                                                          {
                                                            | Some((_, t)) => t
                                                            | _ => <[ null ]>
                                                          });
            <[
            $(target).Initial(..$parms);
              $target
            ]>
        | Join(join = Join(name = n)) => 
            def fname = $"join$n";
            if (ctx) <[ fsm.$(fname : usesite)++;null ]> else <[ $(fname : usesite)++;null ]>
            
        | Final(Final(PartOfSubRegion = Some(sr)) as st, FsmState.ConcurrentRegion() as reg, tran) => 
            def regname = GenPath.GetExecStateName(reg, ctx);
            def target = GenPath.GetExecStateName(st, ctx);
            def trans = DefineTransBody(tran, ctx);
            if (reg.HaveFinal)
            {
              def hist = reg.ParticipateInHistory;
              def hist = GenPath.GetHistoryClear(hist);
            <[
              $regname.$(get_sub_region_name(sr) : usesite) = $target;
              if ($regname.IsFinal) 
              {
                $hist;
                $trans
              } else null
            ]>
            }
            else <[ $target ]>
        | ForceStateChange(nest) => def body = GetDestination(nest, ctx);
            match (nest)
            {
              | State(FsmState where (PartOfRegion = Some(r), PartOfSubRegion = Some(sr))) =>
                  def reg = GenPath.GetExecStateName(r, ctx);
                  def sreg = get_sub_region_name(sr);
                  <[ $reg.$(sreg : usesite) = $body ]>
              | Fork
              | SubRegion
              | Region
              | State => <[ cur_state = $body; null ]>
              | Terminate
              | NoStateChange => body
              | _ => <[ Switch($body); null  ]>
            }
        | CheckAfter(check, before, after) =>
            def check = GetCheck(check);
            def before = GetDestination(before, ctx);
            def nest = GetDestination(after, ctx);
            <[ def st = $before; if ($check) $nest else st ]>
        | TransitionExecute(tran) => def body = tran.Map(x => DefineTransBody([x], ctx));
            def begin = body.ChopLastN(1);
            def begin = begin.Map(x => <[ _ = $x ]>);
            def body = begin + [body.Last()];
           <[ {..$body} ]>
        | JoinedTransition(Join(name = n), tran) => def fname = $"join$n";
            def body = DefineTransBody([tran], ctx);
          <[ $(fname : usesite) = 0;$body ]>
        | EventSend(st, evt) => 
            match (st)
            {
              | FsmState where (PartOfRegion = None()) => <[ cur_state.$(evt.Name : usesite)(this) ]>
              | FsmState where (PartOfRegion = Some(r)) => def name = GenPath.GetExecStateName(r);
              <[ $name.$(evt.Name : usesite)(this) ]>
            }
        | _ => <[ null ]>
      }
    }
    
    GuardNeedBody(guard : TransitionNode.Guard) : bool
    {
      def expr = get_guard_cond_expr(guard);
      match (expr)
      {
        |  <[ $(_ : name) ]>
        |  PExpr.Call(<[ $(_ : name) ]>, []) => false
        | _  => true
      }
    }

    get_guard_cond_expr(g : TransitionNode.Guard) : PExpr
    {
      def cond = g.condition;
      def guard = GenElement(cond, guard_for);
      def name = guard.exec_name;
      if (guard.IsDeclared)
      {
        if (!decls.Contains(name)) <[ $(name : usesite)() ]> else
          match (decls.Get(name))
          {
            | Field(ParsedType  =  <[ bool ]>)
            | Property(returnType  =  <[ bool ]>)  => <[ $(name : usesite) ]>
            | Field(ParsedType  =  <[ void -> bool ]>)
            | Property(returnType  =  <[ void -> bool ]>)  => <[ if ($(name : usesite) != null) $(name : usesite)() else false]>
            | Function
            | _  => <[ $(name : usesite)() ]>
          }
      } else
      {
        def name = GenElement.CreateExecName(g.Name);
        <[$(name : usesite)()]>
      }
    }
    
    GetCheck(node : CheckNode) : PExpr
    {
      | Empty => <[ () ]>
      | Sequence(lst) => def check = lst |> GetCheck(_);
          MergeExprAnd(check)
      | RegionStates(st) => 
          
          def get_check(reg, st)
          {
            
            def check_st = reg.sub_regions.Map(x => 
                                                 match (st.Find(y => y.PartOfSubRegion.Value == x)) 
                                                 {
                                                   | Some(st) => GenPath.GetExecStateName(st) 
                                                   | _ => <[ null ]>
                                                 });
             
            def reg_state = GenPath.GetExecStateName(reg);
            if (st.All(x => x.Lived && x.LivedSubStatesNested.IsEmpty()))
            <[ $reg_state.IsInStateConcrete(..$check_st) ]>
            else 
            <[ $reg_state.IsInState(..$check_st) ]>
          }
          
          def reg = st |> PartOfRegion.Value;
          if (reg.ElementsEqual(_ == _))
          {
            def reg = reg.First();
            get_check(reg, st)
          } else
          {
            def group = st.Group((x, y) => FsmAnalyser.StringComparator(x.PartOfRegion.Value.Name, y.PartOfRegion.Value.Name));
            def check = group.Map(x => get_check(x.First().PartOfRegion.Value, x));
            MergeExprAnd(check);
          }
      | Join(Join(name = n, joined_tran = jtran), tran) => 
          def reg = jtran |> FromRegion;
          def idx = reg.FindIndex(tran.FromRegion == _);
          def fname = $"join$n";
          <[ $(fname : usesite) == $(idx : int) ]>
      | Guard(tran) => def guards = tran.FilterValues(_.SourceGuard);
          GetGuards(guards)
    }
    
    GetGuards(g : list[TransitionNode.Guard]) : PExpr
    {
      def body = g |> get_guard_cond_expr(_);
      MergeExprAnd(body)
    }
    
    GetGuardedBody(tran : StateTransition, body : PExpr) : PExpr
    {
      match (tran)
      {
        | StateTransition where (executeCheck = check, Guard = g) =>
           
            def check = GetCheck(check);
            def check = match (g)
                        {
                          | Some(g) => [get_guard_cond_expr(g), check]
                          | _ => [check]
                        }
            match (check)
            {
              | [<[ () ]>] => body
              | _ => 
                  def check = MergeExprAnd(check);
                  <[
                  {
                    res:
                    {
                        unless ($check) res(null);
                        $body
                    }
                  }
                  ]>
            }
      }
    }
    
    GetTransitionBody(tran : StateTransition, ctx : bool = false) : PExpr
    {
      def get_junction_body(p, acts, ret = true)
      {
        match (p)
        {
          | null => <[ null ]>
          | JunctionDecision.Else(body = Target() as b, level = 0) => get_junction_body(b, acts, false);
          | JunctionDecision.Else(body = b) => get_junction_body(b, acts);
          | JunctionDecision.Condition(condition = c, body = b, else_node = els) =>
              def check = GetGuards([c]);
              def body  = get_junction_body(b, acts);
              def els = get_junction_body(els, acts);
              <[ 
                 when ($check) $body;
                 $els
              ]>
          
          | Target(destination = d, Path = p) =>
         
              def dest = GetDestination(d, ctx);
              def jact = GenPath.GetActions(p, action_for, true);
              if (ret)
              <[
                $acts;
                $jact;
                res($dest)
              ]> else
              <[
                $acts;
                $jact;
                $dest
              ]>
          | _ => <[ null ]>
        }
      }
      
      match (tran)
      {
        | StateTransition where (PathNode = acts, To = TransitionTarget.PseudoState(Junction(DecisionTree = t))) =>
            
            def gen_path = GenPath(acts, action_for);
            def expr = gen_path.GetActions(true);
            def body = get_junction_body(t, expr);
            <[
            {
              res:
                {
                  $body
                }
            }
            ]>
          
        | StateTransition where (PathNode = acts) =>
      
            def gen_path = GenPath(acts, action_for);
            def expr = gen_path.GetActions(true);
            def target = GetDestination(tran.Destination, ctx);
            def body =  <[ $expr;$target ]>;
            GetGuardedBody(tran, body)
      }
    }
    
    DefineTransBody(tr : list[StateTransition], ctx : bool = true, alt : PExpr = null) : PExpr
    {
      def get_body(tr)
      {
        def name = tr.Name;
        if (tr.MaybeInlined && GenPath.IsEmpty(tr.PathNode))
        {
             <[ $(GetTransitionBody(tr, ctx)) ]>
        } else 
          if (ctx) <[ fsm.$(name : usesite)(); ]> else <[ $(name : usesite)();]>
      }

      match (tr)
      {
        | [StateTransition where (IsCrossed = true) as tr] => 
            def body =  get_body(tr);
                  <[
                  {
                  def res =  $body;
                  if (res != null) res else $(DefineTransBody(tr.ParentCrossed, ctx, alt))
                  }
                  ]>
        | [tr]  => def body = get_body(tr);
            if (alt != null) 
            <[
              def res = $body;
              if (res != null) res else $alt
            ]> else body

        | tr :: tail  =>
            def body = get_body(tr);
                  <[
                  {
                    def res =  $body;
                    if (res != null) res else $(DefineTransBody(tail, ctx, alt))
                  }
                  ]>
        |  _  => if (alt != null) alt else <[ null ]>
      } 
    }
    
    DefineTransitions(ty : TypeBuilder, st : FsmState) : void
    {
      def defs = if (st.IsTopState)
                 {
                   analyser.TransitionEvents |> <[decl: public virtual $(_.Name : usesite)(_ : $(ChartName : usesite)) : State {null}]>;
                 }
                 else
                 {
                   if (st.Lived)
                   {
                     st.work_transition_group.MapToList((x, y)  => <[decl: 
                       public override $(x : usesite)(fsm : $(ChartName : usesite)) : State {$(DefineTransBody(y))}]>)
                   } else [];
                 }
      Define(ty, defs)
    }

    
    DefineHistoryPaths(builder : TypeBuilder, st : FsmState) : void
    {
      def create_body(hist)
      {
        def body = <[ fsm.$(hist.Name : usesite)(); ]>;
        def tran = hist.History.Default.Value;
        if (st is FsmState.ConcurrentRegion && st.HaveFinal)
        <[
          if (IsFinal) fsm.$(tran.Name : usesite)() else $body;
        ]> else body
      }

      if (st.IsTopState) // if it is top state
      {
        def names = analyser.HistoryStates |> get_history_run_name(_, _.State.Name); // get name of history states
        def decls = names |> <[decl: public virtual $(_ : usesite)(_ : $(ChartName : usesite)) : State {null} ]>; // create transition methods for history states
        Define(builder, decls);
      } else
      {
        if (st.Lived && st is FsmState.Final) 
        {
          def create_body(hist)
          {
            def tran = hist.Default.Value;
            <[ fsm.$(tran.Name : usesite)() ]>
          }
          
          def hist  =  st.ParticipateInHistory;
          def name  =  hist |> (_, get_history_run_name(_, _.State.Name)); // create transition names
          def decl  =  name.MapToList((x, y) => <[decl: public override $(y : usesite)(fsm : $(ChartName : usesite)) : State {$(create_body(x))}]>);
          Define(builder, decl);
        } else
          when (st.HaveHistoryPaths && (st.Lived || st is FsmState.ConcurrentRegion)) // if state has history paths or it is lived
          {
            def paths  =  st.HistoryPaths;
            def name  =  paths |> (get_history_run_name(_[2].History, _), _[2]); // create transition names
            def decl  =  name.MapToList((n, y) => <[decl: public override $(n : usesite)(fsm : $(ChartName : usesite)) : State {$(create_body(y))}]>);
            Define(builder, decl);
          }
      }
      
    }
    
    DefineHistory() : void
    {
      def get_run_hist_body(hist)
      {
        | StateTransition.Default(From = from, history = StateHistory where (Name = name) as hist) as t =>
            def hname = get_history_run_name(hist, from.Name);
                <[ 
                if ($(name : usesite) != null) // определяем выбор в случае если есть переход по умолчанию в случ.если нет истории
                    $(name : usesite).$(hname : usesite)(this); else $(DefineTransBody([t], false));
                ]> 
      }
      
      def def_history(h)
      {
        def create_history(hist)
        {
          def hist_field =  <[decl: mutable $(hist.Name : usesite) : State;]>;
          def clear = <[decl: $($"$(hist)Clear" : usesite)() : void 
            {
                $(hist.Name : usesite) = null
            }]>;    
          def default = hist.Default.Map(x => [<[decl: $($"$(x.history)Run" : usesite)() : State {$(get_run_hist_body(x));} ]>]).WithDefault([]);  
          [hist_field, clear] + default
        }
        
        def save_body(hist)
        {
          def idx = hist.Index;
          match (hist.State)
          {
            | FsmState where (PartOfRegion = Some(r), PartOfSubRegion = Some(sr)) => def name = GenPath.GetExecStateName(r);
                def reg = <[ $name.$($"cur_state$(sr.index)" : usesite); ]>;
                       <[ $(hist.Name : usesite) = if ($reg != null) $reg.GetCopy($(idx : int)) else null ]>
            | _ => <[ $(hist.Name : usesite) = cur_state.GetCopy($(idx : int));]>
          }
        }
        
        def head = h.Head;
        def hist_func =  head.SimpleName;
        
        def body = h.Map(save_body);
            // save history function
        def save =  <[decl: $($"$(hist_func)Save" : usesite)() : void 
            {
              ..$body
            }]>;
            
        def defs = h |>< create_history(_);
        def defs = save :: defs;
        // default transitions
        Define(defs); // add definition to state class
      }
      
      def def_hist(st)
      {
        when (st.history.HasValue)
        {
          def hist = st.UsedHistory;
          when (!hist.IsEmpty()) def_history(hist);
        }
      }
      
      analyser.LivedNestedStates.Iter(def_hist)
    }
    
    DefineTransitionActions() : void
    {
      def trans  =  analyser.all_transitions;
      def trans = trans.Filter(x => !(x.MaybeInlined && GenPath.IsEmpty(x.PathNode)));
      def body = GetTransitionFunction(trans);
      // history paths
      def body_name = analyser.HistoryPaths |> (Name, _.transition);
      def hist = GetTransitionFunction(body_name);
      Define(hist + body);
    }
    
  }
}
