using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Peg;
using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;


namespace Nemerle.Statechart
{
    
  using StateNode;
    
  /// <summary>
  /// Description of ParserActions.
  /// </summary>
  partial class FsmParser
  {
      
    NameToState(state : NameIdentifier) : TargetType
    {                        
      def node = state.GetNode();
      match (state.TargetName)
      {
        | "H"
        | "h" => TargetType.History(state.pos, StateNode.History(0, StateHistory.Shallow, option.None(), state.GetState(), true))
        | "history"  => TargetType.History(state.pos, state.GetState())
        | "h*" 
        | "H*"  => TargetType.History(state.pos, StateNode.History(0, StateHistory.Deep, option.None(), state.GetState(), true))
        | "final" 
        | "$0"  => TargetType.Final(state.pos, Final(null))
        | "terminate"
        | "x"
        | "X" => TargetType.PseudoState(state.pos, PseudoStateAstNode.Terminate(state.GetState()))
        | _  => TargetType.State(state.pos, node)
      }
    }

    create_event(tok : NToken) : TransitionNode.Event
    {
      def name = GetText(tok);
      
      def name = match (name)
                {
                  | "completion" 
                  | "_"  => null
                  | _  => name
                }
      TransitionNode.Event(tok.StartPos, name)
    }

    create_action(lst : List[NToken]) : Actions
    {
      def acts =  lst |> GetText(_);
      Actions(acts)          
    }

    CreateState(pos : int, name : string, attr : list[StateAttribute], decls : list[StateNode]) : StateNode.State
    {            
      def check_history(st, h)
      {
        match (h)
        {              
          | StateNode.History(state = null) => h.state = st;check_history(st, h)
          | History(default = Some(StateNode.Default(history = History(state = null) as h)))  => h.state = st;check_history(st, h)
          | _  => ()
        }
      }
    
      def check_tran(state, tr)
      {
        match (tr)
        {
          | StateNode.Transition(to = TargetType.State(st) as t) when st.name == "@" ||  st.name == "self"  => t.state = state;
          | Transition(to = TargetType.History(History(state = null) as t)) => check_history(state, t)
          //| Transition(to = TargetType.PseudoState(Terminate(state = null) as t)) => t.state = state
          | _  => ()
        } 
      }
                  
      def check_pseudo(st, ps)
      {
          match (ps)
          {
          | StateNode.PseudoState(node = Terminate(state = null) as n) => n.state = st
          | _ => ()
          }
      }
      
      def decls = decls.Sort((x, y)  => x.pos - y.pos);
      def state_reg = decls.Filter(x  => x is State ||  x is SubRegion); // find states and regions
      def regions = state_reg.FindDelimited(_ is SubRegion).Map(_.Map(_ :> State)); // split list by regions
      def regions = regions.Map(SubRegion(0, _)); // create regions
      def (_, decls) = decls.Partition(_ is SubRegion);
      def (en : list[Entry], decls) = decls.PartitionType();
      def (ex : list[Exit], decls) = decls.PartitionType();
      def (states, decls) =  decls.PartitionType();
      def (trans, decls)  =  decls.PartitionType();
      def (in_trans, decls) = decls.PartitionType();
      def (do_act, decls) = decls.FindType();
      def (init, decls) = decls.PartitionType();
      def (hist, decls) = decls.PartitionType();
      def (pseudo, decls) = decls.PartitionType();
      def history = match (hist) 
                   {
                     | [head]  => ThreeOption.One(head)
                     | [f, s]  => ThreeOption.Two(f, s)                     
                     | _  => ThreeOption.None() // TODO: надо отслеживать ошибку и выдавать пользователю                  
                   }
      def regions = match (regions)
                  {
                      | []  => None() // if no regions
                      | lst  => Some(Region(0, lst, State(name))) // if some create node
                  }
      def en_acts =  en |>< action.actions;
      def ex_acts =  ex |>< action.actions;      
      def en = if (!en.IsEmpty()) option.Some(StateNode.Entry(en_acts)) else option.None();
      def ex = if (!ex.IsEmpty()) option.Some(StateNode.Exit(ex_acts)) else option.None();
      def st = State(pos, name, init, attr, en, ex, in_trans, trans, do_act, history, states, regions, pseudo, decls |> Error(_.pos, _));
      states.Iter(x => x.SuperState = st);
      trans.Iter(check_tran(st, _));
      hist.Iter(check_history(st, _));
      pseudo.Iter(check_pseudo(st, _));
      st
    }

    def_history(hist : StateHistory, tok : NToken, tran : option[StateNode.Default]) : StateNode.History
    {            
      match (tran)
      {
          | Some(tr)  => tr.history = StateNode.History(tok.StartPos, null);
                         tr.pos = tok.StartPos;
          | _  => ()
      }
      
      StateNode.History(tok.StartPos, hist, tran);  
    }
    
  }
}
