using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Peg;
using Nemerle;
using System.Diagnostics;
using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;

namespace Nemerle.Statechart
{
  
  using StateNode;  
  using TransitionNode;
  
  partial class FsmParser
  {
    name(tok : NToken) : NameIdentifier.Name
    {
      NameIdentifier.Name(tok.StartPos, GetText(tok))
    }
    
    fully_qualified(id1 : NToken, id2 : NToken) : NameIdentifier.QualifiedName
    {
      NameIdentifier.QualifiedName(id1.StartPos, GetText(id1), GetText(id2))
    }
        
    guard(tok : NToken) : Guard
    {
      Guard(tok.StartPos, GetText(tok))
    }
            
    transition_mark(guard : option[Guard], act : option[Actions], state : NameIdentifier, states : List[NameIdentifier]) : StateNode.Transition
    {
      if (states.Count() == 0)
      {
        def target = NameToState(state);
        Transition(guard, act, target);
      } else 
      {
        def states = state :: states.NToList();
        def target = states |> State(_.TargetName);
        Transition(guard, act, TargetType.PseudoState(0,PseudoStateAstNode.Fork(null, target)));
      }
    }
      
    default_transition(act : option[Actions], state : NameIdentifier) : Default
    {
      Default(act, state.GetNode());
    }
    
    events(id : NToken, evt : List[NToken]) : List[Event]
    {
      def lst = id :: evt.NToList();      
      def lst = lst |> create_event(_);
      lst.ToList()
    }    
    
    simple_transition(evt : List[Event], tran : StateNode.Transition) : StateNode
    {
      Transition(evt, tran)    
    }
    
    simple_attrs(attr : List[List[NToken]]) : List[NToken]
    {
      attr.Flatten().ToList()
    }
    
    attributes(attr : List[NToken]) : List[StateAttribute]
    {           
      def get_attr(at)
      {
        match (GetText(at))
        {
          | "Initial" => StateAttribute.Initial(at.StartPos)          
          | str => StateAttribute.Unknown(at.StartPos, str)
        }
      }
            
      attr.Map(get_attr).ToList()
    }

    trans_act_list(lst : List[NToken]) : Actions
    {
      create_action(lst)
    }    
    
    block_action_list(lst : List[NToken]) : Actions
    {
      create_action(lst)
    }
    
    empty_action_list(tok : NToken) : Actions
    {
      Actions(tok.StartPos, [])
    }
    
    delim_action_list(lst : List[NToken]) : Actions
    {      
      create_action(lst)
    }
          
    entry(key : NToken, acts : option[Actions]) : Entry
    {      
      acts.MapDefault(Entry(key.StartPos, _), Entry(key.StartPos));
    }

    exit(key : NToken,  acts : option[Actions]) : Exit
    {
      acts.MapDefault(Exit(key.StartPos, _), Exit(key.StartPos));      
    }
              
    do_activity(attr : option[List[NToken]], key : NToken, acts : Actions) : DoActivity
    {
      def get_attr(at, res)
      {
        match (GetText(at))
        {
          | "Concurrently" => (res | ActivityFlag.Concurrently)
          | "NoWait" => (res | ActivityFlag.NoWaitCancel)
          | "NotLong" => (res | ActivityFlag.NotLong)
          | _ => ActivityFlag.None
        }
      }
      
      def flags = match (attr)
                  {
                    | Some(at) => at.FoldLeft(ActivityFlag.None, get_attr);
                    | _ => ActivityFlag.None
                  }
      DoActivity(key.StartPos, acts, flags)
    }
    
    internal_trans(evt : NToken, guard : option[TransitionNode.Guard], acts : Actions) : InternalTransition
    {
      InternalTransition(evt.StartPos, [create_event(evt)], guard, acts)
    }
    
    initial_trans(name : NToken, tran : StateNode.Transition) : Initial
    {
      Initial(name.StartPos, tran)
    }

    state(attr : option[List[StateAttribute]], name : NToken, nodes : List[StateNode]) : State
    {
      def name_text = GetText(name);
      def attr = attr.MapDefault(_.NToList(), []);
      CreateState(name.StartPos, name_text, attr, nodes.NToList());
    }
      
    flags(tok : List[NToken]) : MachineFlags
    {
      def proc_tok(tok, flag)
      {
        def nflag = match (GetText(tok))
                    {            
                      | "debug"  => MachineFlag.Debug
                      | "auto_initial"  => MachineFlag.AutoInitial
                      | "local_default"  => MachineFlag.LocalDefault
                      | "transition_completed_events"  => MachineFlag.TransitionCompleted
                      | _  => MachineFlag.None
                    }
        nflag |  flag
      }     
      
      MachineFlags(tok.FoldLeft(MachineFlag.None, proc_tok));
    }
    
    history_deep(tok : NToken, tran : option[StateNode.Default]) : History
    {
      def_history(StateHistory.Deep, tok, tran)
    }    

    history_shallow(tok : NToken, tran : option[StateNode.Default]) : History
    {
      def_history(StateHistory.Shallow, tok, tran)      
    }    
    
    history_long(type : NToken, tran : option[StateNode.Default]) : History
    {
      match (GetText(type))
      {
        | "Deep"
        | "deep"  => def_history(StateHistory.Deep, type, tran)
        | "Shallow"
        | "shallow"  => def_history(StateHistory.Shallow, type, tran)
        | _  => def_history(StateHistory.None, type, tran)
      }
    }
    
    terminate_node(tok : NToken) : PseudoState
    {
      StateNode.PseudoState(tok.StartPos, PseudoStateAstNode.Terminate(null))
    }
    
    join(tok : NToken, name : NToken, target : NameIdentifier) : StateNode.PseudoState
    {
      StateNode.PseudoState(tok.StartPos, PseudoStateAstNode.Join(null, GetText(name), NameToState(target)))
    }
    
    stateMachine(sp : NToken, flags : option[MachineFlags],  st : List[StateNode]) : StateMachine
    {
      def st = CreateState(sp.StartPos, null, [], st.NToList());
      def flags = flags.WithDefault(MachineFlags(MachineFlag.None));
      StateMachine(flags, st);
    }
    
    region(beg : NToken, _ : NToken) : StateNode.SubRegion
    {
      StateNode.SubRegion(beg.StartPos)
    }
  }

}
