using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;

namespace Nemerle.Statechart
{
  
  using StateNode;
  
  enum StateHistory
  {    
    | None
    | Shallow
    | Deep
  }   
     
  [Record]
  variant NameIdentifier
  {
    | Name 
    | QualifiedName {sub_name : string;}
        
    public pos : int;
    public name : string;
    
    public TargetName : string
    {
      get
      {
        match (this)
        {
          | NameIdentifier.Name(name = n)
          | QualifiedName(sub_name = n)  => n
        }
      }
    }
    
    public ParentName : string
    {
      get
      {
        match (this)
        {
          | NameIdentifier.Name  => null
          | QualifiedName(name = n)  => n
        }
            
      }
        
    }
    
    public GetState() : State
    {
      def n = ParentName;
      if (n == null) null else State(n)
    }
        
    public GetNode() : State
    {
      State(TargetName)          
    }
  }
  
  [Record]
  class Actions 
  {   
    public pos : int;
    public actions : list[string];
          
    public this(actions : list[string])
    {
        pos = 0;
        this.actions = actions;
    }
    
    public ActionList : list[string]
    {
        get
        {
            actions
        }
    }
    
    public Empty : bool
    {
      get
      {
        actions.IsEmpty()
      }
    }
          
  }
 
  [Record]
  variant TransitionNode
  {      
    | Event 
        {
          name : string; 
          
          override ToString() : string {name}
        }      
    | Guard 
        {
          condition : string;
          override ToString() : string {Name}
        
          Name : string
          {
            get
            {
              $"Guard$condition"
            }
          }
                            
        }
               
    public pos : int {get;set;}
  }      
  
  [Record]
  variant StateAttribute
  {
    | Initial 
    | Unknown {name : string}
    
    pos : int {get;set;}
  }
  
  [Flags]
  enum MachineFlag
  {
    | None    
    | Debug                =  0b0001  // включение точки останова для отладки
    | AutoInitial          =  0b0010  // автоматическое определения инициализирующего перехода из первого определения
    | LocalDefault         =  0b0100  // локальные переходы по умолчанию вместо external (это знач. при входе в родит.сост. не вызывается entry)    
    | TransitionCompleted  =  0b1000  // события завершения переходов
  }
  
  [Record]
  class MachineFlags
  {      
    [FlagAccessor (AutoInitial,  LocalDefault,  Debug, TransitionCompleted,  flags  =  WantSetter)]      
    mutable flags : MachineFlag;
      
      
  }
  
  [Record]
  variant PseudoStateAstNode
  {      
    | Fork {states : list[State];}
    | Join
    | Junction
    | Choice
    | EntryPoint
    | ExitPoint
    | Terminate 
    
    public state : State;
      
  }
  
  [Record]
  variant TargetType
  {
    | History 
        {
          history : StateNode.History;
                
          this(pos : int, state : StateNode.State)
          {
            history = StateNode.History(pos, state);
            base(pos);
          }
        }
    | PseudoState
        {
          node : PseudoStateAstNode;                    
          
        }
    | Final {node : StateNode.Final;}
    | State 
        {            
          mutable state : StateNode.State;
                  
        } 
    
    public pos : int;
  }
  
}
