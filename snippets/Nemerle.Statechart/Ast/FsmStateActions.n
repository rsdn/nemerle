using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{

  using StateTransition;

  /// <summary>
  /// Description of FsmStateActions.
  /// </summary>
  partial class FsmState
  {

    public completion_transitions : list[Transition]
    {
      get
      {
        transitions.Filter(x  => x.IsCompletion)
      }
    }

    public change_transitions : list[StateTransition]
    {
      get
      {
        def tran = transitions |> _ : StateTransition;
        def parent = super_state_cross_transitions |> _ : StateTransition;
        tran + parent
      }      
    }
    
    public all_transitions : list[StateTransition]
    {
      get
      {
        
        def intern = internal_tran |> _ : StateTransition;
        change_transitions + intern
      }
    }

    public static create_transition_group(tr : list[StateTransition]) : Map[string, list[StateTransition]]
    {
      def group = tr.Group((x, y)  => FsmAnalyser.StringComparator(x.FriendlyTriggerName, y.FriendlyTriggerName));
      def lst = group |> (_.Head.FriendlyTriggerName, _);
      Map(lst)
    }

    public HaveFinalNode : bool
    {
      get
      {
        sub_states.Exists(x  => x.this_transitions.Exists(x  => x.To is TransitionTarget.Final))
      }
    }

    public grouped_transitions : Map[string, list[StateTransition]]
    {
      get
      {
        create_transition_group(all_transitions)
      }
    }

    public this_cross_transitions : Map[string, list[StateTransition]]
    {
      get
      {
        create_transition_group(this_transitions).Filter((_, x)  => x.Length > 1)
      }
    }

    public work_transition_group : Map[string, list[StateTransition]]
    {
      get
      {
        create_transition_group(work_transitions)
      }
    }

    public cross_transitions : Map[string, list[StateTransition]]
    {
      get
      {
        grouped_transitions.Filter((_, x)  => x.Length > 1)
      }
    }

    /// <summary>
	/// Переходы определенные напрямую из этого состояния
	/// </summary>
    public this_transitions : list[StateTransition]
    {
      get
      {
        transitions.MapFiltered(x  => x.From == this, _ : StateTransition)
      }
    }

    public GetHistory(type : StateChartHistory) : StateChartHistory
    {
      match (history)
      {
        | One(h)  => h
        | Two(f, s)  => if (f.Type == type.Type) f else s
        | _  => null
      }
    }

    /// <summary>
	  /// Сравнение состояний
	  /// </summary>
    public CompareTo(b : FsmState) : int
    {
      FsmAnalyser.StringComparator(Name, b.Name)
    }

    public static @==(a : FsmState, b : FsmState) : bool
    {
      | (null, null)  => true
      | (a, null)  => a : object  ==  null
      | (null, b)  => b : object  ==  null
      | (a, b)  => FsmAnalyser.StrEq(a.Name, b.Name)
    }

    public static @!=(a : FsmState, b : FsmState) : bool
    {
        !(@==(a, b))
    }

    public HaveHistoryPaths : bool
    {
      get
      {
        history_paths != null && history_paths.Count() != 0
      }
    }

    /// <summary>
	  /// Normal and Internal Transitions
	  /// </summary>
    public combined_transitions : list[StateTransition]
    {
      get
      {
        def trans = transitions |> _ : StateTransition;
        def int_trans = internal_tran |> _ : StateTransition;
        trans + int_trans
      }
    }

    /// <summary>
	  /// Work transitions
	  /// </summary>
    public work_transitions : list[StateTransition]
    {
      get
      {
        if (Lived)
        {
          def trans = transitions.Filter(x => !x.IsCompletion) |> _ : StateTransition;
          def int_trans = internal_tran |> _ : StateTransition;
          trans + int_trans
        } else [];
      }
    }

    /// <summary>
	  /// All sub states at all nesting levels
	  /// </summary>
    public AllSubStates : list[FsmState]
    {
      get
      {
        sub_states + (sub_states |>< AllSubStates)
      }
    }

    /// <summary>
	  /// All lived sub states
	  /// </summary>
    public AllLivedSubStates : list[FsmState]
    {
      get
      {
        LivedSubStates + (sub_states |>< AllLivedSubStates)
      }
    }

    /// <summary>
	/// Direct lived sub states without consider of living nesting states of this substates
	/// </summary>
    public LivedSubStates : list[FsmState]
    {
      get
      {
        sub_states.Filter(_.Lived)
      }
    }
    
    /// <summary>
	/// All Lived substates with consider of nesting state life on all nesting levels
	/// </summary>
    public AllLivedSubStatesNested : list[FsmState]
    {
      get
      {
        sub_states.Filter(x => x.LivedNested) + (sub_states |>< AllLivedSubStatesNested)
      }
    }
    
    /// <summary>
	/// Is it Lived state, consider on nesting lived states
	/// </summary>
    public LivedNested : bool
    {
      get
      {
        Lived || !AllLivedSubStates.IsEmpty()
      }
    }
    
    /// <summary>
	/// Direct lived substates with consider of nesting state life
	/// </summary>
    public LivedSubStatesNested : list[FsmState]
    {
      get
      {
        sub_states.Filter(_.LivedNested)
      }
    }
    
    /// <summary>
	  /// Sub states included in the history of this state
	  /// </summary>
    public SubStatesParticipateInHistory : list[FsmState]
    {
      get
      {
        history.MapToList(SubStatesParticipateIn).Flatten()
      }
    }

    public SubStatesParticipateIn(hist : StateChartHistory) : list[FsmState]
    {
      | StateChartHistory where (Type = StateHistory.Deep)  => AllLivedSubStates
      | StateChartHistory where (Type = StateHistory.Shallow)  => LivedSubStatesNested
      | _  => []
    }

    /// <summary>
	  /// History pseudo-states in which participate this state
	  /// </summary>
    public ParticipateInHistory : list[StateChartHistory]
    {
      get
      {
        Analyser.HistoryStates.Filter(x  => x.SubStatesParticipateInHistory.Contains(this))
      }
    }

    public SuperStates : list[FsmState]
    {
      get
      {
        def loop(p, res)
        {
          match (p)
          {
            | null  => res.Rev()
            | p  => loop(p.SuperState, p :: res)
          }
        }

        loop(SuperState, [])
      }
    }

    /// <summary>
	  /// Use both types of history in state
	  /// </summary>
    public BothHistories : bool
    {
      get
      {
        history.IsTwo
      }
    }

    public UsedHistory : list[StateChartHistory]
    {
      get
      {
        history.Value.Filter(_.Used)
      }
    }
    
    public IsOrthogonal : bool
    {
      get
      {
        regions.HasValue
      }
    }
    
    /// <summary>
	  /// Transitions that may change state include from nested states
	  /// </summary>
    public change_transitions_nested : list[StateTransition]
    {
      get
      {
        change_transitions + (AllLivedSubStates |>< change_transitions)
      }
    }
    
    public region_exit_path : PathNode {get;set;}
  }
}
