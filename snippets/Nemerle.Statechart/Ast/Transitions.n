using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Extensions;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Diagnostics;
using Nemerle.Statechart;

namespace Nemerle.Statechart
{
  [Record]    
  [DebuggerDisplay("Actions  =  {ActionList}")]   
  variant StateAction : Actions
  {
    | Entry
    | Exit
    | Do 
        {
          Name : string
          {
            get
            {
              $"DoActivity$(state)"
            }
          }
         
          override ToString() : string
          {
            Name
          }
        }       
    
    
    public state : FsmState;        
  }
    
  partial variant StateTransition
  {
    | Default
        {
          default : StateNode.Default;                  
          history : StateChartHistory;
          
          this(st : FsmState, hist : StateChartHistory, default : StateNode.Default)
          {
            this.default = default;
            history = hist;
            action = default.action;
            From = st;
            To = TransitionTarget.State(FsmState(default.target, true))
          }
                   
          override ToString() : string
          {
            Name
          }
          
        }
    | Initial 
        {          
          initial : StateNode.Initial;
          
          this(st : FsmState, init : StateNode.Initial)
          {
            From = st;
            guard = init.guard;
            action = init.action;
            To =  TransitionTarget.Create(st, TargetType.State(0, init.target));
          }
          
          this(from : FsmState, to : TransitionTarget)
          {
            From = from;
            To = to; 
          }
          
          this(from : FsmState, to : FsmState)
          {
            From = from;
            To = TransitionTarget.State(to);
          }
                                                  
          override ToString() : string
          {
            Name
          }
          
        }
    [DebuggerDisplay("Transition  =  {Name}")]       
    | Transition 
        {
          trigger : StateChartEvent;
          node : StateNode.Transition;
                                                  
          TriggerName : string
          {
            get
            {
              trigger.Name
            }
          }                    
                    
          override ToString() : string
          {
            Name
          }          
          
          static Create(st : FsmState, tr : list[StateNode.Transition]) : list[Transition]
          { 
            $[Transition(st, StateChartEvent(y), x), x in tr, y in x.evt]
          }
                              
          this(st : FsmState, evt : StateChartEvent, tr : StateNode.Transition)
          {
            From = st;
            this.trigger = evt;
            node = tr;
            guard = tr.guard;
            action = tr.action;
            To = TransitionTarget.Create(st, tr.to);
          }
          
          this(tr : Transition)
          {
            From = tr.From;
            trigger = tr.trigger;            
            guard = tr.guard;
            action = tr.action;
            node = tr.node;
            To = tr.To;              
          }
          
          this(st : FsmState, tr : Transition)
          {
            this(tr);
            Source = st;            
          }          
        }          
        
    | Internal
        {
          trigger : StateChartEvent;
          node : StateNode.InternalTransition;
          
          ActionNode : PathNode
          {
            get
            {
              PathNode.Action(action.Value)
            }
          }
                    
          TriggerName : string
          {
            get
            {
              trigger.Name
            }
          }                    

          override ToString() : string
          {
            Name
          }

          this(st : FsmState, tr : Internal)
          {
            this(tr);
            Source = st;            
          }          
          
          this(trigger : StateChartEvent, tran : StateNode.InternalTransition, from : FsmState) 
          {
            this.trigger = trigger;
            node = tran;
            action = Some(node.action);
            guard = node.guard;            
            From = from;
          }

          this(tr : Internal)
          {
            From = tr.From;
            trigger = tr.trigger;            
            guard = tr.guard;
            action = tr.action;
            node = tr.node;                      
          }
          
          static Create(st : FsmState, tr : list[StateNode.InternalTransition]) : list[Internal]
          {
              $[Internal(StateChartEvent(y), x, st), x in tr, y in x.evt]
          }
          
        }
        
        
  }
  
   
}
