using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
    
  /// <summary>
  /// Description of TransitionActions.
  /// </summary>
  partial variant StateTransition
  {
      
    /// <summary>
    /// Состояние реагирующее на событие перехода (начало линии перехода)
    /// </summary>    
    public From : FsmState {get;set;}
    public mutable guard : option[TransitionNode.Guard] = None();
    public mutable action : option[Actions] = None();
    public To : TransitionTarget {get;set;}
    public ActualTo : FsmState {get;set;}
    public Path : TransitionPath {get;set;}
            
    public Destination : TransitionDestination {get;set;}
        
    public FriendlyTriggerName : string
    {
      get
      {
        match (this)
        {                
          | Transition(TriggerName = null) => "Completion" 
          | Transition(TriggerName = trig) 
          | Internal(TriggerName = trig) => trig
          | Initial => "Initial"   
          | Default => "Default"
        }
      }
    }
    
    public IsCrossed : bool {get;set;}
          
    public IsCompletion : bool
    {
      get
      {
        FriendlyTriggerName == "Completion" 
      }
    }

    name : string
    {
      get
      {
        match (this)
        {
          | Transition                => $"Transition$(From)To$(To)In$(Source)By$(FriendlyTriggerName)"
          | Internal(TriggerName = t) => $"InternalTransition$(From)By$(t)"
          | Initial                   => $"InitialTransitionFrom$(From)To$ToState"
          | Default(history = h)      => $"DefaultTransition$(h)To$ActualTo"
        }                      
      }
    }
    
    public Name : string
    {
      get
      {        
        if (NeedGuardedName) GuardedName else name;
      }
    }

    public GuardedName : string
    {
      get
      {
        match (this)
        {
          | StateTransition where (guard = Some(g)) => $"$(name)With$g"
          | _ => Name
        }              
      }
    }
    
    public static GuardComparer : (StateTransition * StateTransition -> int)  =  (g1, g2)  => g2.guard.Compare(g1.guard, (x, y)  => x.condition.CompareTo(y.condition));
    
    public static Comparer : (StateTransition * StateTransition -> int)  =  (t1, t2)  => FsmAnalyser.StringComparator(t1.Name, t2.Name);        
    
    public static FullComparer(t1 : StateTransition, t2 : StateTransition) : int
    {
      ret:
        {
        when (Comparer(t1, t2) == 0)
          when (GuardComparer(t1, t2) == 0)
            when (t1.ActionList.Equals(t2.ActionList, FsmAnalyser.StrEq)) ret(0);
        -1
        }
    }
          /// <summary>
          /// Переходы из родительских состояний пересекающие с текущим
          /// </summary>
    public mutable ParentCrossed : list[StateTransition];
        
    public HistoryTarget : StateChartHistory
    {
      get
      {
        match (To)
        {
          | TransitionTarget.History(hist)  => hist
          | _  => null
        }
      }
    }        
    
    public ToChoice : list[StateTransition] 
    {
      get
      {
        match (Destination)
        {
          | Choice(_, tran) => tran
          | _ => []
        }
      }
    }
    
    public ToState : FsmState
    {
      get
      {
        match (To)
        {
          | TransitionTarget.State(st)  => st
          | _  => null
        }
      }
    }
        
    /// <summary>
    /// Начальное состояние из которого реально осуществляется переход     
    /// </summary>   
    /// <remarks>
    /// (от From отличается что Source показывает текущее активное состояние из которого происходит переход, а не откуда начинается
    /// From определяет начальное состояние из которого на диаграмме выходит переход
    /// Source как правило является вложенным состоянием или тем же что From, если From не имеет подсостояний
    /// </remarks>
    public Source : FsmState {get;set;}      
        
    public TraversePath(recursive : bool = false) : void
    {            
      when (Path == null)
      {
        Path = TransitionPath(this, From.Analyser);                
        Path.Traverse(recursive);      
      }
    }
    
    public PathNode : PathNode
    {
      get
      {
        Path.Path
      }
    }
         
    public Trigger : StateChartEvent
    {
      get
      {
        match (this)
        {
          | Transition(trigger = t)
          | Internal(trigger = t) => t
          | _ => null
        }
      }
    }        
    
    public UpdateReference(map : StateMap) : void
    {
      when (From != null && From.Reference) From = map[From.Name];
      To.UpdateReference(map);      
    }
    
    public ActionList : list[string]
    {
      get
      {
        action.MapDefault(_.ActionList,[])
      }
    }
    
    public Actions : list[string]
    {
      get
      {
        match (this)
        {
          | Internal(ActionNode = a) => a.Actions
          | _  => Path.Actions        
        }
      }
    }

    public WithinRegion : bool
    {
      get
      {
        match (AtLeastTo, Source)
        {
          | (FsmState where (part_of_region = Some(r)), FsmState where (part_of_region = Some(reg))) => r == reg
          | _ => false
        }
      }
    }
    
    public IsNeedCheckRegionFinal : option[FsmState.ConcurrentRegion] {get;set;}
    
    /// <summary>
	  /// State for which transition proceed known at compile time
	  /// </summary>
    public AtLeastTo : FsmState
    {
      get
      {
        match (Destination)
        {
          | null => match (To)
              {
                | Final(st)
                | History(StateChartHistory where (State = st))
                | PseudoState(PseudoStateNode where (state = st))
                | State(st) => st                   
              }              
          | State when ActualTo != null => ActualTo
          | State(st) => st
          | Choice(st, _)
          | Fork(_, ConcurrentRegion as st)
          | History(StateChartHistory where (State = st))           
          | Region(ConcurrentRegion as st) 
          | Terminate(PseudoStateNode.Terminate(state = st)) => st          
          | _ => null
        }
      }
    }
    
    /// <summary>
	  /// Показывает что переход используется
	  /// </summary>
    public mutable Used : bool;
    /// <summary>
	  /// Используется в выборе
	  /// </summary>
    public mutable UsedInChoice : bool;
    /// <summary>
	  /// Показывает что это переход перекрестный для другого
	  /// </summary>
    public mutable CrossFor : bool;
    /// <summary>
		/// Показывает что нужно имя с сторожевым условием, из за перекресток имени
		/// </summary>
    public mutable NeedGuardedName : bool;
    public static NameComparer : StateTransition * StateTransition -> bool = (x, y) => FsmAnalyser.StrEq(x.Name, y.Name);
    
  }
}
