using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{

  /// <summary>
  /// Description of TransitionActions.
  /// </summary>
  partial variant StateTransition
  {

    /// <summary>
    /// State reacts on event of transition (begining of transition line)
    /// </summary>
    public From : FsmState {get;set;}
    public mutable guard : option[TransitionNode.Guard] = None();
    public mutable action : option[Actions] = None();
    public To : TransitionTarget {get;set;}
    public ActualTo : FsmState {get;set;}
    public Path : TransitionPath {get;set;}
    public ImplicitFrom : PseudoStateNode {get;set;}

    public Destination : TransitionDestination {get;set;}

    public FriendlyTriggerName : string
    {
      get
      {
        match (this)
        {
          | Transition(TriggerName = null) => "Completion"
          | Transition(TriggerName = trig)
          | Internal(TriggerName = trig) => trig
          | Initial => "Initial"
          | Default => "Default"
        }
      }
    }

    public IsCrossed : bool {get;set;}

    public IsCompletion : bool
    {
      get
      {
        FriendlyTriggerName == "Completion"
      }
    }

    name : string
    {
      get
      {
        match (this)
        {
          | Transition(ImplicitFrom = null) => $"Transition$(Source)To$(To)By$(FriendlyTriggerName)"
          | Transition(ImplicitFrom = src)  => $"Transition$(src)To$(To)"
          | Internal(TriggerName = t)       => $"InternalTransition$(From)By$(t)"
          | Initial                         => $"InitialTransitionFrom$(From)To$ToState"
          | Default(history = h)            => $"DefaultTransition$(h)To$ActualTo"
        }
      }
    }

    public Name : string
    {
      get
      {
        if (needGuardedName) GuardedName else name;
      }
    }

    public GuardedName : string
    {
      get
      {
        match (this)
        {
          | StateTransition where (guard = Some(g)) => $"$(name)With$g"
          | _ => name
        }
      }
    }

    public static GuardComparer : (StateTransition * StateTransition -> int)  =  (g1, g2)  => g2.guard.Compare(g1.guard, (x, y)  => x.condition.CompareTo(y.condition));

    public static Comparer : (StateTransition * StateTransition -> int)  =  (t1, t2)  => FsmAnalyser.StringComparator(t1.Name, t2.Name);

    public static FullComparer(t1 : StateTransition, t2 : StateTransition) : int
    {
      ret:
        {
        when (Comparer(t1, t2) == 0)
          when (GuardComparer(t1, t2) == 0)
            when (t1.ActionList.Equals(t2.ActionList, FsmAnalyser.StrEq)) ret(0);
        -1
        }
    }
    
    public Delete() : void
    {
      From.DeleteTransitionsNested([this]);
    }
    
    /// <summary>
    /// Transitions from parents crossed by events with this state
    /// </summary>
    public mutable ParentCrossed : list[StateTransition];

    public HistoryTarget : StateChartHistory
    {
      get
      {
        match (To)
        {
          | TransitionTarget.History(hist)  => hist
          | _  => null
        }
      }
    }

    public ToChoice : list[StateTransition]
    {
      get
      {
        match (Destination)
        {
          | Choice(_, tran, _) => tran
          | _ => []
        }
      }
    }

    public ToState : FsmState
    {
      get
      {
        match (To)
        {
          | TransitionTarget.State(st)  => st
          | _  => null
        }
      }
    }

    /// <summary>
    /// Beginning state from which real executes transition
    /// </summary>
    /// <remarks>
    /// (from From differs, what Source shows current active state from which executes transition, not from beginning on diagram
    /// From determines beginning state from which follow out transition
    /// Source as a rule is nested state or same as From, if From not have sub states
    /// </remarks>
    public Source : FsmState {get;set;}

    public TraversePath(recursive : bool = false) : void
    {
      when (Path == null)
      {
        Path = TransitionPath(this, From.Analyser);
        Path.Traverse(recursive);
      }
    }

    public PathNode : PathNode
    {
      get
      {
        Path.Path
      }
    }

    public Trigger : StateChartEvent
    {
      get
      {
        match (this)
        {
          | Transition(trigger = t)
          | Internal(trigger = t) => t
          | _ => null
        }
      }
    }

    public MaybeInlined : bool
    {
      get
      {
        match (Actions, guard)
        {
          | ([], None) => true
          | _ => false
        }        
      }
    }
    
    public UpdateReference(map : StateMap) : void
    {
      when (From != null && From.Reference) From = map[From.Name];
      To.UpdateReference(map);
    }

    public ActionList : list[string]
    {
      get
      {
        action.MapDefault(_.ActionList,[])
      }
    }

    public Actions : list[string]
    {
      get
      {
        match (this)
        {
          | Internal(ActionNode = a) => a.Actions
          | _  => Path.Actions
        }
      }
    }

    public WithinRegion : bool
    {
      get
      {
        match (AtLeastTo, Source)
        {
          | (FsmState where (PartOfSubRegion = Some(r)), FsmState where (PartOfSubRegion = Some(reg))) => r == reg
          | _ => false
        }
      }
    }    

    /// <summary>
	  /// State for which transition proceed known at compile time
	  /// </summary>
    public AtLeastTo : FsmState
    {
      get
      {
        match (Destination)
        {
          | null => match (To)
              {
                | Final(st)
                | History(StateChartHistory where (State = st))
                | PseudoState(PseudoStateNode where (state = st))
                | State(st) => st
                | _ => null
              }
          | State when ActualTo != null => ActualTo
          | State(st) => st
          | Choice(_, _, Some(st))
          | Choice(st, _, _)
          | Fork(st, _)
          | History(StateChartHistory where (State = st))
          | Region(ConcurrentRegion as st)
          | Terminate(PseudoStateNode.Terminate(state = st)) => st
          | _ => null
        }
      }
    }

    [Accessor]
    public mutable executeCheck : list[CheckNode] = [];
    
    public AddCheck(node : CheckNode) : void
    {
      executeCheck = executeCheck + [node]
    }
    
    public FromAndSourceSame : bool
    {
      get
      {
        From == Source
      }
    }
    
    /// <summary>
	  /// Shows that transition is used
	  /// </summary>
    public mutable Used : bool;
    /// <summary>
	  /// Used in Choice of crossed transitions
	  /// </summary>
    public mutable UsedInChoice : bool;
    /// <summary>
	  /// Shows that transition is cross for other
	  /// </summary>
    public mutable CrossFor : bool;
    public SetNeedGuardedName() : void
    {
      needGuardedName = true;
    }

    /// <summary>
		/// Shows what need name with guard out of name crossing
		/// </summary>        
    [Accessor] mutable needGuardedName : bool;
    public static NameComparer : StateTransition * StateTransition -> bool = (x, y) => FsmAnalyser.StrEq(x.Name, y.Name);

  }
}
