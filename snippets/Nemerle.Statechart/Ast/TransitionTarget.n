using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  using PseudoStateAstNode;  
  
  [Record]
  variant TransitionTarget
  {
    | History 
        {
          mutable history : StateChartHistory;
         
          override UpdateReference(map : StateMap) : void
          {
            when (history.Reference) history = map[history.State.Name].GetHistory(history);            
          }

          override ToString() : string
          {        
            $"$(history.State)History"   
          }
          
          this(st : FsmState,  type : TargetType.History)
          {
            history = StateChartHistory(st, type.history, true)            
          }
        }
    | Final
        {
          mutable state : FsmState.FinalState;

          override ToString() : string
          {
            $"$(state)"
          }
          
          this()
          {            
          }
          
          public override UpdateReference(map : StateMap) : void
          {
            when (state != null && state.Reference) state = map[state.Name] :> FsmState.FinalState;
          }            
        }
    | PseudoState
        {
          mutable node : PseudoStateNode;

          this(node : TargetType.PseudoState)
          {              
            this.node = PseudoStateNode.Create(node.node);            
          }

          override UpdateReference(map : StateMap) : void
          {
            node.UpdateReference(map);            
          }
          
          override ToString() : string
          {
            node.ToString()
          }
        }
    | State 
        {
          mutable state : FsmState;
          
          override UpdateReference(map : StateMap) : void
          {
            when (state.Reference) state = map[state.Name];            
          }

          Name : string
          {
            get
            {
              state.Name
            }
          }
          
          override ToString() : string
          {        
            state.ToString();
          }
          
          this(type : TargetType.State)
          {
            state = FsmState(type.state, true);            
          }
          
        }
             
    public static Create(state : FsmState, target : TargetType) : TransitionTarget
    {
      match (target)
      {
        | PseudoState as t  => TransitionTarget.PseudoState(t)  
        | History as t  => TransitionTarget.History(state, t)
        | Final  => TransitionTarget.Final()
        | State as t  => TransitionTarget.State(t);
      }
    }
    
    public virtual UpdateReference(_ : StateMap) : void
    {
         
    }
     
    
  }
  
  [Record]
  variant PseudoStateNode
  {      
    | Junction
    | Choice
    | Fork 
        {
          mutable states : list[FsmState];
       
          override UpdateReference(map : StateMap) : void
          {      
            states=states.Map(map.CheckRef(_));
            base.UpdateReference(map);
          }
        }
    | Join
    | EntryPoint
    | ExitPoint       
    | Terminate
        {          
          
          override ToString() : string
          {            
            "Terminate"
          }
        }
        
    public static Create(st : PseudoStateAstNode) : PseudoStateNode
    {
      | Junction(state = st) => Junction(FsmState(st, true))
      | Choice(state = st) => Choice(FsmState(st, true))
      | Fork(states = lst, state = st) => Fork(FsmState(st, true), lst |> FsmState(_, true))
      | Join(state = st) => Join(FsmState(st, true))
      | EntryPoint(state = st) => EntryPoint(FsmState(st, true))
      | ExitPoint(state = st) => ExitPoint(FsmState(st, true))
      | Terminate(state = st) => Terminate(FsmState(st, true))
    }
        
    public mutable state : FsmState;

    public virtual UpdateReference(map : StateMap) : void
    {            
      when (state != null && state.Reference && state.Name != null) state = map[state.Name];
    }
      
  }

}
