using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  using StateTransition;
  /// <summary>
  /// Description of RegionNode.
  /// </summary>
  class ConcurrentRegion
  {
    [Accessor] mutable states : list[FsmState];
    [Accessor] index : int;
    [Accessor] contained_in : ConcurrentRegions;
    [Accessor] mutable initial : list[Initial] = [];
    
    public this(regions : ConcurrentRegions, node : StateNode.Region, idx : int)
    {
      contained_in = regions;
      states = node.nodes |> FsmState(_, true);
      index = idx;
    }
    
    public UpdateReference(map : StateMap) : void
    {      
      states=states.Map(map.CheckRef(_));
    }
    
    public HaveFinal : bool
    {
      get
      {
        states.Exists(x => x.IsFinal)
      }
    }
    
    public AddState(st : FsmState) : void
    {
      states = states + [st];
    }
    
    public DefineInitial(st : FsmState) : void
    {
      initial ::= Initial(contained_in.State, st);
    }
    
    public events : list[StateChartEvent]
    {
      get
      {
        states |>< events_nested
      }
    }
    
    public SuperState : FsmState
    {
      get
      {
        contained_in.State
      }
    }
    
    public Name : string
    {
      get
      {
        $"$(SuperState)Region$index"
      }
    }
    
    public override ToString() : string
    {
      Name
    }
  }
    
  class ConcurrentRegions
  {
    [Accessor] regions : list[ConcurrentRegion] = [];
    [Accessor] mutable state : FsmState;
    
    [Accessor] mutable exit_pattern : list[list[ConcurrentRegion]] = [];
    
    public this(st : FsmState, node : StateNode.Regions)
    {
      state = st;
      regions = node.regions.MapIndex((x, i) => ConcurrentRegion(this, x, i));
    }
        
    public DefineExitPattern(reg : list[ConcurrentRegion]) : void
    {
      exit_pattern ::= reg;
    }
    
    public RegionsExcept(st : FsmState) : list[ConcurrentRegion]
    {
      regions.Filter(x => !x.States.Contains(st))
    }
    
    public events : list[StateChartEvent]
    {
      get
      {
        state.events_nested
      }
    }
        
    public Name : string
    {
      get
      {
        $"$(state)Regions"
      }
    }

    public override ToString() : string
    {
      Name
    }

    public Used : bool
    {
      get
      {
        state.LivedNested
      }
    }
    /// <summary>
	  /// Indicates that maybe external transitions from some points of orthogonal state out of region not only completion
	  /// </summary>
    public MayTakePlaceForcedTransitions : bool {get;set;}
    
    public UpdateReference(map : StateMap) : void
    {            
      when (state.Reference) state = map[state.Name];
      regions.Iter(_.UpdateReference(map));
    }
    
  }
}
