using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Diagnostics;
using Nemerle.Statechart;

namespace Nemerle.Statechart
{

  using StateTransition;

  [Record]
  [DebuggerDisplay("State  =  {Name}")]
  partial class FsmState
  {

    state : StateNode.State;
    [Accessor] mutable initial : list[Initial] = [];
    public mutable entry : option[StateAction.Entry] = None();
    public mutable exit  : option[StateAction.Exit] = None();

    public do_activity : option[StateAction.Do];
    [Accessor] mutable internal_tran : list[Internal] = [];
    [Accessor] mutable transitions : list[Transition] = [];
    [Accessor] mutable super_state  : FsmState;
    [Accessor] mutable sub_states : list[FsmState] = [];
    public paths : TransitionPaths {get;set;}
    /// <summary>
    /// Позиция в иерархии
    /// </summary>
    public hierarchy_pos : int {get;set;}
    public history : ThreeOption[StateChartHistory] = ThreeOption.None();
    public pseudo_states : list[PseudoStateNode] = [];
    
    /// <summary>
    /// показывает что машина пребывает в этом состоянии и оно не является лишь композитом
    /// </summary>
    public Lived : bool {get;set;}
    [Accessor] regions : option[ConcurrentRegions] = None();    
    [Accessor] mutable history_paths : list[string * HistoryPath] = []; // paths from outer history states    
    
    
    [Accessor] part_of_region : option[ConcurrentRegion] = None();
    
    public this(st : StateNode.State, reference : bool = false)
    {
      this();
      state = st;      
      this.reference = reference ||  state.reference;
      when (!Reference)
      {
        Name = st.name;
        do_activity = st.do_activity |> StateAction.Do(_.action.ActionList, this);
        internal_tran = Internal.Create(this, st.internal_tran);
        entry = st.entry |> StateAction.Entry(_.action.ActionList, this);
        exit = st.exit |> StateAction.Exit(_.action.ActionList, this);
        history = st.history |> StateChartHistory(this, _);
        transitions = Transition.Create(this, st.transitions);
        initial = st.initial |> Initial(this, _);
        super_state = if (st.SuperState != null) FsmState(st.SuperState, true); else null;
        sub_states = st.sub_states &> FsmState;
        regions = st.regions |> ConcurrentRegions(this, _);        
        pseudo_states = st.pseudo_states |> PseudoStateNode.Create(_.node);
        when (super_state != null)
        match (super_state.regions)
        {
          | Some(r) => part_of_region = r.Regions.Find(x => x.States.Exists(y => y == this));
          | _ => ()
        }
      }
    }

    public this()
    {
      Id = StateId(this)
    }

    public class FinalState : FsmState
    {

      public this(super : FsmState, reference : bool =  false)
      {
        base();
        this.super_state = super;
        name =  $"$(super_state)Final";
        IsFinal = true;
        this.reference = reference;
      }

      public override UpdateReference(map : StateMap) : void
      {
        when (super_state.Reference) super_state = map[super_state.name];
      }
    }

    public mutable IsFinal : bool;
    /// <summary>
    /// переходы из родительских состояний которые могут пересекаться с событиями из тек.состояния
    /// </summary>
    public mutable super_state_cross_transitions : list[StateTransition] = [];


    public IsTopState : bool
    {
      get
      {
        Name == TopStateName
      }
    }

    public static TopStateName  =  "[Top]";

    [Accessor]
    mutable reference : bool;
    private mutable name : string;

    public Analyser : FsmAnalyser {get;set;}

    public Id : StateId;

    public Name : string
    {
      get
      {
        if (name != null) name else AstName
      }
      set
      {
        name = value;
      }
    }

    public AstName : string
    {
      get
      {
        state.name
      }
    }

    /// <summary>
	  /// Events for which reacts state
	  /// </summary>
    public events : list[StateChartEvent]
    {
      get
      {
        def evts = transitions |> trigger;
        def evts = evts.Filter(x => !x.IsCompletion);
        evts.RemoveDuplicatesSort(_.CompareTo(_));
      }
    }

    /// <summary>
	  /// Events for which reacts state or nested states
	  /// </summary>    
    public events_nested : list[StateChartEvent]
    {
      get
      {
        def evts = events + (AllLivedSubStates |>< events);
        evts.RemoveDuplicatesSort(_.CompareTo(_));
      }
    }
    
    public override ToString() : string {Name}

    public virtual UpdateReference(map : StateMap) : void
    {
      sub_states.Iter(x  => x.Analyser = Analyser);
      when (super_state != null)
        when (super_state.Reference)
        {
          when (super_state.AstName == null) super_state.Name = TopStateName;
          super_state = map[super_state.Name];
        }
      initial.Iter(_.UpdateReference(map));
      transitions.Iter(_.UpdateReference(map));
      history.Iter(_.UpdateReference(map));
      sub_states.Iter(_.UpdateReference(map));
      regions.Iter(_.UpdateReference(map));
      pseudo_states.Iter(_.UpdateReference(map));
    }

    public GetParentCrossTransitions(tr : StateTransition) : list[StateTransition]
    {
      super_state_cross_transitions.Filter(x  => x.Trigger == tr.Trigger)
    }

    public DefineInitial(st : FsmState) : void
    {
      initial ::= Initial(this, st);
    }

    public AddSubState(st : FsmState) : void
    {
      sub_states = sub_states + [st];
    }

    public CheckAddFinalState() : void
    {            
      match (sub_states.Find(x  => x.this_transitions.Exists(x  => x.To is TransitionTarget.Final)))
      {
        | Some(s) => 
            match (s.part_of_region)
            {
              | Some(r) => r.AddState(FinalState(this))
              | _ => AddSubState(FinalState(this))
            }
        | _ => ()
      }
    }
    
    public DefineTransition(tr : StateTransition) : void
    {
      | Transition as tr => transitions ::= Transition(this, tr);
      | Internal as tr => internal_tran ::= Internal(this, tr)
      | Initial as tr => initial ::= tr;
      | _ => ()
    }

    public DefineSuperStateCrossTransition(tr : StateTransition) : void
    {
      super_state_cross_transitions ::= tr;
    }

    public DefineSuperStateCrossTransitions(tr : list[StateTransition]) : void
    {
      tr.Iter(DefineSuperStateCrossTransition);
      super_state_cross_transitions = super_state_cross_transitions.Sort((x, y)  => y.From.hierarchy_pos - x.From.hierarchy_pos);
    }

    public DefineTransitions(tr : list[StateTransition]) : void
    {
      tr.Iter(DefineTransition);
    }

    public DefineHistoryPath(st : string, nodes : HistoryPath) : void
    {
      history_paths ::= (st, nodes);
    }

    public DefineHistoryPathRecurse(st : string, nodes : HistoryPath) : void
    {
      when (Lived) DefineHistoryPath(st, nodes);
      sub_states.Iter(x  => x.DefineHistoryPathRecurse(st, nodes));
    }

    public DeleteTransitions(tr : list[StateTransition]) : void
    {
      def (tran, int_tran) = tr.Partition(x => x is StateTransition.Transition);
      transitions = transitions.Exclude(tran, StateTransition.NameComparer);
      internal_tran = internal_tran.Exclude(int_tran, StateTransition.NameComparer);
    }

    public SubStateOf(st : FsmState) : bool
    {
      st.AllSubStates.Contains(this)
    }
 
    public TraverseTransitions() : void
    {
      paths = TransitionPaths(this);
      paths.TraverseTransitions(true);
    }
    
    public StateIter(iter : FsmState -> void) : void
    {
      iter(this);
      sub_states.Iter(_.StateIter(iter));
    }
  }
}
