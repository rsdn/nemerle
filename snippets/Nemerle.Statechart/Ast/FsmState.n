using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Diagnostics;
using Nemerle.Statechart;

namespace Nemerle.Statechart
{

  using StateTransition;

  [Record]
  [DebuggerDisplay("State  =  {Name}")]
  partial variant FsmState
  {
    | State  
        {
          public this(st : StateNode.State, reference : bool = false)
          {
            base();
            state = st;      
            this.reference = reference ||  state.reference;
            when (!Reference)
            {
              Name = st.name;
              do_activity = st.do_activity |> StateAction.Do(_.action.ActionList, this, _.flags);
              internal_tran = Internal.Create(this, st.internal_tran);
              entry = st.entry |> StateAction.Entry(_.action.ActionList, this);
              exit = st.exit |> StateAction.Exit(_.action.ActionList, this);
              history = st.history |> StateChartHistory(this, _);
              transitions = Transition.Create(this, st.transitions);
              initial = st.initial |> Initial(this, _);
              def (regs, subst) = st.sub_states.Partition(x => x.regions.HasValue);
              def regs = regs.Map(x => ConcurrentRegion(this, x.regions.Value));              
              super_state = if (st.SuperState != null) State(st.SuperState, true); else null;
              sub_states = (subst &> State) + regs;              
              pseudo_states = st.pseudo_states |> PseudoStateNode.Create(_.node);        
            }
          }
      
        }
    | Final
        {

          public this(super : FsmState, reference : bool =  false)
          {
            base();
            this.super_state = super;
            name =  $"$(super_state)Final";        
            this.reference = reference;
          }

          public override UpdateReference(map : StateMap) : void
          {
            when (super_state.Reference) super_state = map[super_state.name];
          }
        }

    | ConcurrentSubRegion
        {      
          [Accessor] index : int;
          [Accessor] contained_in : ConcurrentRegion;      
      
          public this(regions : ConcurrentRegion, node : StateNode.SubRegion, idx : int)
          {
            contained_in = regions;
            sub_states = node.nodes |> State(_);
            sub_states.Iter(x => x.super_state = this);
            index = idx;
            super_state = regions;            
          }
    
          public override UpdateReference(map : StateMap) : void
          { 
            base.UpdateReference(map);            
            SubStates.StateIter(x => x.part_of_region = Some(this));
          }
      
        }
    
    | ConcurrentRegion
        {
          [Accessor] sub_regions : list[ConcurrentSubRegion] = [];    
    
          [Accessor] mutable exit_pattern : Map[string, list[ConcurrentSubRegion]] = Map();
    
          public this(st : FsmState, node : StateNode.Region)
          {
            name = node.state.name;
            super_state = st;
            sub_regions = node.regions.MapIndex((x, i) => ConcurrentSubRegion(this, x, i));            
            sub_states = sub_regions |> _ : FsmState;            
          }
    
          public DefineExitPattern(reg : list[ConcurrentSubRegion]) : void
          {
            def idx = reg |> Index;
            def idx = idx.Sort(_ - _);
            def idx = idx |> _.ToString();
            def str = string.Join("", idx);
            when (!exit_pattern.Contains(str)) exit_pattern = exit_pattern.Add(str, reg);      
          }
    
          public RegionsExcept(st : FsmState) : list[ConcurrentSubRegion]
          {
            sub_regions.Filter(x => !x.AllSubStates.Contains(st))
          }

          public RegionsExcept(st : ConcurrentSubRegion) : list[ConcurrentSubRegion]
          {
            sub_regions.Exclude([st], _ == _)
          }
              
          /// <summary>
	        /// Indicates that maybe external transitions from some points of orthogonal state out of region not only completion
	        /// </summary>
          public MayTakePlaceForcedTransitions : bool {get;set;}       
     
        }    
    public mutable super_state_cross_transitions : list[StateTransition] = [];

    public this()
    {
      Id = StateId(this)
    }

    public mutable do_activity : option[StateAction.Do];
      
    [Accessor] mutable sub_states : list[FsmState] = [];
    public mutable history : ThreeOption[StateChartHistory] = ThreeOption.None();
    public mutable pseudo_states : list[PseudoStateNode] = [];
            
    [Accessor] mutable history_paths : list[string * HistoryPath] = []; // paths from outer history     
    
    mutable state : StateNode.State;
    
    [Accessor] mutable initial : list[Initial] = [];
    public mutable entry : option[StateAction.Entry] = None();
    public mutable exit  : option[StateAction.Exit] = None();
    [Accessor] mutable internal_tran : list[Internal] = [];
    [Accessor] mutable transitions : list[Transition] = [];
    [Accessor] mutable super_state  : FsmState;
    public mutable part_of_region : option[ConcurrentSubRegion] = None();
    public paths : TransitionPaths {get;set;}
    /// <summary>
    /// показывает что машина пребывает в этом состоянии и оно не является лишь композитом
    /// </summary>
    public Lived : bool {get;set;}
    /// <summary>
    /// Позиция в иерархии
    /// </summary>
    public hierarchy_pos : int {get;set;}
    
    public IsTopState : bool
    {
      get
      {
        Name == TopStateName
      }
    }
    
    public static TopStateName  =  "[Top]";

    [Accessor]
    mutable reference : bool;
    private mutable name : string;

    public Analyser : FsmAnalyser {get;set;}

    public Id : StateId;

    public Name : string
    {
      get
      {        
        def get_name() {if (name != null) name else AstName;}
        match (this)
        {
          | Final => $"$(super_state)Final"
          | State => get_name()
          | ConcurrentRegion => get_name()
          | ConcurrentSubRegion(index = idx, contained_in = r) => $"$(r)SubRegion$idx";
        }
      }
      set
      {
        name = value;
      }
    }

    public AstName : string
    {
      get
      {
        state.name
      }
    }

    /// <summary>
	  /// Events for which reacts state
	  /// </summary>
    public events : list[StateChartEvent]
    {
      get
      {
        def evts = transitions |> trigger;
        def evts = evts.Filter(x => !x.IsCompletion);
        evts.RemoveDuplicatesSort(_.CompareTo(_));
      }
    }

    /// <summary>
	  /// Events for which reacts state or nested states
	  /// </summary>    
    public events_nested : list[StateChartEvent]
    {
      get
      {
        def evts = events + (AllLivedSubStates |>< events);
        evts.RemoveDuplicatesSort(_.CompareTo(_));
      }
    }
    
    public override ToString() : string {Name}

    public virtual UpdateReference(map : StateMap) : void
    {
      Analyser = map.Analyser;      
      when (super_state != null)
        when (super_state.Reference)
        {
          when (super_state.AstName == null) super_state.Name = TopStateName;
          super_state = map[super_state.Name];
        }
      initial.Iter(_.UpdateReference(map));
      transitions.Iter(_.UpdateReference(map));
      history.Iter(_.UpdateReference(map));
      pseudo_states.Iter(_.UpdateReference(map));
    }

    public DefineInitial(st : FsmState) : void
    {
      initial ::= Initial(this, st);
    }

    public AddSubState(st : FsmState) : void
    {
      sub_states = sub_states + [st];
    }

    public CheckAddFinalState() : void
    {            
      match (sub_states.Find(x  => x.this_transitions.Exists(x  => x.To is TransitionTarget.Final)))
      {        
        | Some => AddSubState(Final(this))
        | _ => ()
      }
    }
    
    public DefineTransition(tr : StateTransition) : void
    {
      | Transition as tr => transitions ::= Transition(this, tr);
      | Internal as tr => internal_tran ::= Internal(this, tr)
      | Initial as tr => initial ::= tr;
      | _ => ()
    }

    public DefineTransitions(tr : list[StateTransition]) : void
    {
      tr.Iter(DefineTransition);
    }

    public DefineHistoryPath(st : string, nodes : HistoryPath) : void
    {
      history_paths ::= (st, nodes);
    }

    public DefineHistoryPathRecurse(st : string, nodes : HistoryPath) : void
    {
      when (Lived) DefineHistoryPath(st, nodes);
      sub_states.Iter(x  => x.DefineHistoryPathRecurse(st, nodes));
    }

    public DeleteTransitions() : void
    {
      transitions = [];
    }    
    
    public DeleteTransitions(tr : list[StateTransition]) : void
    {
      def (tran, other) = tr.Partition(_ is StateTransition.Transition);
      def (int_tran, other) = other.Partition(_ is StateTransition.Internal);
      def (init, _) = other.Partition(_ is StateTransition.Initial);
      initial = initial.Exclude(init, (x, y) => StateTransition.FullComparer(x, y) == 0);
      internal_tran = internal_tran.Exclude(int_tran, (x, y) => StateTransition.FullComparer(x, y) == 0);
      transitions = transitions.Exclude(tran, (x, y) => StateTransition.FullComparer(x, y) == 0);      
    }

    public TraverseTransitions() : void
    {
      paths = TransitionPaths(this);
      paths.TraverseTransitions(true);
    }
    
    public StateIter(iter : FsmState -> void) : void
    {
      iter(this);
      sub_states.Iter(_.StateIter(iter));
    }
        
    public static StateIter(this lst : list[FsmState], iter : FsmState -> void) : void
    {        
      lst.Iter(x => x.StateIter(iter));
    }
    
  }
}
