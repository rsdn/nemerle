using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;

namespace Nemerle.Statechart
{

    
  [Record]  
  class StateChartEvent
  {
    [Accessor] evt : TransitionNode.Event;          
    public InternalOnly : bool {get;set;}
          
    public Name : string
    {
      get
      {
        evt.name
      }
    }
          
    public this(e : TransitionNode.Event)
    {
      evt = e;
    }
          
    public CompareTo(b : StateChartEvent) : int
    {
      FsmAnalyser.StringComparator(Name, b.Name)
    }
          
    public static  @== (a : StateChartEvent, b : StateChartEvent) : bool
    {
      FsmAnalyser.StringComparator(a.Name, b.Name) == 0              
    }
         
    public IsCompletion : bool
    {
      get
      {
        Name == null
      }
    }
    
    public FriendlyName : string
    {
      get
      {
        if (IsCompletion) "Completion" else Name;
      }
    }
    
    public override ToString() : string
    {
      $"Event$FriendlyName"
    }
  }        
        
  class StateChartHistory
  {
          
    [Accessor] mutable history : StateNode.History;
    [Accessor] mutable default : option[StateTransition.Default];
    [Accessor] mutable state : FsmState;
    [Accessor] mutable type : StateHistory;
          
    [Accessor] reference : bool;
          
    public Used : bool {get;set;}
          
    public static  @==(a : StateChartHistory, b : StateChartHistory) : bool
    {
      | (null, null)  => true
      | (a, null)  => a : object  ==  null
      | (null, b)  => b : object  ==  null
      | (_, _)  => a.Name == b.Name && a.type == b.type && a.state == b.state
    }

    public static @!=(a : StateChartHistory, b : StateChartHistory) : bool
    {
            !(@==(a, b))
    }
          
    public BothHistories : bool
    {
      get
      {
        state.BothHistories
      }
    }
    
    public Name : string
    {
      get
      {
        def type = match (type)
                   {
                     | Deep  => "Deep"
                     | Shallow  => "Shallow"
                     | None  => ""
                   }
                  
        if (state.history.IsOne) $"$(state)History" else $"$(state)$(type)History"
      }
    }
          
    public SimpleName : string
    {
      get
      {
        $"$(state)History"
      }
    }
          
    public override ToString() : string
    {
      Name
    }
          
    public SubStatesParticipateInHistory : list[FsmState]
    {
      get
      {
        state.SubStatesParticipateIn(this)
      }
    }
                    
    public this(st : FsmState,  hist : StateNode.History, reference : bool = false)
    {
      history = hist;
      state = if (hist.state != null) FsmState(hist.state, true); else st;
      type = hist.type;
      this.reference = reference;
      default = history.default |> StateTransition.Default(state, this, _);
    }
          
    public UpdateReference(map : StateMap) : void
    {
      when (state.Reference) state = map[state.Name];
      when (history.reference)
      {
        def hist  =  state.GetHistory(this);
        type  =  hist.type;
        default  =  hist.default;
      }
      default.Iter(_.UpdateReference(map));
    }

  }
          
}
