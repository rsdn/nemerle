using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;

namespace Nemerle.Statechart
{

  using FsmState;
  
  [Record]  
  class StateChartEvent
  {
    [Accessor] evt : TransitionNode.Event;          
    public InternalOnly : bool {get;set;}
          
    public Name : string
    {
      get
      {
        evt.name
      }
    }
          
    public this(e : TransitionNode.Event)
    {
      evt = e;
    }
          
    public CompareTo(b : StateChartEvent) : int
    {
      FsmAnalyser.StringComparator(Name, b.Name)
    }
          
    public static  @== (a : StateChartEvent, b : StateChartEvent) : bool
    {
      FsmAnalyser.StringComparator(a.Name, b.Name) == 0              
    }
         
    public IsCompletion : bool
    {
      get
      {
        Name == null
      }
    }
    
    public FriendlyName : string
    {
      get
      {
        if (IsCompletion) "Completion" else Name;
      }
    }
    
    public override ToString() : string
    {
      $"Event$FriendlyName"
    }
  }        
        
  class StateChartHistory
  {
          
    [Accessor] mutable history : StateNode.History;
    [Accessor] mutable default : option[StateTransition.Default];
    [Accessor] mutable state : FsmState;
    [Accessor] mutable type : StateHistory;
          
    [Accessor] reference : bool;
          
    public Used : bool {get;set;}
          
    public static  @==(a : StateChartHistory, b : StateChartHistory) : bool
    {
      | (null, null)  => true
      | (a, null)  => a : object  ==  null
      | (null, b)  => b : object  ==  null
      | (_, _)  => a.Name == b.Name && a.type == b.type && a.state == b.state
    }

    public static @!=(a : StateChartHistory, b : StateChartHistory) : bool
    {
            !(@==(a, b))
    }
          
    public BothHistories : bool
    {
      get
      {
        state.BothHistories
      }
    }
    
    public Name : string
    {
      get
      {
        def type = match (type)
                   {
                     | Deep  => "Deep"
                     | Shallow  => "Shallow"
                     | None  => ""
                   }
                  
        if (state.history.IsOne) $"$(state)History" else $"$(state)$(type)History"
      }
    }
          
    public SimpleName : string
    {
      get
      {
        $"$(state)History"
      }
    }
          
    public override ToString() : string
    {
      Name
    }
          
    public SubStatesParticipateInHistory : list[FsmState]
    {
      get
      {
        state.SubStatesParticipateIn(this)
      }
    }
                    
    public this(st : FsmState,  hist : StateNode.History, reference : bool = false)
    {
      history = hist;
      state = if (hist.state != null) FsmState.State(hist.state, true); else st;
      type = hist.type;
      this.reference = reference;
      default = history.default |> StateTransition.Default(state, this, _);
    }
          
    public UpdateReference(map : StateMap) : void
    {
      when (state.Reference) state = map[state.Name];
      when (history.reference)
      {
        def hist  =  state.GetHistory(this);
        type  =  hist.type;
        default  =  hist.default;
      }
      default.Iter(_.UpdateReference(map));
    }
    
  }
          
  [Record]
  variant PseudoStateNode
  {      
    | Junction
    | Choice
    | Fork 
        {
          mutable states : list[FsmState];
       
          override UpdateReference(map : StateMap) : void
          {      
            states=states.Map(map.CheckRef(_));
            base.UpdateReference(map);
          }
          
          override ToString() : string
          {
            $<#Fork$(state)To..$(states;"_")#>
          }
        }
    | Join 
        {
          name : string;
          mutable target : TransitionTarget;
          mutable region : ConcurrentRegion;
          [RecordIgnore] mutable joined_tran : list[StateTransition] = [];
          [RecordIgnore] mutable transition : StateTransition;
          
          trigger : StateChartEvent
          {
            get
            {
              match (joined_tran)
              {
                | [] => null
                | StateTransition where (Trigger = t) :: _ => t
              }
            }
          }
          
          override ToString() : string
          {
            $"Join$(name)"
          }

          override UpdateReference(map : StateMap) : void
          {
            target?.UpdateReference(map);
            base.UpdateReference(map);
          }
          
        }
    | EntryPoint
    | ExitPoint       
    | Terminate
        {                    
          override ToString() : string
          {            
            $"$(state)Terminate"
          }
        }
        
    public static Create(st : PseudoStateAstNode) : PseudoStateNode
    {
      | Junction(state = null) => Junction(null)
      | Junction(state = st) => Junction(State(st, true))
      | Choice(state = null) => Choice(null)
      | Choice(state = st) => Choice(State(st, true))
      | Fork(states = lst, state = null) => Fork(null, lst |> State(_, true))
      | Fork(states = lst, state = st) => Fork(State(st, true), lst |> State(_, true))
      | Join(state = null, name = n, target = _) => Join(null, n, null, null)
      | Join(state = st, name = n, target = t) => def st = State(st, true);
          Join(st, n, TransitionTarget.Create(st, t), null)
      | EntryPoint(state = null) => EntryPoint(null)
      | EntryPoint(state = st) => EntryPoint(State(st, true))
      | ExitPoint(state = null) => ExitPoint(null)
      | ExitPoint(state = st) => ExitPoint(State(st, true))
      | Terminate(state = null) => Terminate(null)
      | Terminate(state = st) => Terminate(State(st, true))
    }
        
    public mutable state : FsmState;

    public virtual UpdateReference(map : StateMap) : void
    {      
      when (state?.Reference) state = map[state.Name]
    }
      
  }
  
  [Record]    
  [DebuggerDisplay("Actions  =  {ActionList}")]   
  variant StateAction : Actions
  {
    | Entry
      {

          Name : string
          {
            get
            {
              $"$(state)Entry"
            }
          }
         
          override ToString() : string
          {
            Name
          }
        
      }
    | Exit
      {
          Name : string
          {
            get
            {
              $"$(state)Exit"
            }
          }
         
          override ToString() : string
          {
            Name
          }
      }
      
    | Do 
        {
          [FlagAccessor (Concurrently,  NoWaitCancel, NotLong, flags = WantSetter)]
          mutable flags : ActivityFlag; // shows that we must run each action concurrently with others                   
          
          Name : string
          {
            get
            {
              $"DoActivity$(state)"
            }
          }
         
          override ToString() : string
          {
            Name
          }
        }       
        
    public state : FsmState;        
  }
  
}
