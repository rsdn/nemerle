using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;

namespace Nemerle.Statechart
{
  [Record]
  variant StateNode
  {
    
    | StateMachine 
        {
          flags : MachineFlags;
          state : State;
          
          this(fl : MachineFlags, st : State)
          {
            flags = fl;
            state = st;
            base(st.pos);
          }
          
          GetErrors() : list[Error]
          {
            def get_errors(st, res)
            {
              st.sub_states.FoldLeft(res + st.errors, get_errors)
            }

            get_errors(state, [])
          }
        }
    | SubRegion  
        {
          name : string;
          initial : list[Initial];
          entry : option[Entry];
          exit : option[Exit];
          internal_tran : list[InternalTransition];
          transitions : list[Transition];
          do_activity : option[DoActivity];
          [RecordIgnore]
          SuperState  : State {get;set;}
          history : TwoOption[History];
          sub_states : list[State];
          pseudo_states : list[PseudoState];

          this(pos : int) 
          {
            base(pos)
          }
        } 
    | Region 
        {
          regions : list[SubRegion];
          state : State;
          transitions : list[Transition];
        }
    | Initial 
        {
          guard : option[TransitionNode.Guard];
          action : option[Actions];
          target : TargetType;
          
          this(pos : int, tran : Transition)
          {
            guard = tran.guard;
            action = tran.action;
            target = tran.to;
            base(pos);
          }
        }
    | Default
        {
          action : option[Actions];
          target : StateNode.State;
          mutable history : History;

          this(act : option[Actions], to : State)
          {
            action = act;
            target = to;
            base(0)
          }

        }
    | Final
        {
          mutable state  : State;

          this(s : State) 
          {
            state = s;
            base(0);
          }
        }
    | State 
        {
          this (n : string) {name = n;reference = true;base(0);}
          
          name : string;
          initial : list[Initial];
          attributes : list[StateAttribute];
          entry : option[Entry];
          exit : option[Exit];
          internal_tran : list[InternalTransition];
          transitions : list[Transition];
          do_activity : option[DoActivity];
          [RecordIgnore]
          SuperState  : State {get;set;}
          history : TwoOption[History];
          sub_states : list[State];
          regions : option[Region];
          [RecordIgnore]
          reference : bool;
          pseudo_states : list[PseudoState];
          errors : list[Error];
        }
    | Entry 
        {
          this(pos : int) {action = Actions([]);base(pos);}
          this(lst : list[string]) {action = Actions(lst);base(0);}
          action : Actions;
        }
    | Exit 
        {
          this(pos : int) {action = Actions([]);base(pos);}
          this(lst : list[string]) {action = Actions(lst);base(0);}
          action : Actions;
        }
    | Error {node : StateNode;}
    | DoActivity {action : Actions;flags : ActivityFlag;}
    | InternalTransition
        {
          evt : list[TransitionNode.Event];
          guard : option[TransitionNode.Guard];
          action : Actions;
          
          Actions : list[string]
          {
            get
            {
              action.ActionList
            }
          }
          
        }
    | Transition 
        {
          evt : list[TransitionNode.Event];
          guard : option[TransitionNode.Guard];
          action : option[Actions];
          to : TargetType;

          ToState : StateNode.State
          {
            get
            {
              match (to)
              {
                | TargetType.State(st)  => st
                | _  => null
              }
            }
          }
          
          this(guard : option[TransitionNode.Guard], action : option[Actions], to : TargetType)
          {
            this.guard = guard;
            this.action = action;
            this.to = to;
            base(to.pos);
          }

          this( evt : List[TransitionNode.Event],  tran : Transition)
          {
            this.evt = evt.NToList();
            guard = tran.guard;
            action = tran.action;
            to = tran.to;
            base(evt.First().pos);
          }
          
        }
            
    | History
        { 
          type : HistoryType;
          default : option[Default];
          mutable state : State;
          reference : bool;
          
          this(pos : int, state : State)
          {
            this.state = state;
            reference = true;
            default = option.None();
            base(pos);
          }
          
          this(pos : int, type : HistoryType, default : option[Default])
          {
            this.type = type;
            this.default = default;
            base(pos);
          }

        }
    | PseudoState
        {
          node : PseudoStateAstNode;
        }
        
    public pos : int {get;set;}
       
  }

}
