using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of TransitionTraverser.
  /// </summary>
  class TransitionTraverser
  {    
    mutable defered : list[StateTransition] = [];
    mutable defered_st : list[FsmState] = [];
    
    public Add(tran : StateTransition) : void
    {
      defered ::= tran;
    }
    
    public Add(tran : list[StateTransition]) : void
    {
      defered += tran;
    }

    public Add(st : FsmState) : void
    {
      defered_st ::= st;
    }    
    
    public Traverse() : void
    {
      def state_queue = defered_st.RemoveDuplicatesSort((x, y) => x.CompareTo(y));
      def tran_queue = defered;
      defered_st = [];
      defered = [];
      state_queue.Iter(x => x.TraverseTransitions());
      tran_queue.Iter(x => x.TraversePath(true));
      match (defered, defered_st)
      {
        // empty queue
        | ([], []) => () // finish traverse
        | (_, _) => Traverse() // else recursive call self and traverse again
      }
    }
  }
}
