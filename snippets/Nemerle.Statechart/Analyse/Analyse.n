using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;

namespace Nemerle.Statechart
{

  using StateTransition;
  using ListUtils;

  partial class FsmAnalyser
  {

    InitStateMap() : void
    {
      InitStatechart();
      statemap.Init(TopState); // initialize the state map
      states = statemap.States;
      concurrent_states = states.Filter(_ is FsmState.ConcurrentSubRegion);
      states.Iter(_.UpdateReference(statemap));
      states.IterI((i, s)  => s.Id.CreateNumId(i));
      hierarchy = states.Sort((x, y)  => x.hierarchy_pos - y.hierarchy_pos);
      CreateHistoryStates();
      when (statemap.HaveErrors)
      {
        statemap.Duplicates.Iter(x  => AddError(FsmError.DuplicateState(x)));
        statemap.Errors.Iter(x  => AddError(FsmError.StateNotFound(x)));
        throw FsmErrorException();
      }
    }

    CreateHistoryStates() : void
    {
      // check history duplicates in state
      def check_dup_history(st)
      {
        match (st.history)
        {
          // duplicate variants
          | TwoOption.Two(StateChartHistory where (Type = StateHistory.Deep), StateChartHistory where (Type = StateHistory.Deep))
          | Two(StateChartHistory where (Type = StateHistory.Shallow), StateChartHistory where (Type = StateHistory.Shallow))  =>
              AddError(FsmError.DuplicateHistory(st, st.history.Value.First()));
          | _  => ()
        }
      }

      def check_exit_actions(st)
      {
        | StateChartHistory where (State = FsmState where (exit = None()) as st) =>
            st.exit = Some(StateAction.Exit([], st))
        | _ => ()
      }

      def history = states.Filter(x  => x.history.HasValue);
      history.Iter(check_dup_history);
      history_states =  history |>< _.history.Value;
      history_states.Iter(check_exit_actions);
    }

    InitEvents() : void
    {
      def int_evts =  states |>< InternalTran |> trigger;
      def evts =  states |>< Transitions |> trigger;
      def evts = evts.Filter(x  => x.Name != null);
      def int_tran_evt = int_evts.RemoveDuplicatesSort(_.CompareTo(_));
      def tran_evt = evts.RemoveDuplicatesSort(_.CompareTo(_));
      def int_tran_evt =  int_tran_evt.Exclude(tran_evt, _  ==  _);
      int_tran_evt.Iter(x  => x.InternalOnly = true);
      def evts =  (int_tran_evt + tran_evt) |> (Name, _);
      events_map = Map(evts);
      events = events_map.Keys();
    }


    CreatePseudoStates() : void
    {
      pseudo_states = states |>< pseudo_states;


    }

    nodes_eq : ((string * PathNode) * (string * PathNode)) -> bool = (x, y) => PathNode.Equals(x[1], y[1]);
    nodes_cmp : ((string * PathNode) * (string * PathNode)) -> int = (x, y) => PathNode.Compare(x[1], y[1]);

    CreateHistory() : void
    {
      def sub =  history_states |> (_, _.State, _.SubStatesParticipateInHistory);  // get all substates participate in history
      def paths =  $[HistoryPath(par, st, h, this), (h, par, s) in sub, st in s]; // create history paths
      paths.Iter(_.CreatePath());
      def paths = paths.Filter(x  => !x.IsDefault);
      def paths = paths.RemoveDuplicatesSort((x, y) => StringComparator(x.Name, y.Name));
      history_paths = paths
    }

    CreateActions() : void
    {
      def check_do(act)
      {
        | StateAction.Do(actions = [_], Concurrently = true) => AddWarning(FsmWarning.NoConcurrentActivity(act));
            act.Concurrently = false
        | _ => ()
      }

      def acts =  trans_paths.Values() |>< Actions;
      def int_acts =  internal_transitions.Values() |>< Actions;
      def acts = acts + int_acts;
      actions = acts.RemoveDuplicatesSort(StringComparator);
      def int_nodes = int_trans_nodes.Values();
      def initial = initial_transition_nodes.Values();
      def start_nodes = TopState.Initial |> PathNode;
      def def_nodes = history_default_transitions |> PathNode;
      do_activities = states.FilterValues(x => x.do_activity);
      do_activities.Iter(check_do);
      action_node = PathNode.Sequence(transition_nodes.Values() + int_nodes + initial + def_nodes + start_nodes);
    }

    CreateConcurrentRegion() : void
    {
      def regs = states.FilterType();
      def (used,not_used) = regs.Partition(x => x.LivedNested);
      not_used.Iter(x => AddWarning(FsmWarning.RegionNotUsed(x)));
      regions = used;
    }
  }
}
