using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;

namespace Nemerle.Statechart
{

  using StateTransition;    
  
  partial class FsmAnalyser
  {

    InitStateMap() : void
    {
      InitStatechart();
      statemap.Init(TopState); // initialize the state map            
      states = statemap.States;
      concurrent_states = states.Filter(_ is FsmState.ConcurrentSubRegion);      
      states.Iter(_.UpdateReference(statemap));
      states.IterI((i, s)  => s.Id.CreateNumId(i));      
      hierarchy = states.Sort((x, y)  => x.hierarchy_pos - y.hierarchy_pos);
      CreateHistoryStates();      
      when (statemap.HaveErrors)
      {
        statemap.Duplicates.Iter(x  => AddError(FsmError.DuplicateState(x)));
        statemap.Errors.Iter(x  => AddError(FsmError.StateNotFound(x)));
        throw FsmErrorException();
      }
    }

    CreateHistoryStates() : void
    {
      // check history duplicates in state
      def check_dup_history(st)
      {
        match (st.history)
        {
          // duplicate variants
          | ThreeOption.Two(StateChartHistory where (Type = StateHistory.Deep), StateChartHistory where (Type = StateHistory.Deep))
          | Two(StateChartHistory where (Type = StateHistory.Shallow), StateChartHistory where (Type = StateHistory.Shallow))  =>
              AddError(FsmError.DuplicateHistory(st, st.history.Value.First()));
          | _  => ()
        }
      }

      def check_exit_actions(st)
      {
        | StateChartHistory where (State = FsmState where (exit = None()) as st) =>
            st.exit = Some(StateAction.Exit([], st))
        | _ => ()
      }

      def history = states.Filter(x  => x.history.HasValue);
      history.Iter(check_dup_history);
      history_states =  history |>< _.history.Value;
      history_states.Iter(check_exit_actions);
    }

    InitEvents() : void
    {
      def int_evts =  states |>< InternalTran |> trigger;
      def evts =  states |>< Transitions |> trigger;
      def evts = evts.Filter(x  => x.Name != null);
      def int_tran_evt = int_evts.RemoveDuplicatesSort(_.CompareTo(_));
      def tran_evt = evts.RemoveDuplicatesSort(_.CompareTo(_));
      def int_tran_evt =  int_tran_evt.Exclude(tran_evt, _  ==  _);
      int_tran_evt.Iter(x  => x.InternalOnly = true);
      def evts =  (int_tran_evt + tran_evt) |> (Name, _);
      events_map = Map(evts);
      events = events_map.Keys();
    }

    CreateSuperStateTransitions() : void
    {
      def create_trans(st)
      {       
        | FsmState.State(SuperState = null)
        | Final => ()
        | FsmState where (SuperState = super) => st.DefineTransitions(super.combined_transitions)
      }

      def check_targets(st)
      {
        def check_tran(tr)
        {
          match (tr.To)
          {
            | TransitionTarget.Final as t  =>
                match (st.SuperState.SubStates.Find(_ is FsmState.Final))
                {
                  | Some(st)  => t.state = st :> FsmState.Final;
                  | _  => ()
                }               
            | TransitionTarget.PseudoState(Terminate(state = null) as node) as t =>
                match (pseudo_states.Filter(_ is PseudoStateNode.Terminate))
                {
                  | [] => node.state = st.SuperState;
                  | [term] => t.node = term
                  | _ => AddError(FsmError.UnknownTerminateTransition(tr))
                }
            | _  => ()
          }
        }

        st.this_transitions.Iter(check_tran)
      }

      states.Iter(check_targets);
      TopState.StateIter(create_trans);
      concurrent_states.Iter(_.DeleteTransitions())
    }

    CheckCrossTransitions() : void
    {
      def group(st, tr)
      {
        match (tr)
        {
          | _ :: []  => () // if not have group exit
          | StateTransition where (guard = Some()) as head :: tail  => head.IsCrossed = true; // cross transition
              def (path, end) = tail.SplitFind(x  => x.guard.IsNone); // get all include last without guard
              head.ParentCrossed = path;
              path.Iter(x => x.CrossFor = true);
              st.DeleteTransitions(end); // delete from usual transitions in state
          | _ :: tail  => st.DeleteTransitions(tail)
          | _  => ()
        }
      }

      def check_cross_tran(st, tr)
      {
        def guard_sorted = tr.Sort((x, y) => StateTransition.GuardComparer(y, x));
        def sorted = guard_sorted.Sort((x, y) => y.From.hierarchy_pos - x.From.hierarchy_pos); // sort on hierarchy position
        group(st, sorted); // group transitions
      }

      def check_cross(st)
      {
        def init = st.Initial |> _ : StateTransition;
        def tran = st.Transitions |> _ : StateTransition;
        def intern = st.InternalTran |> _ : StateTransition;        
        def tran = tran + intern + init;
        def group = FsmState.create_transition_group(tran).Filter((_, x) => x.Length > 1).Values();
        group.Iter(check_cross_tran(st,_))
      }

      TopState.StateIter(check_cross); // check from the top state
    }

    check_duplicates(tr : list[StateTransition]) : void
    {
      def check_duplicate_tran(tr)
      {
        def check_begin_and_ends(tr)
        {
          def equal(lst, lst2)
          {
            lst.Equals(lst2, StrEq);
          }

          when (tr.Length > 1)
          {
            def acts = tr |> ActionList;

            def res = acts.ElementsEqual(equal);
            when (res) AddError(FsmError.DuplicateTransition(tr));
          }
        }

        def ordinary = tr.Filter(x => !(x is Initial || x.IsCompletion));
        def tran = ordinary |> (_ : StateTransition);
        def dups = tran.Duplicates(StateTransition.GuardComparer); // find duplicates with same guards and same triggers
        if (!dups.IsEmpty())
        {
          AddError(FsmError.DuplicateTransition(dups));
        } else
        {
          def (intern, other) = tr.Partition(_ is Internal);
          check_begin_and_ends(intern);
          def begin_and_end_eq = other.Group((x,y) => x.From.CompareTo(y.From) - x.To.CompareTo(y.To));
          def begin_and_end_eq = begin_and_end_eq.Filter(x => x.Length > 1);
          begin_and_end_eq.Iter(check_begin_and_ends)
        }
      }

      def check_override(tr)
      {
        match (tr.Find(x => x.guard.IsNone))
        {
          | Some(t) => def tr = tr.Exclude([t],(x, y) => x == y : object);
              tr.Iter(x => AddWarning(FsmWarning.TransitionOverriden(x, t)));
          | _ => ()
        }
      }

      def group = FsmState.create_transition_group(tr).Values();
      def group = group.Filter(x => x.Length > 1);
      group.Iter(check_duplicate_tran);
      group.Iter(check_override);

    }

    /// <summary>
	  /// Check duplicates
	  /// </summary>
    CheckDuplicates() : void
    {
      states.Iter(x => check_duplicates(x.this_transitions));
      states.Iter(x => check_duplicates(x.Initial |> _ : StateTransition));
    }

    CreatePseudoStates() : void
    {
      pseudo_states = states |>< pseudo_states;
    }

    RenameTransition(tran : list[StateTransition]) : list[string * StateTransition]
    {
      def (dups, tran) = tran.DuplicatesPartition(StateTransition.Comparer);
      dups.Iter(x => x.NeedGuardedName = true);
      def dups = dups |> (GuardedName,_);
      def tran = tran |> (Name,_);
      def tran = tran + dups;
      def (dups, tran) = tran.DuplicatesPartition((x, y) => StringComparator(x[0], y[0]));
      def dups = dups.Group((x,y) => StringComparator(x[0], y[0]));
      dups.Iter(x => AddError(FsmError.DuplicateTransition(x.Split()[1])));
      tran
    }
    /// <summary>
	  /// Creating Transitions
	  /// </summary>
    CreateTransitions() : void
    {
      CreateSuperStateTransitions(); // create parent transitions
      CheckDuplicates(); // check duplicates
      CheckCrossTransitions(); // look for cross transitions
      def int_tran =  states |>< InternalTran;
      def int_tran =  RenameTransition(int_tran |> _ : StateTransition);
      internal_transitions = Map(int_tran.Map((x,y) => (x,y :> Internal)));
    }

    CheckTransitions() : void
    {
      def proc_tran(st, tran)
      {
        match (tran.To)
        {
          | TransitionTarget.State(to) when (!statemap.Contains(st.Name))  => AddError(FsmError.UnknownState(st, to, tran));
          | _  => ()
        }

      }

      def init(st)
      {
        st.Initial.Iter(proc_tran(st, _));
        st.all_transitions.Iter(proc_tran(st, _));
      }

      states.Iter(init);
    }

    nodes_eq : ((string * PathNode) * (string * PathNode)) -> bool = (x, y) => PathNode.Equals(x[1], y[1]);
    nodes_cmp : ((string * PathNode) * (string * PathNode)) -> int = (x, y) => PathNode.Compare(x[1], y[1]);
    
    
    CreateTransitionPaths() : void
    {
      traverser.Add(TopState.Initial |> _ : StateTransition);
      traverser.Traverse(); // model the fsm traversing states and transition from top recursively through initial transition and pseudo states
      def paths = $[x.paths,x in states, x.paths!=null];
      def (lived, empty) =  states.Partition(_.LivedNested); // determine lived states
      lived_states = lived;
      def all_tran = states |>< all_transitions;
      def (trans, not_used) = all_tran.Partition(x => x.Used);
      def not_used = not_used.Filter(x => x.From.Lived);
      empty.Iter(x => AddWarning(FsmWarning.StateNotUsed(x))); // warning about all without substates and not lived that is not used
      not_used.Iter(x => AddWarning(FsmWarning.TransitionNotUsed(x)));
      trans_paths = Map(paths |> (_.State.Name, _)); // save in field
      def trans = RenameTransition(trans);      
      def trans_nodes =  trans.Map((x, y) => (x, y.PathNode));  // nodes
      def trans_nodes = trans_nodes.RemoveDuplicatesSort(nodes_cmp);
      def map = Map(trans);
      transitions = map;
      def int_nodes = internal_transitions |> (_, _[2].ActionNode);
      int_trans_nodes = Map(int_nodes.RemoveDuplicatesSort(nodes_cmp));
      transition_nodes = Map(trans_nodes);
      def (used_hstates, not_used) = history_states.Partition(x  => x.Used);
      history_states = used_hstates;
      not_used.Iter(x => AddWarning(FsmWarning.HistoryNotUsed(x)));
      def select = trans.Filter((_,x)  => x.HistoryTarget == null);
      work_transitions = Map(select);
      def work_nodes = select |> (_,_[2].PathNode);
      work_transition_nodes =  Map(work_nodes.RemoveDuplicatesSort(nodes_cmp));
    }

    UpdateInitial() : void
    {
      def init = states |>< Initial;
      def init = init.Filter(x => x.UsedInChoice || x.From.IsTopState);
      def reg_init = (regions |>< SubRegions |>< Initial);
      def defs = init + reg_init;
      def (init, not_used) = defs.Partition(x => x.Used);
      not_used.Iter(x => AddWarning(FsmWarning.TransitionNotUsed(x)));
      def (init, not_used) = init.Partition(x => x.Used);
      not_used.Iter(x => AddWarning(FsmWarning.TransitionNotUsed(x)));
      def init = RenameTransition(init |> _ : StateTransition);
      initial_transitions = Map(init.Map((x,y) => (x,y :> Initial)));
      def init_nodes = init |> (_, _[2].PathNode);
      initial_transition_nodes = Map(init_nodes.RemoveDuplicatesSort(nodes_cmp));
    }

    CreateHistory() : void
    {
      def sub =  history_states |> (_, _.State, _.SubStatesParticipateInHistory);  // get all substates participate in history
      def paths =  $[HistoryPath(par, st, h, this), (h, par, s) in sub, st in s]; // create history paths
      paths.Iter(_.CreatePath());
      def paths = paths.Filter(x  => !x.IsDefault);
      def paths = paths.RemoveDuplicatesSort((x, y) => StringComparator(x.Name, y.Name));
      history_paths = paths
    }

    CreateActions() : void
    {
      def check_do(act)
      {
        | StateAction.Do(actions = [_], Concurrently = true) => AddWarning(FsmWarning.NoConcurrentActivity(act));
            act.Concurrently = false
        | _ => ()
      }

      def acts =  trans_paths.Values() |>< Actions;
      def int_acts =  internal_transitions.Values() |>< Actions;
      def acts = acts + int_acts;
      actions = acts.RemoveDuplicatesSort(StringComparator);
      def int_nodes = int_trans_nodes.Values();
      def initial = initial_transition_nodes.Values();
      def start_nodes = TopState.Initial |> PathNode;
      def def_nodes = history_default_transitions |> PathNode;
      do_activities = states.FilterValues(x => x.do_activity);
      do_activities.Iter(check_do);
      action_node = PathNode.Sequence(transition_nodes.Values() + int_nodes + initial + def_nodes + start_nodes);
    }

    CheckInitialTransitions() : void
    {
      def check_auto_initial(st)
      {
        when (st.Initial.IsEmpty() && !(st is FsmState.Final))
          match (st)
          {
            | ConcurrentRegion => ()
            | FsmState where (SubStates = head :: _) => when (!(head is FsmState.Final)) st.DefineInitial(head);
            | _ => ()
          }
      }

      states.Iter(x => check_duplicates(x.Initial |> (_ : StateTransition)));  // check duplicates
      when (fsm.flags.AutoInitial) states.Iter(check_auto_initial);

      when (TopState.Initial.IsEmpty()) // if not have initial transition in top state
        if (TopState.Transitions.IsEmpty()) // if not have other transitions
          check_auto_initial(TopState) // initial is first substate
        else TopState.DefineInitial(TopState); // else initial transition is top state

    }

    CreateConcurrentRegion() : void
    {
      def regs = states.FilterType();
      def (used,not_used) = regs.Partition(x => x.LivedNested);
      not_used.Iter(x => AddWarning(FsmWarning.RegionNotUsed(x)));
      regions = used;
    }
  }
}
