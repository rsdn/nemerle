using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nemerle.Statechart;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
   
  partial class FsmAnalyser
  {

    [Accessor] statemap : StateMap;
    [Accessor] mutable lived_states : list[FsmState];
    [Accessor] mutable states : list[FsmState];
    [Accessor] mutable events : list[string];
    [Accessor] mutable transitions : Map[string, StateTransition];
    [Accessor] mutable internal_transitions : Map[string, StateTransition.Internal];
    mutable events_map : Map[string, StateChartEvent]; // event * for internal transition
    mutable trans_paths : Map[string, TransitionPaths];
    [Accessor] mutable transition_nodes : Map[string, PathNode];
    [Accessor] mutable int_trans_nodes : Map[string, PathNode];
    [Accessor] mutable actions : list[string];
    [Accessor] mutable action_node : PathNode;    
    [Accessor] mutable hierarchy : list[FsmState];
    [Accessor] mutable history_states : list[StateChartHistory];
    [Accessor] mutable history_paths : list[HistoryPath];
    [Accessor] mutable work_transitions : Map[string, StateTransition];
    [Accessor] mutable work_transition_nodes : Map[string, PathNode];
    [Accessor] mutable initial_transition_nodes : Map[string, PathNode];
    [Accessor] mutable initial_transitions : Map[string, StateTransition.Initial];
    [Accessor] mutable do_activities : list[StateAction.Do];
    [Accessor] mutable regions : list[FsmState.ConcurrentRegion]; 
    [Accessor] mutable pseudo_states : list[PseudoStateNode];    
    [Accessor] traverser : TransitionTraverser = TransitionTraverser();
    [Accessor] mutable concurrent_states : list[FsmState];
    
    [Accessor]    
    fsm : StateNode.StateMachine;

    Init() : void
    {
      Errors = [];
      Warnings = [];
    }

    InitStatechart() : void
    {
      def init_states(st, pos)
      {
        st.hierarchy_pos = pos;
        st.CheckAddFinalState(); // check to add final state
        st.SubStates.Iter(init_states(_, pos + 1)); // init sub states
      }

      topState = FsmState.State(fsm.state); // create statemachine from top state
      TopState.Name = FsmState.TopStateName;
      init_states(TopState, 0); // init state map
    }

    CheckParseErrors() : void
    { 
      def check_err(err)
      {
        | StateNode.Error(StateNode.DoActivity as node) => AddParseError(ParseError.DuplicateActivity(node))
        | StateNode.Error(node) => AddParseError(ParseError.UnknownElement(node))
      }
      
      def err = fsm.GetErrors();
      err.Iter(check_err);
    }
    
    public AddParseError(err : ParseError) : void
    {
      def str = "Parse Error:" + match (err)
                  {
                    | DuplicateActivity(act) => $<#Duplicate do activity $act, state may have only one do activity node#>
                    | UnknownElement(node) => $<#Unknown parse node $node #>
                  }
      Errors ::= str;
    }
    
    public AddError(err : FsmError) : void
    {
      def str = match (err)
                {
                  | DuplicateState(name)  => $<#Duplicated state "$(name)"#>
                  | StateNotFound(s)  => $<#State "$s" Not Found#>
                  | UnknownState(s, name, tran)  => $<#Transition "$tran" in "$s" has unknown target state "$name"#>
                  | DuplicateTransition(tran)  => $<#Duplicate transitions "$tran"#>;
                  | DuplicateHistory(st, hist)  => $<#Duplicate history of type "$(hist.Type)" in "$st"#>
                  | HistoryMustHaveDefault(st)  => $<#During history transition there is a situation when history "$st" must have default transition#>
                  | RegionMustContainInitial(reg, tran) => $<#Transition "$tran" requires region "$reg" to contain initial transition in each of it sub regions#>
                  | SubRegionsMustContainInitial(reg, tran) => $<#Transition "$tran" requires sub regions "$reg" to contain initial transitions#>
                  | UnknownTerminateTransition(tran) => $<#Unknown terminate transition target of "$tran", there is several terminate pseudo states, specify full name#>                  
                  | ForkMustGoToRegion(f) => $<#Fork "$f" must go to concurrent regions#>                  
                  | x  => $"Unknown Error$x"
                }
      Errors ::= str;
    }

    public AddWarning(err : FsmWarning) : void
    {
      def str = match (err)
                {
                  | HistoryNotUsed(hist = StateChartHistory where (State = st, Type = t))  => $<#"$t" History in "$st" is not used in fsm life history#>
                  | StateNotUsed(state = st) => $<#State "$st" is not used in fsm life history#>
                  | TransitionNotUsed(tran) => $<#Transition "$tran" is not used in fsm life history#>
                  | RegionNotUsed(reg) => $<#Concurrent region "$reg" is not used in fsm life history#>
                  | NoConcurrentActivity(act) => $<#There is no other activities in do activity node $act. Flag is no meaning, concurrent activity means that several activities may run concurently in do activity region of state.#>
                  | TransitionOverriden(tran,by) => $<#Transition $(tran.GuardedName) is overriden by $(by.GuardedName), due to execute priority rules, because these transition is unguarded#>
                  | x  => $"Unknown Warning $x"
                }
      Warnings ::= str;
    }

    public this(fsm : StateNode.StateMachine)
    {
      this.fsm = fsm;
      statemap = StateMap(this);
      Init();
    }

    public Errors : list[string] {get;set;}
    public Warnings : list[string] {get;set;}

    FinalizeAnalyse() : void
    {
      Errors = Errors.Rev();
      Warnings = Warnings.Rev();
    }
    
    public Analyse() : void
    {      
      try
      {
        CheckParseErrors();
        InitStateMap();      
        InitEvents();
        CreatePseudoStates();
        CheckInitialTransitions();
        CreateTransitions();        
        CheckTransitions();            
        CreateTransitionPaths();  
        CreateConcurrentRegion();              
        UpdateInitial();
        CreateHistory();
        CreateActions();      
        FinalizeAnalyse();
      }
      catch 
      {
        | _ is FsmErrorException => ()
      }
    }
    
    public TransitionEvents : list[StateChartEvent]
    {
      get
      {
        events_map.Values()
      }
    }

    public Error : bool
    {
      get
      {
         !Errors.IsEmpty()
      }
    }

    public guards : list[TransitionNode.Guard]
    {
      get
      {
        def guards = transitions.Values().FilterValues(x  => x.guard);
        def guards = initial_transitions.Values().FilterValues(x  => x.guard) + guards;
        guards.RemoveDuplicatesSort((x, y)  => StringComparator(x.Name, y.Name))
      }
    }

    public history_transitions : Map[string, StateTransition]
    {
      get
      {
        transitions.Filter((_, x)  => x.HistoryTarget != null);
      }
    }

    public history_default_transitions : list[StateTransition.Default]
    {
      get
      {
        history_states.FilterValues(_.Default).Filter(x  => x.ActualTo != null)
      }
    }

    public all_transitions : list[StateTransition]
    {
      get
      {            
        def b = work_transitions.Values() |> _ : StateTransition;
        def c = initial_transitions.Values() |> _ : StateTransition;
        def d = history_default_transitions |> _ : StateTransition;
        b + c + history_transitions.Values() + d        
      }
    }
    
    public ActionNodes : list[PathNode]
    {
      get
      {
        action_node.Unsequenced.RemoveDuplicatesSort(PathNode.Compare)        
      }
    }

    public static StringComparator : string * string -> int  =  string.Compare(_, _, StringComparison.CurrentCulture);
    // TODO: сделать макрос сравнения строк с помощью одной установки
    public static StrEq : string * string -> bool  =  (x, y)  => StringComparator(x, y) == 0;


    [Accessor]
    public mutable topState : FsmState;

  }
}
