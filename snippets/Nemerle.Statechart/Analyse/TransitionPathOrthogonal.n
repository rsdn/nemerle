using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{

  using CheckNode;
  using StateTransition;
  using PathNode;
  using TransitionDestination;
  using FsmState;

  /// <summary>
  /// Description of TransitionPathOrthogonal.
  /// </summary>
  partial class TransitionPath
  {

    TraverseJoinTransition(join : PseudoStateNode.Join, tr : StateTransition) : TransitionDestination
    {
      | (Join(joined_tran = jtran, region = reg, state = st, transition = tran), StateTransition where (Source = src)) =>

      tr.AddCheck(RegionStates(reg, jtran |> From));
      def has_guard = jtran.Exists(x => x.guard.HasValue);
      def last_tran = jtran.Last();
      def last_reg = last_tran.From.PartOfSubRegion.Value;
      def last = tr.From.PartOfSubRegion.Value == last_reg;
      tr.Used = true;
      when (tran.Path == null) traverser.Add(tran);
      if (last)
      {
        when (has_guard) tr.AddCheck(Join(join));
        DefPath(src, st, tran);
        TraverseTarget(join.target) // traversing transition target
      } else
      {
        DefExitPath(src, st);
        Join(join)
      }
    }

    TraverseFork(fork : PseudoStateNode.Fork, st : list[FsmState]) : TransitionDestination
    {
      def reg = st |> _.PartOfSubRegions;
      if (!reg.IsEmpty() && reg.All(x => !x.IsEmpty()))
      {
        def sreg = reg |> _.Last();        
        def st = st.Sort((x, y) => x.PartOfSubRegion.Value.index - y.PartOfSubRegion.Value.index);
        def dups = sreg.Duplicates((x, y) => x.index - y.index);
        when (dups.Length != 0) analyser.AddError(FsmError.ForkMustGoToSeparateRegion(fork));        
        def reg = sreg.Head.contained_in;        
        def sub_trans = st |> StateTransition.Transition(reg, _, fork) : StateTransition;
        sub_trans.Iter(x => x.Local = true);
        traverser.Add(sub_trans);
        reg.MayForkingFromOut = true;
        Fork(reg, sub_trans)
      } else
      {
        analyser.AddError(FsmError.ForkMustGoToRegion(fork));
        Unknown()
      }
    }

    TraverseOrthogonalRegion(reg : ConcurrentRegion) : TransitionDestination
    {
      def initial = reg.sub_regions |> Initial;
      when (!initial.All(x => !x.IsEmpty())) analyser.AddError(FsmError.RegionMustContainInitial(reg, transition));      
      def init = initial.Flatten();
      traverser.Add(init |> _ : StateTransition);
      Region(reg)
    }

    TraverseSubRegion(reg : ConcurrentSubRegion, st : FsmState) : TransitionDestination
    {
      def region = reg.contained_in;      
      def omitted = region.RegionsExcept(st); // other omitted regions
      def initial = omitted |> Initial;
      when (!initial.All(x => !x.IsEmpty())) analyser.AddError(FsmError.SubRegionsMustContainInitial(omitted, transition));
      def init = initial.Flatten();
      def regs = reg.PartOfRegions;
      regs.Iter(x => x.DefineEnterPattern(x.RegionsExcept(st)));      
      traverser.Add(init |> _ : StateTransition);      
      SubRegion(reg, TraverseStateTarget(st), transition.From)
    }

    DefineRegionsExit(region : ConcurrentSubRegion) : void
    {
      foreach (st in region.SubStates)
      {
        def (exit, _) = FindPath(st, region.SuperState, [], []); // exit state nested in region
        def exit = ExitNodeCreate(exit); // create exit state node
        st.region_exit_path = exit;
      }
    }

    TraverseTransitionFromRegion(reg : ConcurrentSubRegion, tran : StateTransition) : TransitionDestination
    {
      | (ConcurrentSubRegion(contained_in = region, PartOfRegions = regs), StateTransition where (Source = src, From = from)) =>

          region.sub_regions.Iter(DefineRegionsExit); // define exit actions from region          
          regs.Iter(x => x.DefineExitPattern(x.RegionsExcept(src)));          
          DefPath(src, from, tran);
          region.MayTakePlaceForcedTransitions = true;
          tran.Used = true;
          TraverseTarget(tran.To) // traversing transition target
    }

  }
}
