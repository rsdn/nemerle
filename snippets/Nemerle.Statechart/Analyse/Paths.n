using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System.Diagnostics;
using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;

namespace Nemerle.Statechart
{
  [Record]  
  variant PathNode
  {        
    |Entry 
        {
          actions : TransitionNode.Actions;
          state : FsmState;
           
          override ToString() : string
          {
            $"PathNode+Entry$state"
          }
                         
        }
    |Exit 
        {
          actions : TransitionNode.Actions;
          state : FsmState;
          
          
          override ToString() : string {$"PathNode+Exit$state"}           

          
        }
    |Action {actions : TransitionNode.Actions; }
    |ClearHistory 
        {
          history : list[StateChartNode.History];
                  
          override ToString() : string {$"PathNode+ClearHistory$history"}           
        }    
    |ChangeState 
        {
          st : FsmState;
          
          override ToString() : string {$"PathNode+ChangeState$st"}           
        } 
     
    public Actions : list[string]
    {
      get
      {
        match (this)
        {
          |Entry(actions=act) 
          |Exit(actions=act) 
          |Action(actions=act) => act.ActionList
          |_ => []
        }
      }
    }          

//    [Visibility(Public)]
    //ActList : array[string]
    //{
    //  get
    //  {
    //    actions.ActionList//actions|> name.ToArray()
    //  }
    //}
    
  }
  
  /// <summary>
  /// Description of TransitionPath.
  /// </summary>
  class TransitionPaths
  {
    [Accessor]
    mutable paths : list[StateChartNode.Event * TransitionPath];
    [Accessor]
    state : FsmState;        
        
    public this(st : FsmState)
    {
      state=st;            
    }
    
    public Create() : void
    {
      def trans=state.all_transitions;
      trans.Iter(_.CreatePath());
      def paths=trans |> (trigger,Path);
      this.paths=paths;      
    }
    
    public Actions : list[string]
    {
      get
      {        
        (paths ^|>< Actions).RemoveDuplicates();
      }
    }
    
    public ActionNodes : list[PathNode]
    {
      get
      {
        paths ^|>< Path        
      }
    }
    
    public static FindTransition(this st : FsmState, evt : StateChartNode.Event) : option[StateTransition.Transition]
    {
      |(null,_) => option.None()
      |(_,e) when e.Name==null => st.transitions.Find(_.IsCompletion)
      |(_,e) => st.transitions.Find(x => x.trigger==e)
    }

    public static FindTransitions(this st : FsmState, evt : StateChartNode.Event) : list[StateTransition.Transition]
    {
      |(null,_) => []
      |(_,e) when e.Name==null => st.transitions.Filter(x => x.IsCompletion)
      |(_,e) => st.transitions.Filter(x => x.trigger==e)
    }
    
    public static FindIntTransition(this st : FsmState, evt : StateChartNode.Event) : option[StateChartNode.InternalTransition]
    {
      |(null,_) => option.None()
      |_ => st.internal_tran.Find(x => x.trigger==evt);
    }          
    
  }
  
}
