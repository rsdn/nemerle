using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System.Diagnostics;
using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;

namespace Nemerle.Statechart
{
  [Record]  
  variant PathNode
  {            
    | Empty
    | Sequence {seq : list[PathNode];}
    | Entry 
        {
          action : StateAction.Entry;          
           
          override ToString() : string
          {
            $"$(action.state)Entry"
          }
                         
        }
    | Exit 
        {
          action : StateAction.Exit;
          
          
          override ToString() : string {$"$(action.state)Exit"}           

          
        }
    | Action 
        {
          actions : Actions; 
        
          override ToString() : string {$"PathNode+Action$(actions)"}           
        }
    | ClearHistory 
        {
          history : list[StateChartHistory];
                  
          override ToString() : string {$"PathNode+ClearHistory$history"}           
        }    
        
    | RunDoActivity 
        {
          activity : StateAction.Do;
          
          override ToString() : string {$"$(activity)Run"}           
        }    
      
    | StopDoActivity 
        {
          activity : StateAction.Do;
          
          override ToString() : string {$"$(activity)Stop"}
        }    
    | ForceStateChange
        {
          state : FsmState;
          
          override ToString() : string {$"PathNode+ForceStateChange$state"}
        }
        
    | RegionExit {states_in : list[ConcurrentRegion];region : ConcurrentRegions;}
    | RegionsExit {region : ConcurrentRegions;}    
    
    public static @+(a : PathNode, b : PathNode) : PathNode
    {
      Sequence([a, b])
    }
        
    public Unsequenced : list[PathNode]
    {
      get
      {
        match (this)
        {
          | Sequence(lst) => lst |>< Unsequenced
          | Empty => [] 
          | x => [x]
        }
      }
    }    
    
    public Actions : list[string]
    {
      get
      {
        match (this)
        {
          | Entry(action = act)
          | Exit(action = act) 
          | Action(actions = act)  => act.ActionList
          | Sequence(seq) => seq |>< Actions
          | _  => []
        }
      }
    }          
    
  }
  
  /// <summary>
  /// Description of TransitionPath.
  /// </summary>
  class TransitionPaths
  {
    [Accessor]
    mutable paths : list[StateChartEvent * TransitionPath];
    [Accessor]
    state : FsmState;        
        
    public this(st : FsmState)
    {
      state = st;            
    }
    
    public TraverseTransitions(recursive : bool = false) : void
    {
      def trans = state.all_transitions;
      trans.Iter(_.TraversePath(recursive));
      def paths = trans |> (Trigger, Path);
      this.paths = paths;      
    }
    
    public Actions : list[string]
    {
      get
      {        
        (paths ^|>< Actions).RemoveDuplicates();
      }
    }
    
    public ActionNodes : list[PathNode]
    {
      get
      {
        paths ^|> Path
      }
    }
    
    public static FindTransitions(this st : FsmState,  evt : StateChartEvent) : list[StateTransition.Transition]
    {
      | (null, _)  => []
      | (_, e) when e.Name == null  => st.Transitions.Filter(x  => x.IsCompletion)
      | (_, e)  => st.Transitions.Filter(x  => x.trigger == e)
    }
    
  }
  
}
