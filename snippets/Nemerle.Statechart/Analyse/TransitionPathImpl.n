using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;

namespace Nemerle.Statechart
{
    
    using PathNode;
    
  /// <summary>
  /// Description of TransitionPathImpl.
  /// </summary>
  partial class TransitionPath
  {
    [Accessor]
    transition : StateTransition;
    analyser : FsmAnalyser;    
        
    FindPath(src_st : FsmState, 
             dest_st : FsmState, 
             exit : list[FsmState], 
             entry : list[FsmState]
             ) : list[FsmState] * list[FsmState]
    {
      def find_path(st, dest, ex, en)
      {        
        match (st, dest)
        {
          // если не найден
          |  (null, null)  => ([], []) 
          |  (null, d)  => find_path(src_st, d.SuperState, exit, d :: en) // если дошли до вершины но есть еще состояния не просмотренные
          // если найден родитель
          |  (s, d) when (d == s)  => (ex.Rev(), en)
          // иначе ищем дальше через родитель 
          |  (s, d)  => find_path(s.SuperState, d, s :: ex, en)
        }             

      }
      find_path(src_st, dest_st, exit, entry)
    }

     //* 1. The source and target are the same (self-transition).
                 //* -2. The target is a substate of the source. (local or external?)
                 //* -3. The source is a substate of the target. (local or external?)
                 //* 4. The source and target share the same superstate.
                 //* 5. All other cases.
                 //*     a. The source and target reside at the save level in the 
                 //*        hiearchy (but do not share the same superstate).
                 //*     b. The source is lower in the hiearchy than the target.
                 //*     c. The target is lower in the hierarchy than the source.
                 //* 
                 //* Case 1: Immediately performs the transition.
                 //* 
                 //* Case 2: Traverses the hierarchy from the source to the target,  
                 //*         entering each state along the way. No states are exited.
                 //* 
                 //* Case 3: Traverses the hierarchy from the source to the target,  
                 //*         exiting each state along the way. The target is then 
                 //*         entered.
                 //* 
                 //* Case 4: The source is exited and the target entered.
                 //* 
                 //* Case 5: Traverses the hiearchy until a common superstate is met.
    FindLCA(st : FsmState, 
            dest_st : FsmState) : list[FsmState] * list[FsmState]
    {                  
      FindPath(st.SuperState, dest_st.SuperState, st :: [], dest_st :: []);
    }                
    
    AddAction(nodes : PathNode, act : option[Actions]) : PathNode
    {
      | (n, Some(act))  => n + Action(act)
      | (n, _)  => n
    }     
            
    EntryNodeCreate(nodes : list[FsmState]) : PathNode
    {
      def entering_state(st)
      {
        | StateAction.Entry(state = FsmState where (do_activity = Some(act))) =>  Entry(st) + RunDoActivity(act)
        | StateAction.Entry => Entry(st)
      }
      
      def entry = nodes.FilterValues(_.entry);
      Sequence(entry |> entering_state(_))
    }
      
    ExitNodeCreate(nodes : list[FsmState]) : PathNode
    {  
      def exiting_state(st)
      {
        | StateAction.Exit(state = FsmState where (do_activity = Some(act))) => StopDoActivity(act) + Exit(st)
        | StateAction.Exit => Exit(st)
      }
      
      def exit = nodes.FilterValues(_.exit);
      Sequence(exit |> exiting_state(_))
    }

    NodesCreate(ex : list[FsmState], tran : StateTransition,  en : list[FsmState]) : PathNode
    {
      def node = ExitNodeCreate(ex); // создаем узел пути выходных действий     
      def node = AddAction(node, tran.action); // добавляем действия
      def entry_nodes = EntryNodeCreate(en); // создаем узел пути входных действий      
      node + entry_nodes // собираем вместе узлы
    }
        
    static completion : StateChartEvent = StateChartEvent(TransitionNode.Event(0, null));

  }
}
