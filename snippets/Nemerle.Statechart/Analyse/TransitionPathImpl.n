using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;

namespace Nemerle.Statechart
{

  using PathNode;        
  /// <summary>
  /// Description of TransitionPathImpl.
  /// </summary>
  partial class TransitionPath
  {
    FindPath(src_st : FsmState,
             dest_st : FsmState,
             exit : list[FsmState],
             entry : list[FsmState]
             ) : list[FsmState] * list[FsmState]
    {
      def find_path(st, dest, ex, en)
      {
        match (st, dest)
        { 
          // если не найден
          |  (null, null)  => ([], [])          
          // если дошли до вершины но есть еще состояния не просмотренные
          |  (null, d)  => find_path(src_st, d.SuperState, exit, d :: en) 
          // если найден родитель
          |  (s, d) when (d == s)  => (ex.Rev(), en)
          // иначе ищем дальше через родитель          
          |  (s, d)  => find_path(s.SuperState, d, s :: ex, en)
        }

      }
      find_path(src_st, dest_st, exit, entry)
    }

     //* 1. The source and target are the same (self-transition).
                 //* -2. The target is a substate of the source. (local or external?)
                 //* -3. The source is a substate of the target. (local or external?)
                 //* 4. The source and target share the same superstate.
                 //* 5. All other cases.
                 //*     a. The source and target reside at the save level in the
                 //*        hiearchy (but do not share the same superstate).
                 //*     b. The source is lower in the hiearchy than the target.
                 //*     c. The target is lower in the hierarchy than the source.
                 //*
                 //* Case 1: Immediately performs the transition.
                 //*
                 //* Case 2: Traverses the hierarchy from the source to the target,
                 //*         entering each state along the way. No states are exited.
                 //*
                 //* Case 3: Traverses the hierarchy from the source to the target,
                 //*         exiting each state along the way. The target is then
                 //*         entered.
                 //*
                 //* Case 4: The source is exited and the target entered.
                 //*
                 //* Case 5: Traverses the hiearchy until a common superstate is met.
    FindLCA(st : FsmState, dest_st : FsmState) : list[FsmState] * list[FsmState]
    {
      def super = dest_st.SuperState;
      def dest = if (super != null) super else dest_st;
      FindPath(st.SuperState, dest, st :: [], dest_st :: []);
    }

    AddAction(nodes : PathNode, act : option[Actions]) : PathNode
    {
      | (n, Some(act))  => n + Action(act)
      | (n, _)  => n
    }

    EntryNodeCreate(nodes : list[FsmState]) : PathNode
    {
      def entering_state(st)
      {
        | StateAction.Entry(state = FsmState where (do_activity = Some(act))) => Entry(st, [(RunDoActivity(act), true)])
        | Entry => Entry(st)
      }

      def entry = nodes.FilterValues(_.entry);
      Sequence(entry |> entering_state(_))
    }

    ExitNodeCreate(nodes : list[FsmState]) : PathNode
    {
      def get_exit(st)
      {
        | StateAction.Exit(state = FsmState where (do_activity = Some(act), history = TwoOption where (HasValue = true) as h)) =>
            Exit(st, [(SaveHistory(h.Value), false), (StopDoActivity(act), false)]);
        | Exit(state = FsmState where (do_activity = Some(act))) =>
            Exit(st, [(StopDoActivity(act), false)]);
        | Exit(state = FsmState where (history = TwoOption where (HasValue = true) as h)) =>  
            Exit(st, [(SaveHistory(h.Value), false)]);
        | Exit => Exit(st)
          
      }
      
      def exiting_state(st)
      {
        | FsmState.ConcurrentRegion(exit = e) as r => 
            def regs = r.RegionsExcept(transition.Source);
            def node = if (regs.Equals(r.sub_regions)) RegionExit([], r) else RegionExit(regs, r);
            match (e) 
            {
              | Some(ex) => get_exit(ex) + node
              | _ => node
            }
            
        | FsmState where (exit = Some(ex)) => get_exit(ex)
        | _ => PathNode.Empty()
      }
      
      def nodes = nodes |> exiting_state(_);
      Sequence(nodes)
    }

    NodesCreate(ex : list[FsmState], tran : StateTransition) : PathNode
    {
      def (exit, en) = TraverseTransitionPath(tran);
      def ex = ex + exit;
      def node = ExitNodeCreate(ex); // create nodes for exit exit actions      
      def node = AddAction(node, tran.action); // add transition action
      def entry_nodes = EntryNodeCreate(en); // create nodes for entry exit actions
      node + entry_nodes // merge together
    }

    DefExitPath(src : FsmState, dest : FsmState) : void
    {
      def ex = FindPath(src, dest, [], [])[0];
      AddNode(ExitNodeCreate(ex))
    }

    DefPath(src : FsmState, dest : FsmState, tr : StateTransition, ex_node : PathNode = null) : void
    {
      def ex = FindPath(src, dest, [], [])[0];
      def node = NodesCreate(ex, tr);
      def node = if (ex_node != null) ex_node + node else node;
      AddNode(node)
    }

    static completion : StateChartEvent = StateChartEvent(TransitionNode.Event(0, null));

  }
}
