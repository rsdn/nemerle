using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of HistoryPath.
  /// </summary>
  class HistoryPath
  {    
      
    public analyser : FsmAnalyser;
          
    public mutable transition : StateTransition;
      
    public this(from : FsmState, to : FsmState, hist : StateChartHistory, analyser : FsmAnalyser)
    {
      History = hist;  
      FromSource = from;
      ToSource = to;
      this.analyser = analyser;            
    }
      
    mutable FinalState : FsmState.FinalState;
    FromSource : FsmState;
    ToSource : FsmState;
    
    public History : StateChartHistory;
    
    public IsDefault : bool
    {
      get
      {
        transition is StateTransition.Default
      }
    }
    
    public Path : PathNode
    {
      get
      {
        transition.PathNode
      }
    }
          
    public ActualTo : FsmState
    {
      get
      {
        transition.ActualTo
      }
    }

    public From : FsmState
    {
      get
      {
        transition.From
      }
    }
      
    public To : FsmState
    {
      get
      {
        if (FinalState != null) FinalState else
          match (transition.To)
          {
            | TransitionTarget.State(st)  => st
            | _  => null
          }
      }
    }
          
    public Name : string
    {
      get
      {
        if (IsDefault) $"$transition" else 
          match (History)
          {
            | StateChartHistory where (State = FsmState where (BothHistories = true), Type = t) => $"$(t)HistoryFrom$(From)To$ActualTo"
            | _ => $"HistoryFrom$(From)To$ActualTo"
          }
      }
    }
      
    public override ToString() : string
    {
      Name
    }
      
    public CreatePath() : void
    {
      transition = match (ToSource)
                   {
                     | FinalState where (SuperState = FsmState where (history = h)) as fst when (h.HasValue)  => 
                         def h = h.Value.Head; // !!! get first history what about several?
                         FinalState = fst;
                         match (h.Default)
                         {
                           | Some(d) when (h == History)  => d
                           | Some(d)  => StateTransition.Initial(FromSource, d.To)
                           | _  => analyser.AddError(FsmError.HistoryMustHaveDefault(History));
                               StateTransition.Initial(FromSource, ToSource)
                         }
                     | _  => StateTransition.Initial(FromSource, ToSource)
                   }
      
      transition.UpdateReference(analyser.Statemap); // update reference
      transition.TraversePath(); // creating transition path
      match (History)
      {
          // define history path for transition
        | StateChartHistory where (Type = StateHistory.Shallow)  => To.DefineHistoryPathRecurse(FromSource.Name, this)
        | StateChartHistory where (Type = StateHistory.Deep)  => To.DefineHistoryPath(FromSource.Name, this);
        | _  => ()
      }
    }
      
  }
}
