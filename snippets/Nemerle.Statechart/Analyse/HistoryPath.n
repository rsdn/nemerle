using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of HistoryPath.
  /// </summary>
  class HistoryPath
  {    
      
    public analyser : FsmAnalyser;
          
    public transition : StateTransition.Initial;
      
    public this(from : FsmState,to : FsmState,hist : StateChartNode.History,analyser : FsmAnalyser)
    {
      History=hist;  
      transition=StateTransition.Initial(from,to);
      this.analyser=analyser;
    }
      
    public History : StateChartNode.History;
      
    public Nodes : list[PathNode]
    {
      get
      {
        transition.PathNodes
      }
    }
      
    public ToChoice : list[StateTransition]
    {
        get
        {
            transition.ToChoice
        }
    }
    
    public ActualTo : FsmState
    {
      get
      {
        transition.ActualTo
      }
    }

    public From : FsmState
    {
      get
      {
        transition.From
      }
    }
      
    public To : FsmState
    {
      get
      {
        match (transition.To)
        {
          |TransitionTarget.State(st) => st
          |_ => null
        }
      }
    }
          
    public Name : string
    {
      get
      {
        $"HistoryFrom$(From)To$ActualTo"
      }
    }
      
    public override ToString() : string
    {
      Name
    }
      
    public CreatePath() : void
    {
      transition.UpdateReference(analyser.Statemap); // обновляем ссылки
      transition.CreatePath(); // создаем путь перехода
      match (History)
      {
          // определяем пути исторического перехода
        |StateChartNode.History(type=StateHistory.Shallow) => To.DefineHistoryPathRecurse(From.Name,this)
        |StateChartNode.History(type=StateHistory.Deep) => To.DefineHistoryPath(From.Name,this);
        |_ => ()
      }
    }
      
  }
}
