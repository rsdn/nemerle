using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;

namespace Nemerle.Statechart
{
    
  using StateTransition;
  using PathNode;
  using TransitionDestination;
  using FsmState;
  /// <summary>
  /// Transition Path
  /// </summary>  
  partial class TransitionPath
  {
         
    [Accessor]
    mutable path : PathNode = Empty();        
    mutable recursive : bool;
    traverser : TransitionTraverser;
    [Accessor] transition : StateTransition;
    analyser : FsmAnalyser;    
    
    AddNode(node : PathNode) : void
    {
      path = Sequence([path, node]);
    }    
    
    TraversePseudo(st : PseudoStateNode) : TransitionDestination
    {
      | Terminate as n => Terminate(n)
      | Fork((FsmState where (part_of_region = Some(r)) :: _) as st) => Fork(st,r.ContainedIn)
      | Fork as f => analyser.AddError(FsmError.ForkMustGoToRegion(f)); Unknown()
      | _ => Unknown();
    }
	  /// <summary>
	  /// Processing final state node
	  /// </summary>       
    TraverseFinal(st : FsmState.Final) : TransitionDestination
    {
      def parent = st.SuperState;
      def hist_clear = match (st.history) 
                       {
                         | ThreeOption.None  => Empty()
                         | h  => ClearHistory(h.Value)// создаем узел очистки                           
                       }
      match (st)
      {
        | FsmState.Final(part_of_region = Some()) => 
          match (parent.FindTransitions(completion))
          {
            | []  => st.Lived = true;State(st)
            | [Transition as tran]  => AddNode(ForceStateChange(st));
                                       st.Lived = true;
                                       traverser.Add(tran); 
                                       TransitionExecute(tran)
            | lst  => AddNode(ForceStateChange(st)); // add node
                      st.Lived = true; // state is lived
                      def tran = lst |> _ : StateTransition;
                      traverser.Add(tran);
                      Choice(parent, tran)
          }
        | _ =>
            // find completion transition
            match (parent.FindTransitions(completion))
            {
              | []  => st.Lived = true;State(st);
               // if have completion transition without guard
              | [Transition(guard = None()) as tran]  => 
               // if not defined transition path create it                                    
                  tran.TraversePath();
                  AddNode(hist_clear + tran.PathNode); // get nodes and add to path                  
                  State(tran.ActualTo)  // create destination to dest state
               // if we have transition list
              | lst  =>                            
                  AddNode(hist_clear + ForceStateChange(st)); // add node
                  st.Lived = true; // state is lived
                  def tran = lst |> _ : StateTransition;
                  traverser.Add(tran);
                  Choice(parent, tran)
            }
      }
    }  
                       
    TraverseTransitionPath(tran : StateTransition) : list[FsmState] * list[FsmState]
    {       
      | Initial(To = History(StateChartHistory where (State = st)), From = from)
      | Initial(To = State(st), From = from) // initial и pseudo is local transitions by default
      | Default(To = State(st), From = from)  => FindPath(from, st, [], [])
      | Internal => ([], []) // no path for internal transition
      | Transition(To = PseudoState(PseudoStateNode where (state = st)), From = from) 
      | Transition(To = Final(st), From = from) 
      | Transition(To = History(StateChartHistory where (State = st)), From = from)
      | Transition(To = State(st), From = from)  => FindLCA(from, st)
      | _  => ([], [])
    }
    
    TraverseHistory(hist : StateChartHistory) : TransitionDestination
    {
      match (hist)
      {
        | StateChartHistory where (Default = Some(Default(ToState = _) as tran)) as h  => 
            h.Used = true;             
            traverser.Add(tran);
            History(hist)
        | _  => hist.Used = true; 
            History(hist)
      }
    }
            
    TraverseOrthogonalRegion(reg : ConcurrentRegion) : TransitionDestination
    {
      def initial = reg.SubRegions |> Initial;
      when (!initial.All(x => !x.IsEmpty())) analyser.AddError(FsmError.RegionMustContainInitial(reg, transition));            
      def init = initial.Flatten();      
      traverser.Add(init |> _ : StateTransition);      
      Region(reg)
    }

    TraverseSubRegion(reg : ConcurrentSubRegion) : TransitionDestination
    {
      def region = reg.contained_in;
      def omitted = region.RegionsExcept(reg); // other omitted regions
      def initial = omitted |> Initial;
      // they must contain initial transitions
      when (!initial.All(x => !x.IsEmpty())) analyser.AddError(FsmError.SubRegionsMustContainInitial(omitted, transition));
      def init = initial.Flatten();
      traverser.Add(init |> _ : StateTransition);
      SubRegion(reg)
    }
    
    DefineRegionsExit(region : ConcurrentSubRegion) : void
    {      
      foreach (st in region.SubStates)
      {
        def (exit, _) = FindPath(st, region.SuperState, [], []); // exit state nested in region
        def exit = ExitNodeCreate(exit); // create exit state node      
        st.region_exit_path = exit;
      }
    }
    
    TraverseTransitionFromRegion(region : ConcurrentRegion, tran : StateTransition) : TransitionDestination
    {
      region.SubRegions.Iter(DefineRegionsExit);
      def reg_exit = RegionExit(region); // exit whole regions
      def (exit1, _) = FindPath(region, tran.From, [], []); // unwind path from Source up to transition begining (From)                                         
      def (exit, entry) = TraverseTransitionPath(tran); // find transition path
      def node = reg_exit +  NodesCreate(exit1 + exit, tran, entry); // creating path nodes      
      if (tran.IsCompletion) tran.IsNeedCheckRegionFinal = Some(region) else region.MayTakePlaceForcedTransitions = true;
      AddNode(node); // add node to path
      tran.Used = true;
      TraverseTarget(tran.To) // traversing transition target
    }
    
    TraverseOrdinaryTransition(tran : StateTransition) : TransitionDestination
    {      
      when (tran.Source == null) tran.Source = tran.From;      
      def (exit1, _) = FindPath(tran.Source, tran.From, [], []);// unwind path from Source up to transition begining (From)                       
      def (exit, entry) = TraverseTransitionPath(tran); // find transition path
      def node = NodesCreate(exit1 + exit, tran, entry); // creating path nodes 
      AddNode(node);
      tran.Used = true;
      TraverseTarget(tran.To)
    }    
    
    TraverseTransitionFromSubRegionState(reg : ConcurrentSubRegion, tran : StateTransition) : TransitionDestination
    {
      def src = tran.Source;
      def region = reg.ContainedIn;
      region.SubRegions.Iter(DefineRegionsExit); // define exit actions from region
      def (exit_cur, _) = FindPath(src, reg.SuperState, [], []); // exit state nested in region
      def exit_cur = ExitNodeCreate(exit_cur); // create exit state node
      def regs = region.RegionsExcept(src); // regions except this state that must exit
      def reg_exit = SubRegionsExit(regs, region); // exit other regions
      region.DefineExitPattern(regs); // this must be compile time known patterns of exit
      def (exit1, _) = FindPath(reg.SuperState, tran.From, [], []); // unwind path from Source up to transition begining (From)                                         
      def (exit, entry) = TraverseTransitionPath(tran); // find transition path                  
      def node = exit_cur + reg_exit +  NodesCreate(exit1 + exit, tran, entry); // creating path nodes                   
      region.MayTakePlaceForcedTransitions = true;
      AddNode(node); // add node to path
      tran.Used = true;      
      TraverseTarget(tran.To) // traversing transition target      
    }
    
    TraverseStateTarget(st : FsmState) : TransitionDestination
    {      
          // if simple state and no initial transition
      | State(Initial = []) as st  => st.Lived = true;
          when (recursive && st.paths==null) traverser.Add(st);
          State(st) // end state
          // if state with one initial transition without guard
      | State(Initial = [Initial(guard = None()) as init])  => TraverseOrdinaryTransition(init) // recursive traverse transition
      | State(Initial = init) as st  => traverser.Add(init |> _ : StateTransition);                                                  
          init.Iter(x => x.UsedInChoice = true);
          Choice(st, init |> (_ : StateTransition)); // creating dynamic choice node      
      | ConcurrentRegion as r => TraverseOrthogonalRegion(r)
      | ConcurrentSubRegion as r => TraverseSubRegion(r)
      | Final as st => TraverseFinal(st)
    }
    
    TraverseTarget(to : TransitionTarget) : TransitionDestination
    {      
      match (to) 
      {        
        | State(st) => TraverseStateTarget(st)
          // if target is orthogonal state
        | Final(st)  => TraverseFinal(st) // process final node
        | History(st)  => TraverseHistory(st) // process history node
        | PseudoState(st) => TraversePseudo(st)
        | _  => Unknown();            
      }
    }
    
    TraverseTransition(tran : StateTransition) : TransitionDestination
    {       
      when (tran.Source == null) 
      {
        tran.Source = tran.From;
      }      
      match (tran)
      {
        | Internal => tran.Used = true;NoStateChange();
          // if not exit from region
        | Transition(WithinRegion = true) => TraverseOrdinaryTransition(tran)
          // if begins at orthogonal regions boundary
        | Transition(Source = ConcurrentRegion as r) => TraverseTransitionFromRegion(r, tran)
          // if begins at some state in concurrent region
        | Transition(Source = FsmState where (part_of_region = Some(r))) => TraverseTransitionFromSubRegionState(r, tran)
          // else ordinary transition        
        | _ => TraverseOrdinaryTransition(tran)            
      }
    }
    
    /// <summary>
    /// Traversing path
    /// </summary>
    public Traverse(rec : bool = false) : void
    {
      recursive = rec;
      def to = TraverseTransition(transition); // traversing transition
      transition.Destination = to;      
      transition.ActualTo = match (to)
                            {
                              | Choice(st, _)
                              | State(st) => st
                              | _ => null
                            }
    }
        
    public this(tran : StateTransition, analyser : FsmAnalyser)
    {      
      transition = tran;
      this.analyser = analyser;      
      traverser = analyser.Traverser;
    }
         
    public Actions : list[string]
    {
      get
      {
        path.Actions
      }
    }
  }
    
}
