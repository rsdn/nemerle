using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;

namespace Nemerle.Statechart
{
    
  using StateTransition;
  using PathNode;
  using TransitionDestination;
  using TransitionTarget;
  using FsmState;
  /// <summary>
  /// Transition Path
  /// </summary>  
  partial class TransitionPath
  {
         
    [Accessor]
    mutable path : PathNode = Empty();        
    mutable recursive : bool;
    traverser : TransitionTraverser;
    [Accessor] transition : StateTransition;
    analyser : FsmAnalyser;        
    
    AddNode(node : PathNode) : void
    {
      path += node
    }
        
    TraversePseudo(st : PseudoStateNode) : TransitionDestination
    {
      match (st)
      {
        | Terminate as n => Terminate(n)
        | Fork(st) as f => TraverseFork(f, st)        
        | _ => Unknown();
      }
    }
	  /// <summary>
	  /// Processing final state node
	  /// </summary>       
    TraverseFinal(st : FsmState.Final) : TransitionDestination
    {
      | FsmState.Final(PartOfRegion = Some(r), completion_transitions = tran) =>           
          match (tran)
          {
            | []  => State(st)
            | tran  => 
                      // TODO: history clear                      
                st.Completion = tran;
                traverser.Add(tran);
                Final(st, r, tran)
          }

      | Final(SuperState = parent, history = hist, completion_transitions = tran) =>
      
          def hist_clear = match (hist) 
                           {
                             | TwoOption.None  => Empty()
                             | TwoOption where (Value = h)  => ClearHistory(h) // create clear history node
                           }
                // find completion transition
          match (tran)
          {
            | []  => State(st);
                  // if have completion transition without guard
            | [Transition(guard = None()) as tran]  => 
                  // if not defined transition path create it                                    
                tran.TraversePath();
                AddNode(hist_clear + tran.PathNode); // get nodes and add to path                                            
                State(tran.ActualTo)  // create destination to dest state
                  // if we have transition list
            | tran  =>                            
                AddNode(hist_clear); // add node  + ForceStateChange(st))                      
                traverser.Add(tran);                      
                Choice(parent, tran, Some(st))                
          }
    }  
                       
    TraverseTransitionPath(tran : StateTransition) : list[FsmState] * list[FsmState]
    {
       // fork transition
      | Transition(From = null, ImplicitFrom = PseudoStateNode where (state = from), AtLeastTo = st)
       // initial и pseudo is local transitions by default
      | Initial(AtLeastTo = st, From = from)
      | Transition(To = PseudoState(PseudoStateNode.Join(state = st)), From = from) 
      | Default(To = State(st), From = from)  => FindPath(from, st, [], [])
      | Internal => ([], []) // no path for internal transition
       // transition to pseudo state
      | Transition(To = PseudoState(PseudoStateNode where (state = st)), From = from) 
      | Transition(To = Final(st), From = from) 
      | Transition(To = History(StateChartHistory where (State = st)), From = from)
      | Transition(To = State(st), From = from)  => FindLCA(from, st)
      | _  => ([], [])
    }
    
    TraverseHistory(hist : StateChartHistory) : TransitionDestination
    {
      match (hist)
      {
        | StateChartHistory where (Default = Some(Default(ToState = _) as tran)) as h  => 
            h.Used = true;             
            traverser.Add(tran);
            History(hist)
        | _  => 
            hist.Used = true; 
            History(hist)
      }
    }

    TraverseOrdinaryTransition(tran : StateTransition) : TransitionDestination
    {      
      when (tran.Source == null) tran.Source = tran.From;
      DefPath(tran.Source, tran.From, tran); // unwind path from Source up to transition begining (From)                             
      tran.Used = true;
      TraverseTarget(tran.To)
    }    
        
    TraverseStateTarget(st : FsmState) : TransitionDestination
    {   
      def check_reg(reg)
      {
        match (reg)
        {
          | Some(r) => when (st.paths == null && recursive) traverser.Add(r)
          | _ => ()
        }
      }
      match (st)
      {
         // if simple state and no initial transition
        | State(Initial = [], PartOfRegion = reg) as st  => check_reg(reg);State(st) // end state
          // if state with one initial transition without guard
        | State(Initial = [Initial(guard = None()) as init])  => TraverseOrdinaryTransition(init) // recursive traverse transition
        | State(Initial = init, PartOfRegion = reg) as st  => traverser.Add(init |> _ : StateTransition);
            init.Iter(x => x.UsedInChoice = true);
            check_reg(reg);
            Choice(st, init |> (_ : StateTransition), None()); // creating dynamic choice node
        // transition to region
        | ConcurrentRegion as r => TraverseOrthogonalRegion(r)
        | Final as st => TraverseFinal(st)
        | _ => Unknown()
      }
    }
    
    TraverseTarget(to : TransitionTarget) : TransitionDestination
    {      
      match (to) 
      {        
        | State(st) => TraverseStateTarget(st)
          // if target is orthogonal state
        | Final(st)  => TraverseFinal(st) // process final node
        | History(st)  => TraverseHistory(st) // process history node
        | PseudoState(st) => TraversePseudo(st)
        | _  => Unknown()
      }
    }
    
    TraverseTransition(tran : StateTransition) : TransitionDestination
    {       
      when (tran.Source == null) tran.Source = tran.From;      
      match (tran)
      {
        | Internal => tran.Used = true;NoStateChange()        
        | Transition(ImplicitFrom = target) when target != null
          // if not exit from region
        | Transition(WithinRegion = true) => TraverseOrdinaryTransition(tran)
          // if begins at some state in concurrent region
        | Transition(To = PseudoState(Join as j)) => TraverseJoinTransition(j, tran)
          // if from state in orthogonal region, and transition begins in orthogonal regions boundary or upper
        | Transition(Source = FsmState where (PartOfSubRegion = Some(r))) => TraverseTransitionFromRegion(r, tran)
          // transition to sub region state
        | Transition(AtLeastTo = FsmState where (PartOfSubRegion = Some(r)) as st) => TraverseSubRegion(r, st, tran)
          // else ordinary transition
        | _ => TraverseOrdinaryTransition(tran)
      }
    }
    
    /// <summary>
    /// Traversing path
    /// </summary>
    public Traverse(rec : bool = false) : void
    {
      recursive = rec;
      def to = TraverseTransition(transition); // traversing transition
      transition.Destination = to;
      transition.ActualTo = match (to)
                            {
                              | Choice(_, _, Some(st))                              
                              | Final(state = st)
                              | State(st) => when (recursive && st.paths == null) traverser.Add(st);
                                  st.Lived = true;
                                  st     
                              | Choice(st, _, _) => st
                              | _ => null
                            }
    }
        
    public this(tran : StateTransition, analyser : FsmAnalyser)
    {
      transition = tran;
      this.analyser = analyser;
      traverser = analyser.Traverser;
    }
         
    public Actions : list[string]
    {
      get
      {
        path.Actions
      }
    }
  }
    
}
