using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of FsmStateFuncs.
  /// </summary>
  partial class FsmState
  {

    [Memoized]
    public IncomingTransitions : list[StateTransition]
    {
      get
      {
        statemap.Transitions.Filter(x => x.To.TargetStates.ContainsRef(this))
      }
    }
    
    [Memoized]
    public IsConcurrent : bool
    {
      get
      {
        type is StateType.Region
      }
    }

    [Memoized]
    public IsSubRegion : bool
    {
      get
      {
        type is StateType.SubRegion
      }
    }
    
    [Memoized]
    public IsComposite : bool
    {
      get
      {
        !IsSimple
      }
    }

    [Memoized]
    public IsFinal : bool
    {
      get
      {
        type is StateType.Final
      }
    }

    public ExitPoints : IEnumerable[PseudoStateNode.ExitPoint]
    {
      get
      {
        pseudo_states.FilterType()
      }
    }

    public IsTopState : bool
    {
      get
      {	  
        Super == null
      }
    }

    [Memoized]
    public IsSequentialState : bool
    {
      get
      {
        !IsConcurrent
      }
    }
    
    public IsSubstateOf(st : FsmState) : bool
    {
      super_states.ContainsRef(st)
    }

    public InstancesOfSameStateMachine : IEnumerable[FsmState]
    {
      get
      {
        if (PartOfStateMachine is Some(s))
          statemap.States.Where(x => if (x.PartOfStateMachine is Some(m)) x.name == name && m.SubMachineType == s.SubMachineType else false)
        else Enumerable.Empty()
      }
    }
    
    [Memoized]
    public AllPseudo : IEnumerable[PseudoStateNode]
    {
      get
      {
        AllStates.SelectMany(_.pseudo_states)
      }
    }
    
      /// <summary>
    /// All sub states at all nesting levels
    /// </summary>
    [Memoized]
    public AllSubStates : IEnumerable[FsmState]
    {
      get
      {
        AllStates.Skip(1)
      }
    }

    /// <summary>
    /// All sub states include this at all nesting levels
    /// </summary>
    [Memoized]
    public AllStates : IEnumerable[FsmState]
    {
      get
      {
        GetBreadthFirstEnumerable()
      }
    }

    public DefineInitial(st : FsmState) : void
    {
      def new_p = PseudoStateNode.Initial(this, st);
      def p = match (initial)
               {
                 | Some(i) => pseudo_states.Remove(i);
                 | _       => pseudo_states
               }
      pseudo_states = new_p :: p;
      //node.Update(x => x.ChangeInitial(tran :: x.initial))
    }

    [Memoized]
    public history : TwoOption[PseudoStateNode.History]
    {
      get 
      {
        def hist = pseudo_states.FilterType();//FoldLeft([], (x, a) => if (x.Value is PseudoStateNode.History) x :: a else a);
        //def hist = hist.NToList();
        TwoOption.FromList(hist)
      }
    }

    [Memoized]
    public HaveFinal : bool
    {
      get
      {
        match (type)
        {
          | StateType.Region => sub_states.All(x => x.HaveFinal)
          | _                => sub_states.Exists(x => x.type is StateType.Final)
        }
      }
    }

    [Memoized]
    public Index : int
    {
      get
      {
        Super.sub_states.IndexOf(this)
      }
    }

    public DefineTransitions(tr : IEnumerable[StateTransition]) : void
    {
      def create_copy(tr)
      {
        def tr = tr.Clone();
        tr.Source = this;
        tr
      }

      def copy = tr.Map(create_copy);
      transitions = transitions + copy;
    }

    public DeleteTransition(tr : StateTransition) : void
    {
      transitions = transitions.Except(tr).NToList();
    }

    public Name : string
    {
      get
      {
         if (IsTopState) "Top" else $"$(OriginalName)$(CopyName)" 
      }
    }

    public IsSimple : bool
    {
      get
      {
        sub_states.IsEmpty()
      }
    }

    [Memoized]
    public SuperStatesInclude : IEnumerable[FsmState]
    {
      get
      {
        Enumerable.Reverse(SuperStatesIncludeFromTop)
      }
    }

    [Memoized(super_states)]
    public SuperStatesIncludeFromTop : list[FsmState]
    {
      get
      {
        super_states + [this]
      }
    }

    public SubMachineType : string
    {
      get
      {
        match (type)
        {
          | StateType.SubMachine(null, _) => name
          | StateType.SubMachine(t, _)    => t
          | _                             => null
        }
      }
    }
    
    public PartOfStateMachine : option[FsmState]
    {
      get
      {
        SuperStatesInclude.Find(x => x.type is StateType.SubMachine)
      }
    }

    [Memoized]
    public Regions : list[FsmState]
    {
      get
      {
        super_states.Filter(x => x.IsConcurrent)
      }
    }
    
    public RegionPos(reg : FsmState) : int
    {
      reg.sub_states.IndexOf(x => x.AllSubStates.Contains(this))
    }
    
    public static DistinctRegions(this st : list[FsmState], reg : FsmState) : bool
    {
        def pos = st.Map(x => x.RegionPos(reg));
        def distinct = pos.Distinct();
        distinct.Count() == st.Length
    }
    
    [Memoized(name)]
    public OriginalName : string
    {
      get
      {
        match (type)
        {
          | SubMachine(s, _)  => $"SubMachine$(name)oftype$s"
          | Final             => $"$(Super)Final"
          | SubRegion         => $"$(Super)SubRegion$Index"
          | _                 => $"$(name)"
        }
      }
    }

    public NativeName : string
    {
      get
      {
        name
      }
    }

    public GetHistory(h : PseudoStateNode.History) : PseudoStateNode
    {	  
      match (history, h.type)
      {
        | (One(h), _)                                           => h
        | (Two(PseudoStateNode.History(type = t1) as f, s), t)  => if (t1 == t) f else s
        | _                                                     => null
      }
    }

    [Memoized(transitions)]
    public CompletionTransitions : IEnumerable[StateTransition]
    {
      get
      {
        transitions.Where(_.IsCompletion)
      }
    }

    [Memoized(entry, exit)]
    public actions : IEnumerable[FsmAction]
    {
      get
      {
        def en = entry.Select(_.action);
        def ex = exit.Select(_.action);
        en.Concat(ex)
      }
    }
    
    public static @==(a : FsmState, b : FsmState) : bool
    {
      a : object == b
    }

    public static @!=(a : FsmState, b : FsmState) : bool
    {
        !(@==(a, b))
    }

    public MoveToNewSuper(super : FsmState) : void
    {
      Super.Rem(this); // удаляем из старого супер состояния
      super.Add(this) // добавляем в новое
    }

    public Add(st : FsmState) : void
    {
      sub_states = ListUtils.Append(sub_states, st).NToList();
      st.Super = this;
    }

    public Rem(st : FsmState) : void
    {
      sub_states = sub_states.Except(st).NToList();
    }

    public Replace(old : FsmState, new_st : FsmState) : void
    {
      sub_states   = sub_states.Map(x => if (x == old) new_st else x);
      new_st.Super = this;
    }

    public AddPseudo(st : PseudoStateNode) : void
    {
      pseudo_states = ListUtils.Append(pseudo_states, st).NToList();
    }

    [Memoized]
    public InitialState : option[FsmState]
    {
      get
      {
        match (initial_tran)
        {
          | []      => None()
          | head :: _ => match (head.To)
                         {
                           | TransitionTarget.State(st) => Some(st)
                           | _                          => None()
                         }
          | _       => None()
        }
      }
    }
    
    [Memoized]
    public ToHState : HState
    {
      get
      {
        HState(Location, Name, [], [], null, entry, exit, do_activity, if (Super != null) Super.ToHState else null, [], null, IsFinal)
      }
    }
  }





}

