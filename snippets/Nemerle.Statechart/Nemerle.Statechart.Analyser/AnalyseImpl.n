using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  using FsmState;
  using PseudoStateNode;
  
  [Record]
  public variant FsmError
  {
    | DuplicateState {state : FsmState;}
    | UnknownState {state : FsmState;name : FsmState;tran : StateTransition;}
    | StateNotFound {state : FsmState;}
    | DuplicateTransition {tran : list[StateTransition];}
    | DuplicateHistory {state : FsmState;history : StateHistory;}
    | RegionMustContainInitial {reg : ConcurrentRegion;tran : StateTransition;}
    | SubRegionsMustContainInitial {reg : list[ConcurrentSubRegion];tran : StateTransition;}
    | UnknownTerminateTransition {node : StateTransition;}
    | ForkMustGoToRegion {fork : PseudoStateNode.Fork;}
    | ForkMustGoToSeparateRegion {fork : Fork;}
    | UnknownNode {tran : StateTransition;}
    | JoinTransitionMustHaveSameTrigger {join : Join;tran : list[StateTransition];}
    | JoinTransitionMustLeaveRegion {join : Join;tran : list[StateTransition];}
    | TransitionCrossOrthogonalBoundaryOfSameRegion {tran : StateTransition;}
    | DefaultTransitionMustGoToState {tran : StateTransition;history : StateHistory;}
    | JunctionElseMustBeLast {junction : PseudoStateNode.Junction;}
    | JunctionElseMustAfterAnotherGuard {junction : PseudoStateNode.Junction;}
    | EmptyJunction {junction : PseudoStateNode.Junction;}
    | JunctionActionMaybeLast {junction : PseudoStateNode.Junction;action : Actions;}
    
  }

  [Record]
  public variant FsmWarning
  {
    | HistoryNotUsed {hist : StateHistory;}
    | StateNotUsed {state : FsmState;}
    | TransitionNotUsed {tran : StateTransition;}
    | TransitionOverriden {tran : StateTransition;by : StateTransition;}
    | RegionNotUsed {regions : FsmState.ConcurrentRegion;}
    | NoConcurrentActivity {act : StateAction.Do;}
  }

  public variant ParseError
  {
    | DuplicateActivity {node : StateNode.DoActivity;}
    | UnknownElement {node : StateNode;}
  }
  
  class FsmErrorException : Exception
  {
  }
  
  public class StateMap
  {
    [Accessor]
    mutable map : Map[string, FsmState];
    mutable pseudo_map : Map[string, PseudoStateNode] = Map();
        
    errors : List[FsmState] = List();

    [Accessor] analyser : FsmAnalyser;
    
    [Accessor]
    mutable duplicates : list[FsmState] = [];
    
    public Errors : list[FsmState]
    {
      get
      {
        errors.NToList()
      }
    }

    public HaveErrors : bool
    {
      get
      {
         !errors.IsEmpty() ||  !duplicates.IsEmpty()
      }
    }

    public Count : int
    {
      get
      {
        map.Count()
      }
    }

    public CheckRef(st : FsmState) : FsmState
    {
      if (st.Reference) Get(st.Name) else st
    }
    
    public Contains(state : string) : bool
    {
      map.Contains(state)
    }

    public Get(state : string) : FsmState
    {
      def name = state ?? FsmState.TopStateName;
      def (name, sub_name) = if (name != FsmState.TopStateName) 
                              {
                                def sub =  name.GetSub('[', ']');
                                if (sub != null) (name.GetSub('['), sub) else (name, null)
                              } else (name, null);
      def name = if (sub_name != null) $"$(name)SubRegion$sub_name" else name;
      if (Contains(name)) map.Get(name) else
      {
        errors.Add(State(StateNode.State(name), true));
        null
      }
    }
    
    public Item[index : string] : FsmState
    {
      get
      {
        Get(index)
      }
      set
      {
        map = map.Add(index, value);
      }
    }

    public this(analyser : FsmAnalyser)
    {
      this.analyser = analyser;
    }    
    
    public Init(topstate : FsmState) : void
    {
      def sub_st = topstate :: topstate.AllSubStates;
      duplicates = sub_st.Duplicates(_.CompareTo(_));
      def st = sub_st.RemoveDuplicatesSort(_.CompareTo(_));
      map = Map(st |> (Name, _));
    }

    public Names : list[string]
    {
      get
      {
        map.Keys()
      }
    }

    public States : list[FsmState]
    {
      get
      {
        map.Values()
      }
    }
  }
  
}
