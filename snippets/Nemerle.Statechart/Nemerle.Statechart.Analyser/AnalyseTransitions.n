using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  using StateTransition;
  using ListUtils;
  using JunctionDecision;
  using PseudoStateNode;
  /// <summary>
  /// Description of AnalyseTransitions.
  /// </summary>
  public partial class FsmAnalyser
  {

    CheckInitialTransitions() : void
    {
      def check_auto_initial(st)
      {
        when (st.Initial.IsEmpty() && !(st is FsmState.Final))
          match (st)
          {
            | ConcurrentRegion => ()
            | FsmState where (SubStates = head :: _) => when (!(head is FsmState.Final)) st.DefineInitial(head);
            | _ => ()
          }
      }

      states.Iter(x => check_duplicates(x.Initial));  // check duplicates
      when (fsm.flags.AutoInitial) states.Iter(check_auto_initial);

      when (TopState.Initial.IsEmpty()) // if not have initial transition in top state
        if (TopState.Transitions.IsEmpty()) // if not have other transitions
          check_auto_initial(TopState) // initial is first substate
        else TopState.DefineInitial(TopState); // else initial transition is top state

    }

    is_crossed_orthogonal(tr : StateTransition, st : FsmState) : bool
    {
      | (StateTransition where (To = TransitionTarget.State(FsmState where (PartOfRegion = Some(r), PartOfSubRegion = Some(sr)))),
                         FsmState where (PartOfRegion = Some(r2), PartOfSubRegion = Some(sr2))) when r == r2 =>
          sr2 != sr
      | _ => false
    }
    
    CreateSuperStateTransitions() : void
    {
      def create_trans(st)
      {
        | FsmState.State(SuperState = null) => ()
        | FsmState where (SuperState = super, PartOfSubRegion = r) =>
            def tr = super.combined_transitions;
            def tr = if (r.HasValue) tr.Filter(x => !is_crossed_orthogonal(x, st)); else tr;
            st.DefineTransitions(tr)
      }

      TopState.StateIter(create_trans);
    }
    
    CheckCrossTransitions() : void
    {
      def group(st, tr)
      {
        match (tr)
        {
          | _ :: []  => () // if not have group exit
          | StateTransition where (Guard = Some()) as head :: tail  => head.IsCrossed = true; // cross transition
              def (path, end) = tail.SplitFind(x  => x.Guard.IsNone); // get all include last without guard
              head.ParentCrossed = path;
              path.Iter(x => x.CrossFor = true);
              st.DeleteTransitions(end); // delete from usual transitions in state
          | _ :: tail  => st.DeleteTransitions(tail)
          | _  => ()
        }
      }

      def check_cross_tran(st, tr)
      {
        def guard_sorted = tr.Sort((x, y) => StateTransition.GuardComparer(y, x));
        def sorted = guard_sorted.Sort((x, y) => y.From.hierarchy_pos - x.From.hierarchy_pos); // sort on hierarchy position
        group(st, sorted); // group transitions
      }

      def check_cross(st)
      {
        def tran = st.Transitions + st.InternalTran + st.Initial;
        def group = FsmState.create_transition_group(tran).Filter((_, x) => x.Length > 1).Values();
        group.Iter(check_cross_tran(st,_))
      }

      TopState.StateIter(check_cross); // check from the top state
    }

    check_duplicates(tr : list[StateTransition]) : void
    {
      def check_duplicate_tran(tr)
      {
        def check_begin_and_ends(tr)
        {
          def equal(lst, lst2)
          {
            lst.Equals(lst2, StrEq);
          }

          when (tr.Length > 1)
          {
            def acts = tr |> ActionList;

            def res = acts.ElementsEqual(equal);
            when (res) AddError(FsmError.DuplicateTransition(tr));
          }
        }

        def ordinary = tr.Exclude(x => x is Initial || x.IsCompletion);
        def dups = ordinary.Duplicates(StateTransition.GuardComparer); // find duplicates with same guards and same triggers
        if (!dups.IsEmpty())
        {
          AddError(FsmError.DuplicateTransition(dups));
        } else
        {
          def (intern, other) = tr.Partition(_ is Internal);
          check_begin_and_ends(intern);
          def begin_and_end_eq = other.Group((x,y) => x.From.CompareTo(y.From) - x.To.CompareTo(y.To));
          def begin_and_end_eq = begin_and_end_eq.Filter(x => x.Length > 1);
          begin_and_end_eq.Iter(check_begin_and_ends)
        }
      }

      def check_override(tr)
      {
        match (tr.Find(x => x.Guard.IsNone))
        {
          | Some(t) => def tr = tr.Exclude([t],(x, y) => x == y : object);
              tr.Iter(x => AddWarning(FsmWarning.TransitionOverriden(x, t)));
          | _ => ()
        }
      }
      
      def group = FsmState.create_transition_group(tr).Values();
      def group = group.Filter(x => x.Length > 1);
      group.Iter(check_duplicate_tran);
      group.Iter(check_override);

    }

    /// <summary>
	  /// Check duplicates
	  /// </summary>
    CheckDuplicates() : void
    {
      states.Iter(x => check_duplicates(x.this_transitions));
      states.Iter(x => check_duplicates(x.Initial));
    }

    mutable unnamed_junction_num : int;
    
    CheckJunction(node : Junction) : void
    {

      def get_sub_node(t, a, lev)
      {
        match (t)
        {
          | TransitionTarget.PseudoState(Junction(nodes = n)) => create_tree_node(n, a, lev + 1)
          | _ => Target(lev, t, a.Rev())
        }
      }
        
      and create_tree_node(n, aa, lev)
      {
        
        match (n)
        {
          | JunctionNode(guard = Some(TransitionNode.Guard("else"))) :: (_ :: _) => 
              AddError(FsmError.JunctionElseMustBeLast(node));
              Error(lev)
              
          | JunctionNode(Some(TransitionNode.Guard("else")), a, t, p) as j :: [] => 

              def n = p.nodes.Exclude([j]);
              
              def contains_decision(n)
              {
                | JunctionNode(guard = Some(TransitionNode.Guard(g))) when (g != "else") => true
                | _ => false
              }
            
              // if same node not contains other previous decision node
              if (!n.Exists(contains_decision)) 
              {
                AddError(FsmError.JunctionElseMustAfterAnotherGuard(node));
                Error(lev)
              } else
              {
                def a = a.MapDefault(_ :: aa, aa);
                Else(lev, get_sub_node(t, a, lev))
              }
              
          | JunctionNode(Some(g), a, t, _) :: tail => 
              def a = a.MapDefault(_ :: aa, aa);
              Condition(lev, g, get_sub_node(t, a, lev), create_tree_node(tail, aa, lev))
          
            // if no guards or actions there is error
          | JunctionNode(None(), None(), _, _) :: _ => 
             AddError(FsmError.EmptyJunction(node));
             Error(lev)
             // if single action node and not decision, taking sub node collecting action
          | JunctionNode(None(), Some(a), t, Junction(nodes = [_])) :: [] => 
              get_sub_node(t, a :: aa, lev)
            // if last action node it is else
          | JunctionNode(None(), Some(a), t, _) :: [] => Else(lev, get_sub_node(t, a :: aa , lev))
            
            // if action have other nodes after it
          | JunctionNode(None(), Some(a), _, _) :: _ => AddError(FsmError.JunctionActionMaybeLast(node, a));
              Error(lev)
          | _ => null
        }
      }

      when (node.name == null) 
      {
        unnamed_junction_num++;
        node.name = $"Unnamed$unnamed_junction_num";
      }
      
      def tree = create_tree_node(node.nodes, [], 0);
      node.DecisionTree = tree;
    }
    
    /// <summary>
	  /// Creating Transitions
	  /// </summary>
    CreateTransitions() : void
    {
      def create_join_transitions()
      {
        
        def check_join(j, tr)
        {
          match (j)
          {
            | PseudoStateNode.Join(state = st, target = t) =>

                if (tr.ElementsEqual((x, y) => x.Trigger == y.Trigger))
                {
                  if (tr.All(x => x.From.PartOfSubRegion.HasValue) &&
                        tr.ElementsEqual((x, y) => x.From.PartOfRegion.Value == y.From.PartOfRegion.Value))
                  {
                    def tran = StateTransition.Transition(st, tr.Head.Trigger, t, j);
                    def reg = tr.Head.From.PartOfRegion.Value;
                    def tr = tr.Sort((x, y) => x.FromRegion.index - y.FromRegion.index);
                    j.joined_tran = tr;
                    j.region = reg;
                    j.transition = tran;
                  } else AddError(FsmError.JoinTransitionMustLeaveRegion(j, tr))
                } else
                {
                  AddError(FsmError.JoinTransitionMustHaveSameTrigger(j, tr));
                  throw FsmErrorException();
                }
          }
        }
        
        def get_join(t, lst)
        {
          match (t)
          {
            | StateTransition where (To = TransitionTarget.PseudoState(Join() as j)) => (j, t) :: lst
            | _ => lst
          }
        }
      
        def join_tran = states.Map(x => x.all_transitions.FoldLeft([], get_join)).Flatten();
        def jtrans = join_tran.Group((x, y) => FsmAnalyser.StringComparator(x[0].name, y[0].name)).Map(x => (x.Head[0], x.Split()[1]));
        jtrans.Iter(check_join);
        
        
      }

      def check_targets(st)
      {

        def check_tran(st, tr)
        {
          match (tr.To)
          {
            | TransitionTarget.Final as t  =>
                match (st.SuperState.SubStates.Find(_ is FsmState.Final))
                {
                  | Some(st)  => t.state = st :> FsmState.Final;
                  | _  => ()
                }
            | PseudoState(Terminate(state = null) as node) as t =>
                match (pseudo_states.Filter(_ is PseudoStateNode.Terminate))
                {
                  | [] => node.state = TopState;
                  | [term] => t.node = term
                  | _ => AddError(FsmError.UnknownTerminateTransition(tr))
                }
            | PseudoState(Join(state = null, name = n)) =>
                match (pseudo_states.FilterType())
                {
                  | [] => AddError(FsmError.UnknownNode(tr))
                  | joins =>
                      match (joins.Find(x : PseudoStateNode.Join => StrEq(x.name, n)))
                      {
                        | Some(j) => tr.To = TransitionTarget.PseudoState(j)
                        | _ => AddError(FsmError.UnknownNode(tr))
                      }
                }
            | PseudoState(Junction() as j) => CheckJunction(j)
            | Named(_, n) => def states = pseudo_states.Filter(x => x.Name.HasValue);
                match (states.Find(x => x.Name.Value == n))
                {
                  | Some(t) => tr.To = TransitionTarget.PseudoState(t)
                  | _ => AddError(FsmError.UnknownNode(tr))
                }
            | _  => ()
          }
        }

        st.this_transitions.Iter(check_tran(st, _))
      }
      
      states.Iter(check_targets);
      create_join_transitions(); // creating join transitions
      CreateSuperStateTransitions(); // create parent transitions
      CheckDuplicates(); // check duplicates
      CheckCrossTransitions(); // look for cross transitions
      def int_tran =  states |>< InternalTran;
      def int_tran =  RenameTransition(int_tran);
      internal_transitions = Map(int_tran);
    }

    CheckTransitions() : void
    {
      def proc_tran(st, tran)
      {
        match (tran.To)
        {
          | TransitionTarget.State(to) when (!statemap.Contains(st.Name))  => AddError(FsmError.UnknownState(st, to, tran));
          | _  => ()
        }

      }

      def check_cross_orthogonal(tr)
      {
        when (is_crossed_orthogonal(tr, tr.Source)) AddError(FsmError.TransitionCrossOrthogonalBoundaryOfSameRegion(tr))        
      }
      
      def init(st)
      {
        st.Initial.Iter(proc_tran(st, _));
        st.all_transitions.Iter(proc_tran(st, _));
      }

      states.Iter(init);
      states.Iter(x => x.all_transitions.Iter(check_cross_orthogonal))
    }

    RenameTransition(tran : list[StateTransition]) : list[string * StateTransition]
    {
      def (dups, tran) = tran.DuplicatesPartition(StateTransition.Comparer);
      dups.Iter(x => x.NeedGuardedName = true);
      def dups = dups |> (GuardedName, _);
      def tran = tran |> (Name, _);
      def tran = tran + dups;
      def (dups, tran) = tran.DuplicatesPartition((x, y) => StringComparator(x[0], y[0]));
      def dups = dups.Group((x, y) => StringComparator(x[0], y[0]));
      dups.Iter(x => AddError(FsmError.DuplicateTransition(x.Split()[1])));
      tran
    }

    CreateTransitionPaths() : void
    {
      def traverse()
      {
        traverser.Add(TopState.Initial);
        traverser.Traverse(); // model the fsm traversing states and transition from top recursively through initial transition and pseudo states
        $[x.paths, x in states, x.paths != null]
      }

      def determine_used()
      {
        def filter_used(st)
        {
          | FsmState.ConcurrentSubRegion
          | ConcurrentRegion
          | Final => false
          | _ => true
        }

        def (lived, empty) =  states.Partition(_.LivedNested); // determine lived states
        def empty = empty.Filter(filter_used);
        lived_nested_states = lived;
        lived_states = states.Filter(_.Lived);
        def all_tran = states |>< all_transitions;
        def (trans, not_used) = all_tran.Partition(_.Used);
        def not_used = not_used.Filter(x => x.From.Lived);
        def not_used = not_used.Filter(x => !x.NotWork);
        empty.Iter(x => AddWarning(FsmWarning.StateNotUsed(x))); // warning about all without substates and not lived that is not used
        not_used.Iter(x => AddWarning(FsmWarning.TransitionNotUsed(x)));
        trans
      }

      def get_special_transitions(tran)
      {
        | StateTransition.Transition(Destination = TransitionDestination.Fork(sub_tran = tr)) => tr
        | StateTransition.Transition(To = PseudoState(PseudoStateNode.Join(transition = tr))) => [tr]
        | _ => []
      }

      def paths = traverse(); // traverse paths
      def trans = determine_used(); // determine used elements
      def special = trans |>< get_special_transitions(_);
      special_transitions = special.RemoveDuplicatesSort(StateTransition.Comparer);
      special_transitions.Iter(x => x.UpdateReference(statemap));
      trans_paths = Map(paths |> (_.State.Name, _)); // save in field
      def trans = RenameTransition(trans);
      def trans_nodes =  trans.Map((x, y) => (x, y.PathNode));  // nodes
      def trans_nodes = trans_nodes.RemoveDuplicatesSort(nodes_cmp);
      def map = Map(trans);
      transitions = map;
      def int_nodes = internal_transitions |> (_, _[2].PathNode);
      int_trans_nodes = Map(int_nodes.RemoveDuplicatesSort(nodes_cmp));
      transition_nodes = Map(trans_nodes);
      def (used_hstates, not_used) = history_states.Partition(x  => x.Used);
      history_states = used_hstates;
      not_used.Iter(x => AddWarning(FsmWarning.HistoryNotUsed(x)));
      def select = trans.Filter((_, x)  => x.HistoryTarget == null);
      work_transitions = Map(select);
      def work_nodes = select |> (_, _[2].PathNode);
      work_transition_nodes =  Map(work_nodes.RemoveDuplicatesSort(nodes_cmp));
    }

    UpdateInitial() : void
    {
      def init = states |>< Initial;
      def init = init.Filter(x => x.UsedInChoice || x.From.IsTopState);
      def reg_init = (regions |>< sub_regions |>< Initial);
      def defs = init + reg_init;
      def (init, not_used) = defs.Partition(_.Used);
      not_used.Iter(x => AddWarning(FsmWarning.TransitionNotUsed(x)));
      def (init, not_used) = init.Partition(_.Used);
      not_used.Iter(x => AddWarning(FsmWarning.TransitionNotUsed(x)));
      def init = RenameTransition(init);
      initial_transitions = Map(init);
      def init_nodes = init |> (_, _[2].PathNode);
      initial_transition_nodes = Map(init_nodes.RemoveDuplicatesSort(nodes_cmp));
    }

  }
}
