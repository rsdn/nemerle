using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;

namespace Nemerle.Statechart
{

  using FsmState;
  
  [Record]  
  public class StateEvent
  {
    [Accessor] evt : TransitionNode.Event;
    public InternalOnly : bool {get;set;}

    public Name : string
    {
      get
      {
        if (evt.name != null) evt.name else "Completion"
      }
    }

    public this(e : TransitionNode.Event)
    {
      evt = e;
    }

    public CompareTo(b : StateEvent) : int
    {
      FsmAnalyser.StringComparator(Name, b.Name)
    }

    public static  @== (a : StateEvent, b : StateEvent) : bool
    {
      FsmAnalyser.StringComparator(a.Name, b.Name) == 0
    }

    public IsCompletion : bool
    {
      get
      {
        evt.name == null
      }
    }
    
    //public FriendlyName : string
    //{
    //  get
    //  {
    //    if (IsCompletion) "Completion" else Name;
    //  }
    //}
    
    public override ToString() : string
    {
      $"Event$Name"
    }
  }        
        
  public variant StateHistory
  {    
    | Shallow
        {
          public this(st : FsmState,  hist : StateNode.History, reference : bool = false)
          {
            history = hist;
            state = if (hist.state != null) FsmState.State(hist.state, true); else st;
            type = hist.type;
            this.reference = reference;
            default = history.default |> StateTransition.Default(state, this, _);
          }
      
        }
    | Deep
        {
          public this(st : FsmState,  hist : StateNode.History, reference : bool = false)
          {
            history = hist;
            state = if (hist.state != null) FsmState.State(hist.state, true); else st;
            type = hist.type;
            this.reference = reference;
            default = history.default |> StateTransition.Default(state, this, _);
          }
      
        }
      
    [Accessor] mutable history : StateNode.History;
    [Accessor] mutable default : option[StateTransition.Default];
    [Accessor] mutable state : FsmState;
    [Accessor] mutable type : HistoryType;
    [Accessor] mutable reference : bool;
          
    public Used : bool {get;set;}
    public Index : int {get;set;}
    
    public static Create(st : FsmState, hist : TwoOption[StateNode.History], href : bool = false) : TwoOption[StateHistory]
    {      
      hist.Map(Create(st, _, href))
    }

    public static Create(st : FsmState, hist : StateNode.History, href : bool = false) : StateHistory
    {
      match (hist)
      {
        | StateNode.History(type = HistoryType.Deep) => StateHistory.Deep(st, hist, href)
        | StateNode.History(type = HistoryType.Shallow) => StateHistory.Shallow(st, hist, href)
        | _ => null
      }
    }
    
    public static  @==(a : StateHistory, b : StateHistory) : bool
    {
      | (null, null)  => true
      | (a, null)  => a : object  ==  null
      | (null, b)  => b : object  ==  null
      | (_, _)  => a.Name == b.Name && a.type == b.type && a.state == b.state
    }

    public static @!=(a : StateHistory, b : StateHistory) : bool
    {
            !(@==(a, b))
    }
          
    public BothHistories : bool
    {
      get
      {
        state.BothHistories
      }
    }
    
    public Name : string
    {
      get
      {
        def type = match (type)
                   {
                     | Deep  => "Deep"
                     | Shallow  => "Shallow"
                     | None  => ""
                   }
                  
        if (state.history.IsOne) $"$(state)History" else $"$(state)$(type)History"
      }
    }
    
    public SimpleName : string
    {
      get
      {
        $"$(state)History"
      }
    }
    
    public override ToString() : string
    {
      Name
    }
    
    public SubStatesParticipateInHistory : list[FsmState]
    {
      get
      {
        state.SubStatesParticipateIn(this)
      }
    }

    public UpdateReference(map : StateMap) : void
    {
      when (state.Reference) state = map[state.Name];
      when (history.reference)
      {
        def hist  =  state.GetHistory(this);
        type  =  hist.type;
        default  =  hist.default;
      }
      default.Iter(_.UpdateReference(map));
    }
    
  }
    
  [Record]
  public variant PseudoStateNode
  {
    | Junction 
        {
          mutable name : string;
          nodes : list[JunctionNode];
          parent : Junction;
          
          this(st : FsmState, n : string, lst : list[TransitionNode.JunctionNode])
          {
            base(st);
            nodes = lst |> JunctionNode(st, _, this);
            name = n;
          }
          
          [RecordIgnore]
          DecisionTree : JunctionDecision {get;set;}
          
          IsTop : bool 
          {
            get
            {
              parent == null
            }
          }
          
          Guards : list[TransitionNode.Guard]
          {
            get
            {
              nodes.FoldLeft([], (x, a) => a + x.Guards).Rev()
            }
          }
          
          Paths : PathNode
          {
            get
            {
              DecisionTree.Paths
            }
          }
          
          public override UpdateReference(map : StateMap) : void
          {
            nodes.Iter(_.UpdateReference(map));
            base.UpdateReference(map)
          }
          
          override ToString() : string
          {
            $"Junction$name"
          }
          
        }
    | Choice
    | Fork 
        {
          mutable states : list[TransitionTarget];
       
          override UpdateReference(map : StateMap) : void
          {   
            states.Iter(_.UpdateReference(map));
            base.UpdateReference(map);
          }
          
          override ToString() : string
          {
            $<#Fork$(state)To..$(states;"_")#>
          }
        }
    | Join 
        {
          name : string;
          mutable target : TransitionTarget;
          mutable region : ConcurrentRegion;
          [RecordIgnore] mutable joined_tran : list[StateTransition] = [];
          [RecordIgnore] mutable transition : StateTransition;
          
          trigger : StateEvent
          {
            get
            {
              match (joined_tran)
              {
                | [] => null
                | StateTransition where (Trigger = t) :: _ => t
              }
            }
          }
          
          override ToString() : string
          {
            $"Join$(name)"
          }

          override UpdateReference(map : StateMap) : void
          {
            target?.UpdateReference(map);
            base.UpdateReference(map);
          }
          
        }
    | EntryPoint
    | ExitPoint
    | Terminate
        {
          override ToString() : string
          {
            $"$(state)Terminate"
          }
        }
    
    | JunctionNode
        {
          guard : option[TransitionNode.Guard];
          action : option[Actions];
          to : TransitionTarget;
          parent : Junction;
          
          this(st : FsmState, node : TransitionNode.JunctionNode, par : Junction)
          {
            match (node)
            {
              | TransitionNode.JunctionNode(g, a, t) =>
        
                  guard = g;
                  action = a;
                  parent = par;
                  to = TransitionTarget.Create(st, t);
                  base(st)
            }
          }
          
          Top : Junction
          {
            get
            {
              def find_top(j)
              {
                | Junction(parent = null) => j
                | Junction(parent = p) => find_top(p.parent)
              }
              
              find_top(parent)
            }
          }
          
          Guards : list[TransitionNode.Guard]
          {
            get
            {
              def g = match (to)
                      {
                        | TransitionTarget.PseudoState(Junction() as j) => j.Guards
                        | _ => []
                      }
              guard.MapDefault(x => g + [x], g)
            }
          }
          
          public override UpdateReference(map : StateMap) : void
          {      
            to.UpdateReference(map)
          }
          
        }
        
    public static Create(st : PseudoStateAstNode) : PseudoStateNode
    {      
      | Junction(state = st, name = n, nodes = lst) => def st = CreateState(st);
          Junction(st, n, lst)
      | Choice(state = st) => Choice(CreateState(st))
      | Fork(target = lst, state = st) => Fork(CreateState(st), lst |> TransitionTarget.Create(State(st, true), _))
      | Join(state = null, name = n, target = _) => Join(null, n, null, null)
      | Join(state = st, name = n, target = t) => def st = State(st, true);
          Join(st, n, TransitionTarget.Create(st, t), null)      
      | EntryPoint(state = st) => EntryPoint(CreateState(st))
      | ExitPoint(state = st) => ExitPoint(CreateState(st))
      | Terminate(state = st) => Terminate(CreateState(st))
    }
        
    public mutable state : FsmState;

    public Name : option[string]
    {
      get
      {
        match (this)
        {
          | Join(name = n) 
          | Junction(name = n) => Some(n)
          | _ => None()
        }
      }
    }
    
    public virtual UpdateReference(map : StateMap) : void
    {
      when (state !=null && state.Reference) state = map[state.Name]
    }
    
  }
  
  [Record]    
  [DebuggerDisplay("Actions  =  {ActionList}")]
  public variant StateAction : Actions
  {
    | Entry
        {

          Name : string
          {
            get
            {
              $"$(state)Entry"
            }
          }
         
          override ToString() : string
          {
            Name
          }
        
        }
    | Exit
        {
          Name : string
          {
            get
            {
              $"$(state)Exit"
            }
          }
         
          override ToString() : string
          {
            Name
          }
        }
      
    | Do 
        {
          [FlagAccessor (Concurrently,  NoWaitCancel, NotLong, flags = WantSetter)]
          mutable flags : ActivityFlag; // shows that we must run each action concurrently with others
          
          Name : string
          {
            get
            {
              $"DoActivity$(state)"
            }
          }
         
          override ToString() : string
          {
            Name
          }
        }       
        
    public state : FsmState;
  }
  
}
