using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  using PseudoStateAstNode;
  using FsmState;
  
  [Record]
  public variant TransitionTarget
  {
    | History 
        {
          mutable history : StateHistory;
         
          override UpdateReference(map : StateMap) : void
          {
            when (history.Reference) history = map[history.State.Name].GetHistory(history);
          }

          override ToString() : string
          {
            $"$(history.State)History"
          }
          
          this(st : FsmState, type : TargetType.History)
          {
            history = StateHistory.Create(st, type.history, true)
          }
        }
    | Final
        {
          mutable state : FsmState.Final;

          override ToString() : string
          {
            $"$(state)"
          }
          
          this()
          {
          }
          
          public override UpdateReference(map : StateMap) : void
          {
            when (state != null && state.Reference) state = map[state.Name] :> FsmState.Final;
          }
        }
    | PseudoState
        {
          mutable node : PseudoStateNode;

          this(node : TargetType.PseudoState)
          {
            this.node = PseudoStateNode.Create(node.node);
          }

          override UpdateReference(map : StateMap) : void
          {
            node.UpdateReference(map);
          }
          
          override ToString() : string
          {
            node.ToString()
          }
        }
    | State 
        {
          mutable state : FsmState;
          
          override UpdateReference(map : StateMap) : void
          {
            when (state.Reference) state = map[state.Name];
          }

          Name : string
          {
            get
            {
              state.Name
            }
          }
          
          override ToString() : string
          {
            state.ToString();
          }
          
          this(type : TargetType.State)
          {
            state = FsmState.State(type.state, true);
          }
          
        }
    
    | Named
        {
          mutable state : FsmState;
          name : string;

          override UpdateReference(map : StateMap) : void
          {
            when (state != null && state.Reference) state = map[state.Name];
          }

          Name : string
          {
            get
            {
              "Named$state.$name"
            }
          }
          
          override ToString() : string
          {
            state.ToString();
          }
          
          this(type : TargetType.Named)
          {
            state = CreateState(type.parent);
            name = type.name;
          }

        }
    public static Create(state : FsmState, target : TargetType) : TransitionTarget
    {
      match (target)
      {
        | PseudoState as t  => TransitionTarget.PseudoState(t)
        | History as t  => TransitionTarget.History(state, t)
        | Final  => TransitionTarget.Final()
        | State as t  => TransitionTarget.State(t)
        | Named as t => TransitionTarget.Named(t)
      }
    }
    
    public CompareTo(target : TransitionTarget) : int
    {
      match (this, target)
      {
        | (History(h1), History(h2)) => FsmAnalyser.StringComparator(h1.Name, h2.Name)
        | (Final(st1), Final(st2)) => FsmAnalyser.StringComparator(st1.Name, st2.Name)
        | (PseudoState(n1), PseudoState(n2)) => FsmAnalyser.StringComparator(n1.ToString(), n2.ToString())
        | (State(st1), State(st2)) => FsmAnalyser.StringComparator(st1.Name, st2.Name)
        | _ => -1
      }
    }
    
    public PartOfSubRegion : option[ConcurrentSubRegion]
    {
      get
      {
        match (ToState)
        {
          | null => None()
          | ConcurrentSubRegion as st => Some(st)
          | st => st.PartOfSubRegion
        }
      }
    }
    
    public ToState : FsmState
    {
      get
      {
        match (this)
        {
          | PseudoState(PseudoStateNode where (state = st))
          | History(StateHistory where (State = st))
          | Final(state = st)
          | State(state = st)  => st
          | Named => null
        }
      }
    }
    
    public virtual UpdateReference(_ : StateMap) : void
    {
         
    }
     
    
  }
  

}
