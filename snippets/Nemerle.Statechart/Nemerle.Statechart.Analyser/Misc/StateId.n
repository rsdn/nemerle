using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler.Parsetree;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Collections;

namespace Nemerle.Statechart
{
  
  using FsmState;
  
  public enum IdType
  {
    | Int
    | Long
    | Struct
    | Class
  }
  
  /// <summary>
  /// State identifier
  /// </summary>
  public class StateId
  {
    public mutable Id : ulong;
    public mutable LongId : BitArray;
    state : FsmState;
    mutable analyser : FsmAnalyser;
    
    public this(st : FsmState)
    {
      state = st;
    }
    
    [Accessor]
    mutable length : int;
    
    [Accessor]
    mutable mask_type : IdType;
    
    public Result : list[int]
    {
      get
      {
        def res = array(Length);
        LongId.CopyTo(res, 0);
        res.NToList()
      }
    }
    
    public CreateNumId() : void
    {
      def st = state :: state.AllSubStates.Filter(x => !(x is ConcurrentSubRegion));
      st.IterI((i, s)  => s.Id.CreateNumId(i));
    }
    
    CreateNumId(i : int) : void
    {
      Id = i :> ulong;
    }
    
    public IsSimple : bool
    {
      get
      {
        match (mask_type)
        {
          | Int
          | Long => true
          | _ => false
        }
      }
    }
    
    CreateMask(analyser : FsmAnalyser, type : IdType) : void
    {
      mask_type = type;
      this.analyser = analyser;
      
      def create_mask()
      {
        def get_super(st)
        {
          match (st.SuperState)
          {
            | ConcurrentSubRegion(SuperState = st) => st
            | st => st
          }
        }
        
        when (Id  != 0ul)
          Id =  (1 : ulong << (Id :> int - 1)) | get_super(state).Id.Id;
      }

      def create_long_mask()
      {
        when (Id != 0ul)
        {
          LongId.Set(Id :> int - 1, true);
          LongId = LongId.Or(state.SuperState.Id.LongId);
        }
      }
      
      if (IsSimple)
      {
        create_mask()
      } else create_long_mask();
    
      def st = match (state)
      {
       | ConcurrentRegion(sub_regions = r) =>  r |>< SubStates;
       | _ => state.SubStates
      }
      st.Iter(x => x.Id.CreateMask(analyser, mask_type));
    }
    
    public CreateMask(analyser : FsmAnalyser) : void
    {
      def st = analyser.Statemap.States.Filter(x => !(x is ConcurrentSubRegion));
      def count = st.Length;
      length = MathUtils.UpperDiv(count, 32);
      def mask_type = match (Length)
                 {
                   | x when x <= 1 => IdType.Int
                   | x when x <= 2 => IdType.Long
                   | x when x <= 4 => LongId = BitArray(count);
                                      IdType.Struct
                   | _ => LongId = BitArray(count);
                          IdType.Class
                 }
      CreateMask(analyser, mask_type)
    }
  }
}
