using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Peg;
using Nemerle;
using System.Diagnostics;
using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;

namespace Nemerle.Statechart
{

    using StateNode;
    using PseudoStateAstNode;
    /*

<#
  flags : no_auto_initial,  local_default,  auto_initial

  state NManager
  {
      $> Action // entry alternative
      $< Action2 // exit alternative

    initial  => Working
    0  => Working // another initial

    event => terminate; // terminate pseudo state

    event => X;

    [local]
    state NotConnected
    {
        (H)  => Working
    [local]
    Connect  => Working
    Connect2 / Action
    Connect4 ( => Working // local transition syntax
    Connect5 ) => Working // external transition syntax
    Connect3
     {
         Action
         Action2
     }
    }

    [Initial]
    state ClosingPort
    {
        (H*)
        entry / action

        event1  => final
        completion  => State2
        _  => State2 // another completion syntax

        SelfEvent  =>@ // self transition
        SelfEvent2  => self // self transition

        Event1,  Event2  => Working  // many events for one transition
    }

    state Working
    {

     history : Deep  => ABC
     entry
     exit
     {
     Something2
     Something3
     }
        (H*)

      junction j1
      {
      guard1 => a;
      guard2 => b;
      }

     // junction syntax
      a => {guard1 / A1 => b;
             guard2 / A2 => c;
             guard3 / A3 => {
                             guard4 / A4 => e;
                             guard5 / A5=> (j1);
                             else => f;
                             }
             else => d;
            }
            
      merge m1 => A;
      a => ${guard1 / A1 => b;
             guard2 / A2 => c;
             guard3 / A3 => {
                             guard4 / A4 => e;
                             guard5 / A5=> (j1);
                             else => f;
                             }
             else => d;
            }
            
   }
 }
   #>
    */

  [PegGrammar(Options  =  EmitDebugSources, stateMachine,
  grammar
  {
      any                                          =  ['\u0000'..'\uFFFF'];
      newLine                                      =  "\r\n" / '\n' / '\r' / '\u2028' / '\u2029' / '\u0085';
      singleLineComment                            =  "//" (!('\n' / '\r') [Any])* newLine?;
      delimitedComment                             =  "/*" (!"*/" [Any])* "*/";
      comment                                      =  singleLineComment / delimitedComment;
      spaces_def                                   =  (' ' / '\t' / '\u000B' / '\u000C' / newLine / comment)*;
      spaces : void                                =  spaces_def;
      letter                                       =  [Lu,  Ll,  Lt,  Lm,  Lo,  Nl,  Nd] / '_' / '-' / '@' / '*' / '$';
      target_letter                                =  letter / '(' / ')' / '[' / ']';
      end_symb  : void                             =  ';'s;
      delimiter : void                             =  ',' / spaces_def;
      s : void                                     =  spaces;
      identifier                                   =  letter+;
      target_id                                    =  target_letter+;
      open_brace  : void                           =  "{"s;
      close_brace : void                           =  "}"s;
      slash       : void                           =  '/'s;
      dollar                                       = '$'s;
      goto        : void                           =   "=>"s;
      entry_key                                    =  ("entry" / "$>")s;
      exit_key                                     =  ("exit" / "$<")s;
      state_key   : void                           =  "state"s;
      initial_key                                  =  ("initial" / "0")s;
      flags_key   : void                           =  "flags"s;
      history_key : void                           =  "history"s;
      attr_begin  : void                           =  '['s;
      attr_end    : void                           =  ']'s;
      colon       : void                           =  ':'s;
      point       : void                           =  '.';
      comma       : void                           =  ','s;
      terminate_key                                = ("terminate" / "X" / "x") s;
      name               : NameIdentifier          =  target_id s;
      // terminal rules
      guard              : TransitionNode.Guard    =  attr_begin identifier s attr_end;
      simple_guard       : TransitionNode.Guard    =  identifier s;
      fully_qualified    : NameIdentifier          =  target_id point target_id s;
      simple_attrs       : List[NToken]            =  (attr_begin (identifier s comma?)+ attr_end s)+;

      attributes         : List[StateAttribute]    =  simple_attrs;
      delim_action_list  : Actions                 =  (!end_symb identifier s delimiter)* s end_symb;
      simple_action_list : Actions                 =  slash delim_action_list;
      empty_action_list  : Actions                 =  "()";
      block_action_list  : Actions                 =  open_brace (!close_brace identifier s delimiter)* close_brace;
      action_list        : Actions                 =  empty_action_list / not_empty_list;
      not_empty_list     : Actions                 =  simple_action_list / block_action_list;
      entry              : StateNode               =  entry_key action_list? end_symb?;
      exit               : StateNode               =  exit_key action_list? end_symb?;
      do_activity        : StateNode               =  simple_attrs? "do"s not_empty_list end_symb?;
      
      terminate_node     : StateNode               =  terminate_key end_symb;
      pseudo_state       : StateNode               =  terminate_node / join / junction / choice / merge;
      join               : StateNode               =  "join"s identifier s goto transition_target;
      junction           : StateNode               =  "junction"s identifier s junction_body;
      junction_body      : Junction                =  open_brace (!close_brace simple_guard? trans_act_list? goto transition_target)+ close_brace;
      junction_target    : TargetType              =  junction_body;
      choice             : StateNode               =  "choice"s identifier s dollar? junction_body;
      choice_target      : TargetType              =  dollar junction_body;
      merge              : StateNode               =  "merge"s identifier s guard? trans_act_list? goto transition_target;
      simple_target      : TargetType              =  fully_qualified / name;
      trans_target       : TargetType              =  (simple_target s (!end_symb simple_target s delimiter)* end_symb);
      transition_target  : TargetType              =  choice_target / junction_target / trans_target;
      
      trans_act_list     : Actions                 =  slash (!goto identifier s delimiter)*;
      transition_mark    : StateNode.Transition    =  s guard? trans_act_list? goto transition_target;
      default_transition : StateNode.Default       =  s trans_act_list? goto transition_target s end_symb?;
      internal_trans     : StateNode               =  identifier s guard? action_list;
      initial_trans      : StateNode               =  initial_key transition_mark;
      events         : List[TransitionNode.Event]  =  identifier s (!transition_mark comma identifier s)* s;
      simple_transition  : StateNode               =  events transition_mark;
      transition         : StateNode               =  initial_trans / simple_transition / internal_trans;

      history_deep       : StateNode               =  "(H*)"s default_transition?;
      history_shallow    : StateNode               =  "(H)"s default_transition?;
      history_short      : StateNode               =  history_deep / history_shallow;
      history_long       : StateNode               =  history_key colon identifier s default_transition?;
      history            : StateNode               =  (history_long / history_short) end_symb?;

      stateDecl          : StateNode               =  region / pseudo_state / entry / exit / do_activity / transition / state / history;
      stateBody          : List[StateNode]         =  open_brace stateDecl* close_brace;
      state              : StateNode               =  attributes? state_key identifier s stateBody;

      region             : StateNode               =  attr_begin "---" '-'* attr_end;
      flags              : MachineFlags            =  flags_key colon (identifier s comma?)+ end_symb;
      stateMachine       : StateMachine            =  spaces_def flags? stateDecl + s;

  })]
  public partial class FsmParser
  {

  }

}


