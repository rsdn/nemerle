using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of Class1.
  /// </summary>
  public module MapUtils
  {    
    
    public MapToList[TKey,TValue,TRes](this map : Hashtable[TKey,TValue],sel : TKey * TValue -> TRes) : list[TRes]
    {        
      $[ sel(x.Key,x.Value) | x in map ]
    }
    
    public Add[TKey,TValue](this map : Hashtable[TKey,TValue],seq : Seq[KeyValuePair[TKey,TValue]]) : void
    {
      seq.Iter(x => map.Add(x.Key,x.Value));
    }
      
    public Add[TKey,TValue](this map : Hashtable[TKey,TValue],seq : Seq[TKey * TValue]) : void
    {
      seq.Iter(map.Add(_));
    }
    
    public Set[TKey,TValue](this map : Hashtable[TKey,TValue],key : TKey,value : TValue) : void
    {
      if (map.ContainsKey(key)) map[key]=value else map.Add(key,value);
    }
    
    /// <summary>
    /// Добавление в словарь с листом в качестве значения
    /// </summary>
    public AddList[TKey,TValue](this map : Hashtable[TKey,list[TValue]],seq : Seq[TKey * list[TValue]]) : void
    {
      def add(item,value)
      {          
        if (map.ContainsKey(item))
        {
          def val=map[item];
          def app=val.Append(value);         
          map[item]=app;
        }
        else
        {
          map.Add((item,value));
        }
      }
      
      seq.Iter(add);
    }

    public AddList[TKey,TValue](this map : Hashtable[TKey,list[TValue]],seq : Seq[TKey * TValue]) : void
    {
      def add(item,value : TValue)
      {          
        if (map.ContainsKey(item))
        {
          def val=map[item];
          def app=value :: val;
          map[item]=app;
        }
        else
        {                    
          map.Add(item,[value]);
        }
      }
      
      seq.Iter(add);
    }
    
    public Set[TKey,TValue](this map : Hashtable[TKey,TValue],seq : Seq[TKey * TValue]) : void
    {
      seq.Iter((key,value) => map[key]=value);
    }
      
    public Combine[TKey,TValue](this map : Hashtable[TKey,TValue],map2 : Hashtable[TKey,TValue]) : Hashtable[TKey,TValue]
    {
      def map=Hashtable(map);
      map.Add(map2);
      map
    }
    
    public Keys[TKey,TValue](this map : Map[TKey,TValue]) : list[TKey]
    {
        map %|> _;
    }
    
    public Values[TKey,TValue](this map : Map[TKey,TValue]) : list[TValue]
    {
        map ^|> _;
    }

    public Keys[TKey,TValue](this map : Hashtable[TKey,TValue]) : list[TKey]
    {
        map.MapToList((k,_) => k);
    }
    
    public Values[TKey,TValue](this map : Hashtable[TKey,TValue]) : list[TValue]
    {
        map.MapToList((_,v) => v);
    }
    
  }
}
