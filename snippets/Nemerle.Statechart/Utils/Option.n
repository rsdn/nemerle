using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;

namespace Nemerle.Statechart
{
  [Record]
  variant ThreeOption[T]
  {
    | None
    | One {elem : T;}
    | Two {first : T;second : T;}
        
    
    public HasValue : bool
    {
      get
      {
        match (this)
        {
          | None  => false
          | _  => true
        }
      }
    }
    
    public IsOne : bool
    {
      get
      {
        this is One
      }
    }
    
    public IsTwo : bool
    {
      get
      {
        this is Two
      }
    }
    
    public IsNone : bool
    {
      get
      {
        this is ThreeOption.None
      }
    }
    
    public First : option[T]
    {
      get
      {
        match (this)
        {
          | None  => option.None()
          | One(elem)  => Some(elem)
          | Two(first = f)  => Some(f)
        }
      }
    }

    public Second : option[T]
    {
      get
      {
        match (this)
        {
          | None  => None()
          | One  => None()
          | Two(second = f)  => Some(f)
        }
      }
    }
    
    public Map[TRes](conv : T -> TRes) : ThreeOption[TRes]
    {
      match (this)
      {
        | None  => ThreeOption.None()
        | Two(f, s)  => ThreeOption.Two(conv(f), conv(s))
        | One(f)  => ThreeOption.One(conv(f))
      }
    }

    public MapToList[TRes](conv : T -> TRes) : list[TRes]
    {
      match (this)
      {
        | None  => []
        | Two(f, s)  => [conv(f), conv(s)]
        | One(f)  => [conv(f)]
      }
    }
    
    public ToList() : list[T]
    {
      match (this)
      {
        | None  => []
        | Two(f, s)  => [f, s]
        | One(f)  => [f]
      }
    }
    
    public Iter(iter : T -> void) : void
    {
      match (this)
      {
        | None  => ()
        | Two(f, s)  => iter(f);iter(s)
        | One(f)  => iter(f)
      }        
    }
    
    public Value : list[T]
    {
      get
      {
        ToList()
      }
    }
    
    public static Compare[T1](this a : option[T1], b : option[T1], comp : T1 * T1 -> int) : int
    {
      match (a, b)
      {
        | (Some(a), Some(b))  => comp(a, b)
        | (Some, None)  => 1
        | (None, Some)  => -1
        | (None, None)  => 0
      }
    }
    
    public override ToString() : string
    {
      match (this)      
      {
        | None  => "None"
        | One(f)  => $"One($f)"
        | Two(f, s)  => $"Two($f, $s)"
      }
    }
  }
}
