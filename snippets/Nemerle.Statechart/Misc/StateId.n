using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler.Parsetree;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Collections;

namespace Nemerle.Statechart
{
  
  enum IdType
  {
    | Int
    | Long
    | Struct
    | Class
  }
  
  /// <summary>
  /// Идентификатор состояния
  /// </summary>
  class StateId
  {
    public mutable Id : ulong;
    public mutable LongId : BitArray;
    state : FsmState;
    mutable analyser : FsmAnalyser;
    
    public this(st : FsmState)
    {
      state = st;
    }
    
    [Accessor]
    mutable length : int;
    
    [Accessor]
    mutable mask_type : IdType;
    
    public Result : list[int]
    {
      get
      {
        def res = array(Length);
        LongId.CopyTo(res, 0);
        res.NToList()
      }
    }
         
    public CreateNumId(i : int) : void
    {
      Id = i :> ulong;
    }
    
    public IsSimple : bool
    {
      get
      {
        match (mask_type)
        {
          | Int
          | Long => true
          | _ => false
        }
      }
    }
    
    public CreateMask(analyser : FsmAnalyser) : void
    {      
      this.analyser = analyser;
      def count = analyser.Statemap.Count;
      length = MathUtils.UpperDiv(count, 32);
      mask_type = match (Length)
                 {
                   | x when x <= 1 => IdType.Int
                   | x when x <= 2 => IdType.Long
                   | x when x <= 4 => LongId = BitArray(count);
                                      IdType.Struct
                   | _ => LongId = BitArray(count);
                          IdType.Class
                 }
        
      def create_mask()
      {
        when (Id  != 0ul)
          Id =  (1 : ulong << (Id :> int - 1)) | state.SuperState.Id.Id;
      }

      def create_long_mask()
      {
        when (Id != 0ul)
        {          
          LongId.Set(Id :> int - 1, true);
          LongId = LongId.Or(state.SuperState.Id.LongId);
        }
      }
      
      if (IsSimple)
      {
        create_mask()
      } else create_long_mask();
    
      state.SubStates.Iter(x => x.Id.CreateMask(analyser));
    }
  }
}
