using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;


namespace $itemnamespace$
{$if$ ($IsMacroAttribute$ == True)
  [MacroUsage($MacroPhase$, $ValidOn$)]$endif$
  macro $safeitemrootname$($MacroParametersDefinition$)$if$ ($IsSyntaxDefined$ == True)
  // See: http://nemerle.org/wiki/Macros_tutorial#Adding_new_syntax_to_the_compiler and http://nemerle.org/wiki/Syntax_extensions
  $Syntax$ $endif$
  {
    $safeitemrootname$Impl.DoTransform(Macros.ImplicitCTX(), $ParametersReference$)
  }
  
  module $safeitemrootname$Impl
  {
    public DoTransform(typer : Typer, $MethodParametersDefinition$) : $MacroReturnType$
    {
      Macros.DefineCTX(typer);
      // TODO: Add implementation here.
      $ParametersFukeUse$;
    }
  }
}
