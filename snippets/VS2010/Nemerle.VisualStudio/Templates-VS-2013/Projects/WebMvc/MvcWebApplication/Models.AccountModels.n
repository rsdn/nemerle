using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Security;

namespace $safeprojectname$.Models
{

	#region Models
	[PropertiesMustMatch("NewPassword", "ConfirmPassword", ErrorMessage = "The new password and confirmation password do not match.")]
	public class ChangePasswordModel
	{
		[Required]
		[DataType(DataType.Password)]
		[DisplayName("Current password")]
		public OldPassword : string { get; set; }

		[Required]
		[ValidatePasswordLength]
		[DataType(DataType.Password)]
		[DisplayName("New password")]
		public NewPassword : string { get; set; }

		[Required]
		[DataType(DataType.Password)]
		[DisplayName("Confirm new password")]
		public ConfirmPassword : string { get; set; }
	}

	public class LogOnModel
	{
		[Required]
		[DisplayName("User name")]
		public UserName : string { get; set; }

		[Required]
		[DataType(DataType.Password)]
		[DisplayName("Password")]
		public Password : string { get; set; }

		[DisplayName("Remember me?")]
		public RememberMe : bool { get; set; }
	}

	[PropertiesMustMatch("Password", "ConfirmPassword", ErrorMessage = "The password and confirmation password do not match.")]
	public class RegisterModel
	{
		[Required]
		[DisplayName("User name")]
		public UserName : string { get; set; }

		[Required]
		[DataType(DataType.EmailAddress)]
		[DisplayName("Email address")]
		public Email : string { get; set; }

		[Required]
		[ValidatePasswordLength]
		[DataType(DataType.Password)]
		[DisplayName("Password")]
		public Password : string { get; set; }

		[Required]
		[DataType(DataType.Password)]
		[DisplayName("Confirm password")]
		public ConfirmPassword : string { get; set; }
	}
	#endregion

	#region Services
	// The FormsAuthentication type is sealed and contains static members, so it is difficult to
	// unit test code that calls its members. The interface and helper class below demonstrate
	// how to create an abstract wrapper around such a type in order to make the AccountController
	// code unit testable.

	public interface IMembershipService
	{
		MinPasswordLength : int { get; }

		ValidateUser (userName : string, password : string) : bool;
		CreateUser(userName : string, password : string, email : string) : MembershipCreateStatus;
		ChangePassword(userName : string, oldPassword : string, newPassword : string) : bool;
	}

	public class AccountMembershipService : IMembershipService
	{
		private _provider : MembershipProvider;

		public this()
		{
		  this(null)
		}

		public this(provider : MembershipProvider)
		{
			_provider = provider ?? Membership.Provider;
		}

		public MinPasswordLength : int
		{
			get
			{
				_provider.MinRequiredPasswordLength;
			}
		}

		public ValidateUser(userName : string, password : string) : bool
		{
			when (String.IsNullOrEmpty(userName)) throw ArgumentException("Value cannot be null or empty.", "userName");
			when (String.IsNullOrEmpty(password)) throw ArgumentException("Value cannot be null or empty.", "password");

			_provider.ValidateUser(userName, password);
		}

		public CreateUser(userName : string, password : string, email : string) : MembershipCreateStatus
		{
			when (String.IsNullOrEmpty(userName)) throw ArgumentException("Value cannot be null or empty.", "userName");
			when (String.IsNullOrEmpty(password)) throw ArgumentException("Value cannot be null or empty.", "password");
			when (String.IsNullOrEmpty(email)) throw ArgumentException("Value cannot be null or empty.", "email");

			mutable status : MembershipCreateStatus;
			_ = _provider.CreateUser(userName, password, email, null, null, true, null, out status);
			status;
		}

		public ChangePassword(userName : string, oldPassword : string, newPassword : string) : bool
		{
			when (String.IsNullOrEmpty(userName)) throw ArgumentException("Value cannot be null or empty.", "userName");
			when (String.IsNullOrEmpty(oldPassword)) throw ArgumentException("Value cannot be null or empty.", "oldPassword");
			when (String.IsNullOrEmpty(newPassword)) throw ArgumentException("Value cannot be null or empty.", "newPassword");

			// The underlying ChangePassword() will throw an exception rather
			// than return false in certain failure scenarios.
			try
			{
				def currentUser = _provider.GetUser(userName, true /* userIsOnline */);
				currentUser.ChangePassword(oldPassword, newPassword);
			}
			catch
			{
			  | _ is ArgumentException => false;
			  | _ is MembershipPasswordException => false;
			}
		}
	}

	public interface IFormsAuthenticationService
	{
		SignIn(userName : string, createPersistentCookie : bool) : void;
		SignOut() : void;
	}

	public class FormsAuthenticationService : IFormsAuthenticationService
	{
		public SignIn(userName : string, createPersistentCookie : bool) : void
		{
			when (String.IsNullOrEmpty(userName)) throw ArgumentException("Value cannot be null or empty.", "userName");

			FormsAuthentication.SetAuthCookie(userName, createPersistentCookie);
		}

		public SignOut() : void
		{
			FormsAuthentication.SignOut();
		}
	}
	#endregion

	#region Validation
	public static class AccountValidation
	{
		public static ErrorCodeToString(createStatus : MembershipCreateStatus) : string
		{
			// See http://go.microsoft.com/fwlink/?LinkID=177550 for
			// a full list of status codes.
		  match(createStatus)
		  {
				| MembershipCreateStatus.DuplicateUserName => "Username already exists. Please enter a different user name.";
				| MembershipCreateStatus.DuplicateEmail => "A username for that e-mail address already exists. Please enter a different e-mail address.";
				| MembershipCreateStatus.InvalidPassword => "The password provided is invalid. Please enter a valid password value.";
				| MembershipCreateStatus.InvalidEmail => "The e-mail address provided is invalid. Please check the value and try again.";
				| MembershipCreateStatus.InvalidAnswer => "The password retrieval answer provided is invalid. Please check the value and try again.";
				| MembershipCreateStatus.InvalidQuestion => "The password retrieval question provided is invalid. Please check the value and try again.";
				| MembershipCreateStatus.InvalidUserName => "The user name provided is invalid. Please check the value and try again.";
				| MembershipCreateStatus.ProviderError => "The authentication provider returned an error. Please verify your entry and try again. If the problem persists, please contact your system administrator.";
				| MembershipCreateStatus.UserRejected => "The user creation request has been canceled. Please verify your entry and try again. If the problem persists, please contact your system administrator.";
				| _ => "An unknown error occurred. Please verify your entry and try again. If the problem persists, please contact your system administrator.";
			}
		}
	}

	[AttributeUsage(AttributeTargets.Class, AllowMultiple = true, Inherited = true)]
	public sealed class PropertiesMustMatchAttribute : ValidationAttribute
	{
		private static _defaultErrorMessage = "'{0}' and '{1}' do not match.";
		private _typeId : object = object();

		public this(originalProperty : string, confirmProperty : string)
		{
		  base(_defaultErrorMessage);
			OriginalProperty = originalProperty;
			ConfirmProperty = confirmProperty;
		}

		public ConfirmProperty : string { get; private set; }
		public OriginalProperty : string { get; private set; }

		public override TypeId : object
		{
			get { _typeId; }
		}

		public override FormatErrorMessage(_name : string) : string
		{
			String.Format(CultureInfo.CurrentUICulture, ErrorMessageString, OriginalProperty, ConfirmProperty);
		}

		public override IsValid(value : object) : bool
		{
			def properties = TypeDescriptor.GetProperties(value);
			def originalValue = properties.Find(OriginalProperty, true /* ignoreCase */).GetValue(value);
			def confirmValue = properties.Find(ConfirmProperty, true /* ignoreCase */).GetValue(value);
			
			Object.Equals(originalValue, confirmValue);
		}
	}

	[AttributeUsage(AttributeTargets.Field | AttributeTargets.Property, AllowMultiple = false, Inherited = true)]
	public sealed class ValidatePasswordLengthAttribute : ValidationAttribute
	{
		private static _defaultErrorMessage = "'{0}' must be at least {1} characters long.";
		private _minCharacters = Membership.Provider.MinRequiredPasswordLength;

		public this()
		{
		  base(_defaultErrorMessage);
		}

		public override FormatErrorMessage(name : string) : string
		{
			String.Format(CultureInfo.CurrentUICulture, ErrorMessageString, name, _minCharacters);
		}

		public override IsValid(value : object) : bool
		{
			def valueAsString = value :> string;
			
			(valueAsString != null && valueAsString.Length >= _minCharacters);
		}
	}
	#endregion
}
