using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Completion2;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Imperative;
using Nemerle.Utility;

using TExpr = Nemerle.Compiler.Typedtree.TExpr;
using ConstraintEx = System.Reflection.GenericParameterAttributes;

namespace Nemerle.Compiler.Utils
{
	module HintHelper
	{
	  public HtmlMangling(str : string) : string
	  {
	    str.Replace("&", "&amp;").Replace(">", "&gt;").Replace("<", "&lt;")
	  }

	  public MakeTextHintForLocalFunc(header : TFunHeader) : string * Func[string, string]
	  {
      def cnv   = SubHintForType();
      def types = header.decl.Type.Fix().FunReturnTypeAndParms().UnSome();
      def text  = MakeFuncHint(cnv, false, header, p => p.Name, types, null);
      //def text = $"(function parameter) $(param.name) : $(cnv.TypeVarToString(param.ty))";
      ("(local function) " + text, cnv.GetDelayedHintHendler())
	  }

	  public MakeTextHintForTParameter(param : TParameter) : string * Func[string, string]
	  {
      def cnv = SubHintForType();
      def text = $"(function parameter) $(param.name) : $(cnv.TypeVarToString(param.ty))";
      (text, cnv.GetDelayedHintHendler())
	  }

	  public MakeTextHintForLocalValue(value : LocalValue) : string * Func[string, string]
	  {
      def cnv = SubHintForType();
      def text = IO.sprintf("(%s) %s%s",
        value.GetKindText(),
        value.Name,
        match (value.ValKind)
        {
        | Function => cnv.TypeVarToString(value.Type)
        | _        => " : " + cnv.TypeVarToString(value.Type)
        });

      def definedIn = value.DefinedIn.ToString();
      def text = if (value.UsedIn.Exists(use => use.ToString() != definedIn))
                   $"$text<lb/>defined in $definedIn";
                 else text;

      (text, cnv.GetDelayedHintHendler())
	  }

    public MakeTextHintForReferenceTExpr(expr : TExpr) : string * Func[string, string]
    {
      def makeText(expr : TExpr)
      {
        | TExpr.StaticPropertyRef(from, prop) => MakeTextHintForTExprStaticPropertyRef(from, prop)
        | TExpr.PropertyMember(obj, prop) => MakeTextHintForTExprPropertyMember(obj, prop)
        | TExpr.StaticRef(FixedType.Class as from, prop is IProperty, []) => MakeTextHintForTExprStaticPropertyRef(from, prop)
        | LocalFunRef(decl, tyArgs) as fRef => MakeTextHintForTExprLocalFunRef(fRef, decl, tyArgs)
        | StaticRef(FixedType.Class as ty, fld is IField, tyArgs2) => MakeTextHintForTExprStaticFieldRef(ty, fld, tyArgs2)
        | ConstantObjectRef(from, fld) => MakeTextHintForTExprStaticFieldRef(from, fld, [])
        | FieldMember(obj, fld) => MakeTextHintForTExprFieldMember(obj, fld)
        | MethodRef(obj, method, typeArgs, notvirtual) => MakeTextHintForTExprMethodRef(expr, obj, method, typeArgs, notvirtual)
        | StaticRef(FixedType.Class(ti, tyArgs1), method is IMethod, tyArgs2) => MakeTextHintForTExprStaticMethodRef(expr, ti, tyArgs1, method, tyArgs2)
        //| _ => (HtmlMangling(expr.ToString()), null)
        | _ => (null, null)
      }

      makeText(expr)
    }

    MakeTextHintForTExprProperty(
      cnv      : SubHintForType,
      inferred : bool,
      declType : FixedType,
      prop     : IProperty,
      doc      : XmlDocInfo
    )
      : string
    {
      def old = cnv.ExpandTypeArgs;
      cnv.ExpandTypeArgs = inferred;

      def (paramsTypes, propTy) =
        match (declType.TypeOfMember(prop))
        {
          | FixedType.Fun(FixedType.Tuple(parms), to) when prop.IsIndexer => (parms, to)
          | FixedType.Fun(param, to) when prop.IsIndexer              => ([param], to)
          | to                                                    => ([], to)
        };

      def paramsStr =
        if (prop.IsIndexer)
        {
          def mkName(p : TParameter) : string
          {
            def name = p.Name;
            match (if (doc == null) null else doc.Params.Find((k, _) => k == name))
            {
              | Some((_, txt)) => $"<hint value='$name'>$txt</hint>"
              | _ => name
            }
          }
          def getter = prop.GetGetter();
          def setter = prop.GetSetter();
          if (getter != null)
            "[" + MakeParamsHint(cnv, getter.Header.Parameters, paramsTypes, mkName) + "]"
          else if (setter != null)
            "[" + MakeParamsHint(cnv, setter.Header.Parameters.Filter(p => p.Name != "value"),
                    paramsTypes, mkName) + "]"
          else "[?]";
        }
        else null;

      def res = MakeAccessModifiers(prop)
          + cnv.TypeVarToString(declType) + ".<b>" + prop.Name + "</b>" + paramsStr + " : "
          + cnv.TypeVarToString(propTy);

      cnv.ExpandTypeArgs = old;

      res
    }

    MakeGetterAndSetterHint(prop : IProperty) : string
    {
      def getter = prop.GetGetter();
      def setter = prop.GetSetter();
      if (getter == null && setter == null)
        null
      else
      {
        "<lb/>"
        + (if (getter != null) "<keyword><hint value='get'>This property has getter</hint></keyword> " else null)
        + (if (setter != null) "<keyword><hint value='set'>This property has setter</hint></keyword>"  else null)
      }
    }

    MakeTextHintForTExprStaticPropertyRef(from : FixedType.Class, prop : IProperty) : string * Func[string, string]
    {
      def cnv = SubHintForType();
      def doc = GetDoc(prop);

      def res = "Static property: " + MakeTextHintForTExprProperty(cnv, false, from, prop, doc)
              + (if (IsGeneric(from))
                  "<lb/>Inferred: " + MakeTextHintForTExprProperty(cnv, true, from, prop, doc)
                else null)
              + MakeGetterAndSetterHint(prop);

      (res + GetDocText(doc), cnv.GetDelayedHintHendler())
    }

    MakeTextHintForTExprPropertyMember(obj : TExpr, prop : IProperty) : string * Func[string, string]
    {
      def cnv = SubHintForType();
      def doc = GetDoc(prop);
      def from = obj.Type.Fix();
      def res = "Instance property: " + MakeTextHintForTExprProperty(cnv, false, from, prop, doc)
              + (if (IsGeneric(from)) "<lb/>Inferred: " + MakeTextHintForTExprProperty(cnv, true, from, prop, doc)
                 else null)
              + MakeGetterAndSetterHint(prop);

      (res + GetDocText(prop), cnv.GetDelayedHintHendler())
    }


    MakeTextHintForField(cnv : SubHintForType, inferred : bool, declType : TypeVar, fld : IField, fldType : TypeVar) : string
    {
      def old = cnv.ExpandTypeArgs;
      cnv.ExpandTypeArgs = inferred;
      def res = MakeAccessModifiers(fld)
          + cnv.TypeVarToString(declType) + ".<b>" + fld.Name + "</b> : "
          + cnv.TypeVarToString(fldType);
      cnv.ExpandTypeArgs = old;

      res
    }

    public MakeTextHintForTExprStaticFieldRef(ty : FixedType.Class, fld : IField, tyArgs2 : list[TypeVar]) : string * Func[string, string]
    {
      def cnv = SubHintForType();

      def fldTy = ty.TypeOfMember(fld);
      def res = "Static field: " + MakeTextHintForField(cnv, false, ty, fld, fldTy)
              + if (IsGeneric(ty)) "<lb/>Inferred: " + MakeTextHintForField(cnv, true, ty, fld, fldTy)
                else null;

      def x = if (tyArgs2.IsEmpty) null else  $"<bl/> !tyArgs2.IsEmpty (..$tyArgs2) !!!";
      (res + GetDocText(fld) + x, cnv.GetDelayedHintHendler())
    }

    public MakeTextHintForTExprFieldMember(obj : TExpr, fld : IField) : string * Func[string, string]
    {
      def cnv = SubHintForType();

      def objTy = obj.Type.Fix();
      def fldTy = objTy.TypeOfMember(fld);
      def isGeneric = IsGeneric(objTy);
      // Fixme: VladD2: Вместо рукопашной подстановки параметров типов нужно использовать Subst из компилятора.
      // Для дженерик-версии сабст должен подставлять параметры типов из опеределения типа, а
      // для выведенных типов брать аргументы типов из типизированного выражения.
      // Сегодняшнее решение может выдавать не верные результаты внутри метдов дженерик-тиов.
      def res = "Instance field: " + MakeTextHintForField(cnv, !isGeneric, obj.Type, fld, fldTy)
              + if (isGeneric) "<lb/>Inferred: " + MakeTextHintForField(cnv, true, obj.Type, fld, fldTy)
                else null;

      (res + GetDocText(fld), cnv.GetDelayedHintHendler())
    }

    MakeTextHintForTExprLocalFunRef(
      expr   : TExpr.LocalFunRef,
      func   : LocalValue,
      tyArgs : list[TypeVar]
    )
      : string * Func[string, string]
    {
      def kind = func.ValueKind :> LocalValue.Kind.Function;

      def cnv = SubHintForType();
       //FIXME: Для функции makeMethodInfo не создается фолдинг-регион!
       // def makeMethodInfo(cnv : Utils.Convert, inferred : bool, declTy : FixedType.Class, method : IMethod, (argsTypes, retType) : list[TypeVar] * TypeVar) : string { null }
      def methodType() : string
      {
        MakeFuncHint(cnv, false, kind.header, p => p.Name,
          func.Type.Fix().FunReturnTypeAndParms().UnSome(), null);
      }
      def inferredType() : string
      {
        MakeFuncHint(cnv, true, kind.header, p => p.Name,
          expr.Type.Fix().FunReturnTypeAndParms().UnSome(), null);
      }

      def definedIn = func.DefinedIn.ToString();
      def text = if (func.UsedIn.Exists(use => use.ToString() != definedIn))
                   $"<lb/>defined in $definedIn";
                 else null;

      def methodInfo = if (tyArgs.IsEmpty) "(local function) " + methodType()
                       else "(generic local function) " + methodType()
                            + "<lb/> Inferred: " + inferredType();

      (methodInfo + text, cnv.GetDelayedHintHendler())
    }

    internal MakeTyParamsToTyArgsMap(
      tyParams : list[StaticTypeVar],
      tyArgs   : list[TypeVar],
      tyMap    : Hashtable[string, TypeVar]
    )          : Hashtable[string, TypeVar]
    {
      NList.FoldLeft2(tyParams, tyArgs, tyMap,
        fun(tyParam, tyArg, tyMap){ tyMap[tyParam.Name] = tyArg; tyMap });
    }

    MakeParamsHint(
      cnv        : Utils.Convert,
      parms      : list[TParameter],
      parmsTypes : list[TypeVar],
      mkName     : TParameter -> string
    )
      : string
    {
      def argsStrs  = parms.Map2Lazy(parmsTypes,
        (p, t) => $"<pname>$(mkName(p))</pname> <ptype>: $(cnv.TypeVarToString(t))</ptype>");
      $"<params>..$argsStrs</params>"
    }

    SpecialConstraintToString(typeTarameter : StaticTypeVar, constr : ConstraintEx, val : string) : string
    {
      if (typeTarameter.SpecialConstraints %&& constr) val else ""
    }

    MakeFuncHint(
      cnv      : Utils.Convert,
      inferred : bool,
      header   : TFunHeader,
      mkName   : TParameter -> string,
      sign     : list[TypeVar] * TypeVar,
      doc      : XmlDocInfo) : string
    {
      def (argsTypes, retType) = sign;
      def parms = header.Parameters;
      def retTyStr = cnv.TypeVarToString(retType);
      def argsStrs = MakeParamsHint(cnv, parms, argsTypes, mkName);
      _ = doc;
      def name      = "<b>" + header.Name + "</b>";
      //def isCtor    = name.Contains(".ctor");
      def tyParams = header.TypeParameters.Map(tp => SpecialConstraintToString(tp, ConstraintEx.Contravariant, "<hint value='-'>The generic type parameter is contravariant. A contravariant type parameter can appear as a parameter type in method signatures.</hint>")
                                            + SpecialConstraintToString(tp, ConstraintEx.Covariant,     "<hint value='+'>The generic type parameter is covariant. A covariant type parameter can appear as the result type of a method, the type of a read-only field, a declared base type, or an implemented interface.</hint>")
                                            + tp.Name);
      def methodTyParams = if (inferred || tyParams.IsEmpty) "" else $<#[..$tyParams]#>;

      def tyParams = header.TypeParameters;
      def tyConstrainedParams = tyParams.Filter(t => !t.Constraints.IsEmpty || t.SpecialConstraints != ConstraintEx.None);
      def typeParameterConstraintsClause(t : StaticTypeVar) : string
      {
        def specConstrs = [
            SpecialConstraintToString(t, ConstraintEx.DefaultConstructorConstraint,   "<keyword><hint value='new'>must support parameterless constructor</hint></keyword>"),
            SpecialConstraintToString(t, ConstraintEx.NotNullableValueTypeConstraint, "<keyword><hint value='struct'>must be a non-nullable value type</hint></keyword>"),
            SpecialConstraintToString(t, ConstraintEx.ReferenceTypeConstraint,        "<keyword><hint value='class'>must be a reference type</hint></keyword>")
          ].Filter(c => c != "");

        def constrs = t.Constraints.Map(ty => cnv.FixedTypeToString(ty));

        if (specConstrs.IsEmpty && constrs.IsEmpty) ""
        else $"<lb/>  <keyword>where</keyword> $(t.Name): ..$(specConstrs + constrs)";
      }
      def whereClouses = if (inferred) [] else tyConstrainedParams.Map(typeParameterConstraintsClause);

      $<#$name$methodTyParams($argsStrs) : $retTyStr..$(whereClouses; "")#>
    }

    MakeMethodHint(
      cnv      : Utils.Convert,
      inferred : bool,
      declTy   : TypeVar,
      method   : IMethod,
      sign     : list[TypeVar] * TypeVar,
      doc      : XmlDocInfo) : string
    {
      mutable counter = -1;
      def ext()
      {
        counter++;
        if (counter == 0 && method.IsExtension) "<keyword>this</keyword> "
        else null
      }
      def mkName(p : TParameter) : string
      {
        def name = p.Name;
        match (if (doc == null) null else doc.Params.Find((k, _) => k == name))
        {
          | Some((_, txt)) => $"$(ext())<hint value='$name'>$txt</hint>"
          | _ => ext() + name
        }
      }
      def tyShort = cnv.TypeVarToString(declTy);
      def txt     = MakeFuncHint(cnv, inferred, method.Header, mkName, sign, doc);
      def mods    = MakeAccessModifiers(method);

      mods + tyShort + "." + txt
    }

    public static MakeAccessModifiers(ti : IMember) : string
    {
      def mods =
        match (ti)
        {
          | ti is TypeInfo when ti.IsInterface => ti.Attributes & ~NemerleModifiers.Abstract
          | _ => ti.Attributes
        };
      def mods = mods.ToString().ToLower().Replace(",", "");
      $"<keyword>$mods</keyword> "
    }

    public MakeTextHintForTExprStaticMethodRef(
      expr    : TExpr,
      ti      : TypeInfo,
      tyArgs1 : list[TypeVar],
      method  : IMethod,
      tyArgs2 : list[TypeVar]
    ) : string * Func[string, string]
    {
      def doc = GetDoc(method);
      def cnv = SubHintForType();
      //FIXME: Для функции makeMethodInfo не создается фолдинг-регион!
      // def makeMethodInfo(cnv : Utils.Convert, inferred : bool, declTy : FixedType.Class, method : IMethod, (argsTypes, retType) : list[TypeVar] * TypeVar) : string { null }
      def methodType() : string
      {
        MakeMethodHint(cnv, false, ti.GetMemType(), method,
          method.GetMemType().FunReturnTypeAndParms(method), doc)
      }
      def inferredType() : string
      {
        MakeMethodHint(cnv, true, FixedType.Class(ti, tyArgs1), method,
          expr.ty.FixedValue.FunReturnTypeAndParms(method), doc);
      }


      def makeTyParamsInfo()
      {
        def makeTyParamsToTyArgsMap()
        {
          def tyMap = MakeTyParamsToTyArgsMap(ti.Typarms, tyArgs1, Hashtable());
          MakeTyParamsToTyArgsMap(method.Header.TypeParameters, tyArgs2, tyMap);
        }

        def tyParams = ti.Typarms + method.Header.TypeParameters;
        def tyMap    = makeTyParamsToTyArgsMap();
        def f = p => $"<pname>$p</pname> <ptype>is $(cnv.TypeVarToString(tyMap[p.ToString()]))</ptype>";
        $<#<params>..$(tyParams; ", "; f)</params>#>
      }
      def tyParamsInfo = makeTyParamsInfo();

      def methodInfo = if (tyArgs1.IsEmpty && tyArgs2.IsEmpty) "The <b>static method</b> call:\n" + methodType()
                       else "The generic <b>static method</b> call. Source method type is:\n"
                       + methodType() + "\n\nInferred type:\n" + inferredType() + "\n\nType parameters: "
                       + tyParamsInfo;
      def res = methodInfo + GetDocText(doc);
      (res, cnv.GetDelayedHintHendler())
    }

    public MakeTextHintForTExprMethodRef(
      expr       : TExpr,
      obj        : TExpr,
      method     : IMethod,
      typeArgs   : list [TypeVar],
      _notvirtual : bool
    ) : string * Func[string, string]
    {
      def cnv = SubHintForType();
      def doc = GetDoc(method);

      def (_ti, tyArgs1) =
        match(obj.Type.Hint)
        {
          | Some(FixedType.Class(ti, arg)) => (ti, arg)
          | Some(FixedType.Array(ty, _)) => (null, [ty])
          | _ => (null, [])
        };

      _ = typeArgs;

      def methodType() : string
      {
        //MakeMethodHint(cnv, false, ti.GetMemType(), method,
        //  method.GetMemType().FunReturnTypeAndParms(method));
        MakeMethodHint(cnv, false, method.DeclaringType.GetMemType(), method,
          method.GetMemType().FunReturnTypeAndParms(method), doc)
      }
      def inferredType() : string
      {
        MakeMethodHint(cnv, true, obj.Type, method, expr.ty.FixedValue.FunReturnTypeAndParms(method), doc)
      }

      def res = (if (tyArgs1.IsEmpty && typeArgs.IsEmpty) "The <b>instance method</b> call:\n" + methodType()
                 else "The generic <b>instance method</b> call. Source method type is:\n"
                 + methodType() + "\n\nInferred type:\n" + inferredType()
                 //+ "\n\nType parameters: " + tyParamsInfo
                 )
                 + GetDocText(doc);

      (res, cnv.GetDelayedHintHendler())
    }

    IsGeneric(ty : TypeVar) : bool
    {
      match (ty.Hint)
      {
        | Some(FixedType.Class(_, _ :: _)) => true
        | _ => false
      }
    }

    //private static GetDocText(mtype : FixedType, location : Location) : string
    //{
    //  def info = XmlDocReader.GetInfo(mtype.TypeInfo, location);

    //  if (info != null) "\n" + info.GetText() else ""
    //}

    private static GetDocText(member : IMember) : string
    {
      def info = XmlDocReader.GetInfo(member, member.Location);

      if (info != null) $"<lb/><b><hint value='Documentation'>$(info.GetText())</hint></b>"
      else ""
    }

    //private static GetDocText(member : IMember, location : Location) : string
    //{
    //  def info = XmlDocReader.GetInfo(member, location);

    //  if (info != null) $"<lb/><b><hint value='Documetnation'>$(info.GetText())</hint></b>"
    //  else ""
    //}

    private static GetDoc(member : IMember) : XmlDocInfo
    {
      XmlDocReader.GetInfo(member, member.Location)
    }

    private static GetDocText(info : XmlDocInfo) : string
    {
      if (info != null) $"<lb/><b><hint value='Documentation'>$(info.GetText())</hint></b>"
      else ""
    }
  }
}
