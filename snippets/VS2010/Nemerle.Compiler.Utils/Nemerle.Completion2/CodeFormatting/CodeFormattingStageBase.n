using System;
using System.Diagnostics;
using Nemerle;
using Nemerle.Compiler;
using Nemerle.Compiler.Utils;

using SCG = System.Collections.Generic;

namespace Nemerle.Completion2.CodeFormatting
{
  
  public class CodeFormattingStageBase : IFormattingStage
  {
    protected class MatchingBracketFinder
    {
      private this(){}

      mutable level = 0;
      mutable counterpartMatcher : Token -> bool;
      mutable originalTokenMatcher : Token -> bool;
      

      static GetCounterpartMatcher(token : Token) : Token -> bool
      {
        | Token.BeginBrace => fun(t) {t is Token.EndBrace};
        | Token.BeginQuote => fun(t) {t is Token.EndQuote};
        | Token.BeginRound => fun(t) {t is Token.EndRound};
        | Token.BeginSquare => fun(t) {t is Token.EndSquare};
      
        | Token.EndBrace => fun(t) {t is Token.BeginBrace};
        | Token.EndQuote => fun(t) {t is Token.BeginQuote};
        | Token.EndRound => fun(t) {t is Token.BeginRound};
        | Token.EndSquare => fun(t) {t is Token.BeginSquare};
        | _ => null;
      }
      
      public static GetCounterpartFinderFor(token : Token) : Token -> bool
      {
        def finder = MatchingBracketFinder();
        finder.counterpartMatcher = GetCounterpartMatcher(token);
        
        finder.originalTokenMatcher = fun(t) {t.GetType().Equals(token.GetType());};
        
        if(finder.counterpartMatcher == null)
          throw InvalidOperationException($"$token is not paired token type.");
        else
          finder.IsDesirableToken
      }        
      
      IsDesirableToken(t : Token) : bool
      {
        if(counterpartMatcher(t))
        { 
          if(level == 0)
            true
          else
          {
            level--; 
            false;
          }
        }
        else if(originalTokenMatcher(t))
             {  
               level++;
               false;
             }
             else
               false;
      }
    }

    #region Helper methods
    protected GetFirstCloseBraceBeforeLocation(loc : Location) : Token
    {
      GetFirstCloseBraceBeforeLocation(loc.EndLine, loc.EndColumn)
    }

    protected GetFirstCloseBraceBeforeLocation(line : int, col : int) : Token
    {
      _tokenFinder.FindPrevIf(line, col, _ is Token.EndBrace);
    }
    
    protected GetPrevPairedBrace(brace : Token) : Token
    {
      def matchFinder = MatchingBracketFinder.GetCounterpartFinderFor(brace);
      _tokenFinder.FindPrevIf(brace.Location.Line, brace.Location.EndColumn, matchFinder);
    }
    
    protected GetFirstBeginBraceAfterLocation(loc : Location) : Token
    {
      GetFirstBeginBraceAfterLocation(loc.EndLine, loc.EndColumn);
    }
    protected GetFirstBeginBraceAfterLocation(line : int, col : int) : Token
    {
      _tokenFinder.FindNextIf(line, col, tok => tok is Token.BeginBrace);
    }
    protected GetNextPairedBrace(brace : Token) : Token
    {
      def matchFinder = MatchingBracketFinder.GetCounterpartFinderFor(brace);
      _tokenFinder.FindNextIf(brace.Location.Line, brace.Location.EndColumn, matchFinder);
    }
    #endregion

    public this(engine : IIdeEngine, source : IIdeSource)
    {
      this.Engine = engine :> Engine;      
      _source = source;
      _fileIndex=source.FileIndex;
    }
    
    protected _fileIndex : int;
    internal Engine : Engine
    {
      get; private set;
    }
    
    mutable _region : Location = Location.Default;
    protected RegionToFormat : Location
    {
      get{ _region }
      private set { _region = value; }
    }

    protected _source : IIdeSource;

    protected mutable rootNamespaceNode : Decl.Namespace = null;
    protected _tokenFinder : TokenStreamHandler = TokenStreamHandler();
    
    private results : SCG.List[FormatterResult] = SCG.List();
    
    protected AddResult(result : FormatterResult) : void
    {
      // Ensure no conflicts
      foreach(existingResult in results)
        when(result.IntersectsWith(existingResult))
          throw FormatterException($"Change $result conflicts with existing change $existingResult");

      results.Add(result);
    }
    protected GetResults() : SCG.List[FormatterResult]
    {
      results;
    }

    ParseFile(code : string) : Decl.Namespace
    {    
      def unit= Engine.ParseCompileUnit(code,_source.CurrentVersion,_source.FileIndex);
      unit.TopNamespace
    }
    
    protected Prepare() : void
    {
      results.Clear();                 
      
      // This is PExpr form of document      
      
      def src = _source.GetText();
      rootNamespaceNode = ParseFile(src);
      //engine.cProject.CompileUnits.GetTopNamespace(_fileIndex);
      
      
      def lexer = NonEatingLexer(Engine, src, Location(_source.FileIndex, 1, 1));
      _tokenFinder.Initialize(lexer.ReadAllTokens());
    }

    public virtual FormatDocument() : SCG.List[FormatterResult] { SCG.List() }
    public virtual FormatRegion(loc : Location) : SCG.List[FormatterResult]
    {
      RegionToFormat = loc;
      SCG.List();
    }
  
  }
}
