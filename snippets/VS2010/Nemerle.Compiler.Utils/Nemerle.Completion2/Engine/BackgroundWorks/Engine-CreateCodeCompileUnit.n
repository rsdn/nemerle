using System;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Imperative;
using Nemerle.Utility;
using Nemerle.Compiler.Utils;
using Nemerle.Compiler.Utils.Async;
using Nemerle.Surround;

namespace Nemerle.Completion2
{
	internal partial class Engine
	{
    public BeginCreateCodeCompileUnit(source : IIdeSource) : CreateCodeCompileUnitAsyncRequest
    {
      unless (_optionsHasBeenRead)
        _ = BeginReloadProject();

      def request = CreateCodeCompileUnitAsyncRequest(this, source, CreateCodeCompileUnit);
      AsyncWorker.AddWork(request);
      request
    }

    public CreateCodeCompileUnit(source : IIdeSource) : CreateCodeCompileUnitAsyncRequest
    {
      def request = BeginCreateCodeCompileUnit(source);
      _ = request.AsyncWaitHandle.WaitOne();
      when (request.Stop)
        assert(false);
        
      request
    }

    /// Run by AsyncWorker thread!
    /// Parse CompileUnit. Set CompileUnit to source. Update information about outline regions. 
    private CreateCodeCompileUnit(request : AsyncRequest) : void
    {
      AsyncWorker.CheckCurrentThreadIsTheAsyncWorker();
      
      surroundwith (currentAsyncRequest)
      try
      {

        when (request.Stop)
          return;
        
        if (IsBuildTypesTreeInProgress)
          AsyncWorker.AddWork(request);
        else
        {
          def project = this.Project;

          if (project == null)
          {
            _ = BeginBuildTypesTree();
            AsyncWorker.AddWork(request);
          }
          else
          {
            def req = request :> CreateCodeCompileUnitAsyncRequest;
			if (IsNeedBuildTypesTree && !project.CompileUnits.IsFileInProject(req.Source.FileIndex))
			{
              _ = BeginBuildTypesTree();
              AsyncWorker.AddWork(request);
			}
			else
			{
              try
              {
                def codeDomParser = FormCodeDomParser();
                
                req.CodeCompileUnit = codeDomParser.CreateCodeCompileUnit(project, req.Source.FileIndex);
                req.FilesIndices    = codeDomParser.FilesIndices;
			    
                req.MarkAsCompleted();
              }
              finally { request.MarkAsCompleted(); }
			}

          }
        }

        //Debug.WriteLine($"UpdateCompileUnit 6 $(timer.Elapsed)"); timer.Reset(); timer.Start();
      }
      catch
      { | e is CompilationAbortedException =>
          def msg = $"The parse CompileUnit operation aborted at: $(e.Message)";
          throw CompilationAbortedException(msg, e);
      }
    }
  } // end class Engine
} // end of Nemerle.Completion2 namespace
