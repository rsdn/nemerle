using Nemerle.Compiler;
using Nemerle.Compiler.Typedtree;
using Nemerle.Utility;
using Nemerle.Assertions;
using System;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Text;
using SR = System.Reflection;

namespace Nemerle.Completion2
{
  // Description of SourceGenerator
  public class SourceGenerator
  {
    [Accessor] 
    protected mutable _location : Location;

    protected mutable _fileIndex   : int;
    protected mutable _line        : int;
    protected mutable _column      : int;
    protected mutable _indentSize  : int;
    protected mutable _applyIndent : bool;
    protected mutable _ns          : NamespaceTree.Node;
    protected         _writer      : TextWriter;
    protected         _target      : SR.MemberInfo;

    public this(fileIndex : int, writer : TextWriter, target : SR.MemberInfo)
    {
      _fileIndex = fileIndex;
      _line      = 1;
      _column    = 1;
      _location  = Location.Default;
      _target    = target;
      _writer    = writer;
      _ns        = null;
    }
    
    IsNeedMakeLocation(other : SR.MemberInfo) : bool
    {
      _target.Equals(other)
    }

    public virtual WriteEventDeclaration(value : IEvent) : void
    {
      when (value == null)
        throw ArgumentNullException("value");

      WriteDocumentation(value);
      WriteAttributes(value);

      Write("event");
      Write(" ");
      WriteName(value);
      Write(" : ");
      WriteType(value.GetMemType());
      Write(";");
    }

    public virtual WriteFieldDeclaration(value : IField) : void
    {
      when (value == null)
        throw ArgumentNullException("value");

      WriteDocumentation(value);
      WriteAttributes(value);

      WriteName(value);
      Write(" : ");
      WriteType(value.GetMemType());
      Write(";");
    }

    public virtual WriteConstructorDeclaration(value : IMethod) : void
    {
      when (value == null)
        throw ArgumentNullException("value");

      WriteDocumentation(value);

      WriteName(value);
      Write("(");

      def (from, _) = GetSignature(value);

      WriteParameterDeclarations(value, from);

      Write(");");
    }

    #region Method
    
    public virtual GetSignature([NotNull] value : IMethod) : list[TypeVar] * TypeVar
    {
      (value.GetParameters().Map(p => p.ty), value.ReturnType)
    }

    public virtual WriteMethodDeclaration([NotNull] value : IMethod) : void
    {
      WriteDocumentation(value);
      WriteAttributes(value);

      WriteName(value);

      Write("(");
      when (value.IsExtension)
      {
        Write("this");
        Write(" ");
      }
      
      def (from, to) = GetSignature(value);

      WriteParameterDeclarations(value, from);

      Write(")");

      Write(" : ");
      WriteType(to);
      
      WriteMethodBody(value);
    }
    
    public virtual WriteParameterDeclarations([NotNull] value : IMethod, paramsTypes : list[TypeVar]) : void
    {
      if (value.IsVarArgs)
      {
        def parms : list[TParameter * TypeVar] = value.GetParameters().Zip(paramsTypes);
        def (till_last, last) = parms.DivideLast();

        WriteList(till_last, WriteParameterDeclaration);
        Write(", params ");
        WriteParameterDeclaration(last);
      }
      else
        WriteList(value.GetParameters().Zip(paramsTypes), WriteParameterDeclaration);
    }
    
    public virtual WriteMethodBody([NotNull] _value : IMethod) : void
    {
      Write(";");
    }

    #endregion
    
    #region Property
    
    public virtual GetPropertyType([NotNull] value : IProperty) : TypeVar
    {
      value.GetMemType()
    }

    public virtual WritePropertyDeclaration(value : IProperty) : void
    {
      when (value == null)
        throw ArgumentNullException("value");

      WriteDocumentation(value);

      WriteAttributes(value);

      WriteName(value);
      
      def propType = GetPropertyType(value);
      mutable returnType = propType;
      
      when (value.IsIndexer)
      {
        def accessor = value.GetGetter() ?? value.GetSetter();
        def fixedPropType = propType.Fix();
        def (parms, ret) = fixedPropType.FunReturnTypeAndParms().UnSome();
        returnType = ret;
        Write("[");
        WriteParameterDeclarations(accessor, parms);
        Write("]");
      }
      
      Write(" : ");
      WriteType(returnType);

      WritePropertyBoby(value);
    }
    
    public virtual WritePropertyBoby(value : IProperty) : void
    {
      def getMethod = value.GetGetter();
      def setMethod = value.GetSetter();

      Write(" {");
      
      unless (getMethod == null)
        WritePropertyGetter(value, getMethod);
      unless (setMethod == null)
        WritePropertySetter(value, setMethod);
        
      Write(" }");
    }

    public virtual WritePropertyGetter(_property : IProperty, _value : IMethod) : void
    {
      Write(" get;");
    }

    public virtual WritePropertySetter(_property : IProperty, _value : IMethod) : void
    {
      Write(" set;");
    }

    #endregion
    
    public virtual WriteTypeDeclaration(value : TypeInfo) : void
    {
      when (value == null)
        throw ArgumentNullException("value");

      def nsName =
        if (_ns == null)
        {
          _ns = value.NamespaceNode.Parent;
          _ns.GetDisplayName();
        }
        else
          null;

      unless (string.IsNullOrEmpty(nsName))
      {
        WriteDocumentation(_ns, value.Location);
        Write("namespace ");
        Write(nsName);
        BeginBlock();
      }

      WriteDocumentation(value);
      match (value.GetTydecl())
      {
      | VariantOption => Write("|");
      | _             =>
        Write(AccessibilityString(value.Accessibility));
        Write(" ");
        Write(TypeDeclarationString(value));
      }
      Write(" ");

      when (_target != null && IsNeedMakeLocation(value.SystemType))
        _location = Location(_fileIndex, _line, _column);
      WriteType(value);
      when (_target != null && IsNeedMakeLocation(value.SystemType))
        _location = Location(_fileIndex, _location.Line, _location.Column, _line, _column);
      Write(" ");

      match (value.GetTydecl())
      {
      | Alias(to)                   => WriteAliasDeclaration(to.TypeInfo);
      | Enum                        => WriteEnumDeclaration(value);
      | Class when value.IsDelegate => WriteDelegateDeclaration(value);
      | _                           => WriteClassDeclaration(value);
      }

      WriteLine();

      unless (string.IsNullOrEmpty(nsName))
        EndBlock();
    }

    public virtual WriteName(value : IMember) : void
    {
      def name = if (value.MemberKind == MemberKinds.Constructor) "this" else value.Name;

      when (_target != null && IsNeedMakeLocation(value.GetHandle()))
        _location = Location(_fileIndex, _line, _column);

      Write(name.Replace('.', '\'').Replace('<', '_').Replace('>', '_'));

      when (_target != null && IsNeedMakeLocation(value.GetHandle()))
        _location = Location(_fileIndex, _location.Line, _location.Column, _line, _column);
    }

    public virtual WriteType(ty : TypeInfo) : void
    {
      Write(ty.ToString())
    }

    public virtual WriteType(ty : TypeVar) : void
    {
      Write(ty.ToString())
    }

    public virtual WriteGenericConstraintList(_ : list[StaticTypeVar]) : void
    {
    }

    public virtual WriteDocumentation(member : IMember) : void
    {
      WriteDocumentation(XmlDocReader.GetContent(member, member.Location));
    }

    public virtual WriteDocumentation(ns : NamespaceTree.Node, location : Location) : void
    {
      WriteDocumentation(XmlDocReader.GetContent(ns, location));
    }

    public virtual WriteDocumentation(content : string) : void
    {
      unless (content == null)
      {
        using (r = StringReader(content))
        {
          while (r.Peek() > 0)
          {
            Write("/// ");
            Write(r.ReadLine().TrimStart(null));
            WriteLine();
          }
        }
      }
    }

    public virtual WriteAttributes(member : IMember) : void
    {
      unless (member.DeclaringType.IsInterface)
        Write(GetAttributeString(member.Attributes));
    }

    public virtual WriteParameterDeclaration(value : TParameter, ty : TypeVar) : void
    {
      Write(value.Name);
      Write(" : ");
      WriteType(ty);
    }

    #region Types

    public virtual WriteAliasDeclaration(to : TypeInfo) : void
    {
      Write("= ");
      WriteType(to);
    }

    public virtual WriteClassDeclaration(value : TypeInfo) : void
    {
      def superTypes =
        match (value.GetDirectSuperTypes().Map(cls => cls.tycon))
        {
        | x :: xs when value.InternalType.Object_tc.Equals(x) => xs;
        | x :: xs when value.InternalType.ValueType_tc.Equals(x) => xs;
        | xs                                                 => xs;
        };

      WriteList(superTypes, ": ", null, WriteType);

      BeginBlock();

      def writeRegion['a](name : string, members : list['a], writer : 'a -> void)
      {
        unless (members.IsEmpty)
        {
          Write("#region");
          Write(" ");
          Write(name);
          WriteLine();
          WriteLine();

          members.Iter(m =>
            {
              writer(m);
              WriteLine();
            });

          WriteLine();
          Write("#endregion");
          Write(" ");
          Write(name);
          WriteLine();
          WriteLine();
        }
      }

      mutable constructors = [];
      mutable events       = [];
      mutable fields       = [];
      mutable methods      = [];
      mutable properties   = [];
      mutable nestedTypes  = [];

      def members = value.GetMembers(
        BindingFlags.Static %| BindingFlags.Instance  %|
        BindingFlags.Public %| BindingFlags.NonPublic %|
        BindingFlags.DeclaredOnly);

      members.Iter(m =>
        match (m.MemberKind)
        {
        | MemberKinds.Field       => fields       ::= m :> IField;
        | MemberKinds.Constructor => constructors ::= m :> IMethod;
        | MemberKinds.Method      => methods      ::= m :> IMethod;
        | MemberKinds.Property    => properties   ::= m :> IProperty;
        | MemberKinds.NestedType  => nestedTypes  ::= m :> TypeInfo;
        | MemberKinds.Event       => events       ::= m :> IEvent;
        | mk                      => throw NotSupportedException($"Unsupported member kind '$mk'");
        });

      events    .Iter(e => methods = methods.Remove(e.GetAdder()).Remove(e.GetRemover()));
      properties.Iter(p => methods = methods.Remove(p.GetGetter()).Remove(p.GetSetter()));

      def ns = _ns;
      _ns = value.NamespaceNode;
      nestedTypes.Iter(WriteTypeDeclaration);
      _ns = ns;

      writeRegion("Constructors", constructors, WriteConstructorDeclaration);
      writeRegion("Events",       events,       WriteEventDeclaration);
      writeRegion("Fields",       fields,       WriteFieldDeclaration);
      writeRegion("Methods",      methods,      WriteMethodDeclaration);
      writeRegion("Properties",   properties,   WritePropertyDeclaration);

      EndBlock();
    }

    public virtual WriteDelegateDeclaration(ty : TypeInfo) : void
    {
      match (ty.LookupMember("Invoke"))
      {
      | (m is IMethod) :: _ =>
        Write("(");
        m.GetParameters().Iter(p =>
          {
            Write(p.Name);
            Write(" : ");
            WriteType(p.ty);
          });
        Write(") : ");
        WriteType(m.ReturnType);
      | _                   => ();
      }

      WriteGenericConstraintList(ty.Typarms);
      Write(";");
    }

    public virtual WriteEnumDeclaration(value : TypeInfo) : void
    {
      unless (value.InternalType.Int32.tycon.Equals(value.UnderlyingType))
      {
        Write(" : ");
        WriteType(value.UnderlyingType);
      }

      BeginBlock();

      def fmt      = if (value.HasAttribute(value.InternalType.FlagsAttribute_tc)) "X" else "D";
      def sysType  = value.SystemType;
      def values   = Enum.GetValues(sysType);

      for (mutable i = 0; i < values.Length; ++i)
      {
        def v = values.GetValue(i);

        Write("| ");
        Write(Enum.GetName(sysType, v));
        Write(" = ");

        when ("X" == fmt)
          Write("0x");
        Write((v :> IFormattable).ToString(fmt, CultureInfo.InvariantCulture));
        WriteLine();
      }

      EndBlock();
    }

    #endregion
    
    #region Implementation

    protected Write(value : string) : void
    {
      when (_applyIndent)
      {
        repeat (_indentSize)
          _writer.Write('\t');
        _column += _indentSize;
        _applyIndent = false;
      }

      _writer.Write(value);
      _column += value.Length;
    }
    
    protected WriteLine(value : string) : void
    {
      Write(value);
      WriteLine();
    }

    protected WriteLine() : void
    {
      Write(Environment.NewLine);
      _applyIndent = true;
      _line++;
      _column = 1;
    }

    protected BeginBlock() : void
    {
      WriteLine();
      Write("{");
      ++ _indentSize;
      WriteLine();
    }

    protected EndBlock() : void
    {
      -- _indentSize;
      Write("}");
      WriteLine();
    }

    protected WriteList['a](lst : list['a], writer : 'a -> void) : void
    {
      WriteList(lst, null, null, ", ", writer)
    }

    protected WriteList['a](lst : list['a], start : string, stop : string, writer : 'a -> void) : void
    {
      WriteList(lst, start, stop, ", ", writer)
    }

    protected WriteList['a](lst : list['a], start : string, stop : string, delemiter : string, writer : 'a -> void) : void
    {
      def loop(_)
      {
      | x :: Nil  =>
        writer(x);
      | x :: tail =>
        writer(x);
        Write(delemiter);
        loop(tail)
      | []        => ()
      }

      unless (lst.IsEmpty)
      {
        unless (string.IsNullOrEmpty(start))
          Write(start);
        loop(lst);
        unless (string.IsNullOrEmpty(stop))
          Write(stop);
      }
    }

    #endregion

    #region static helpers 

    // TODO: Move these methods to Utils

    public static AccessibilityString(value : Accessibility) : string
    {
    | Public               => "public";
    | Internal             => "internal";
    | ProtectedOrInternal  => "internal protected";
    | ProtectedAndInternal => "protected /* and */ internal";
    | Protected            => "protected";
    | Private              => "private";
    | _                    => $"/* ??? ($value) ??? */";
    }

    public static TypeDeclarationString(value : TypeInfo) : string
    {
      match (value.GetTydecl())
      {
      | Alias         => "type";
      | Enum          => "enum";
      | Interface     => "interface";
      | Variant       => "variant";
      | VariantOption => "variant option";
      | Class         => 
        if (value.IsDelegate)
           "delegate";
        else if (value.IsValueType)
           "struct";
        else if (value.IsModule)
           "module";
        else if (value.IsAbstract)
           "abstract class";
        else if (value.IsSealed)
           "sealed class";
        else
           "class";
      | _             => $"/* ??? ($value) ??? */";
      }
    }

    public static GetAttributeString(attrs : NemerleAttributes) : string
    {
      def text = StringBuilder(64);

      ignore(text.Append(
        match (attrs & NemerleAttributes.AccessModifiers)
        {
        | NemerleAttributes.Public                                  => "public";
        | NemerleAttributes.Private                                 => "private";
        | NemerleAttributes.Protected                               => "protected";
        | NemerleAttributes.Internal                                => "internal";
        | NemerleAttributes.Protected %| NemerleAttributes.Internal => "protected internal";
        | attr                                                      => $"/* ??? ($attr) ??? */"
        }));
      ignore(text.Append(" "));

      when (attrs %&& NemerleAttributes.Static)    ignore(text.Append("static "));
      when (attrs %&& NemerleAttributes.Mutable)   ignore(text.Append("mutable "));
      when (attrs %&& NemerleAttributes.Volatile)  ignore(text.Append("volatile "));
      when (attrs %&& NemerleAttributes.Extern)    ignore(text.Append("extern "));
      when (attrs %&& NemerleAttributes.New)       ignore(text.Append("new "));

      if (attrs %&& NemerleAttributes.Virtual)
      {
        if (attrs %&& NemerleAttributes.Abstract)
          ignore(text.Append("abstract "));
        else if (attrs %&& NemerleAttributes.Override)
          ignore(text.Append("override "));
        else unless (attrs %&& NemerleAttributes.Sealed)
         ignore(text.Append("virtual "));
      }
      else when (attrs %&& NemerleAttributes.Sealed)
        ignore(text.Append("sealed "));

      text.ToString();
    }
    
    #endregion 
  }
}