using System;
using System.IO.File;
using System.IO.Path;
using System.Diagnostics;
using System.Reflection;
using System.Reflection.Emit;

using Nemerle.Assertions;
using Nemerle.Compiler;
using Nemerle.Utility;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Compiler.Utils;

using Typed = Nemerle.Compiler.Typedtree;
using SR = System.Reflection;
using SCG = System.Collections.Generic;

namespace Nemerle.Completion2.Factories
{
  public class IntelliSenseModeLibraryReferenceManager : LibraryReferenceManager
  {
    static this()
    {
      // Add preloaded assemblies.
      foreach (assembly in AppDomain.CurrentDomain.GetAssemblies())
      {
        try
        {
          // Skip nameless and satellite assemblies
          def assemblyName = assembly.GetName();

          if (string.IsNullOrEmpty(assembly.Location))
            () // skip phantoms
          else unless (assemblyName == null || assemblyName.Name.EndsWith(".resources") || assembly is AssemblyBuilder)
          {
            def path = assembly.Location;
            def fileTime = GetLastWriteTimeUtc(path);
            assemblyByPath[path] = (assembly, fileTime);
            assemblyByStrongName[assembly.FullName] = assembly;
          }

        }
        catch { e => Trace.WriteLine(e.Message); }
      }

      AppDomain.CurrentDomain.AssemblyResolve += OnAssemblyResolve;
    }

    /// Name / error
    public static UnresolvedAssemblies : Hashtable [string, string] = Hashtable ();

    static OnAssemblyResolve(_sender : object, args : ResolveEventArgs) : Assembly
    {
      mutable assembly;
      if (assemblyByStrongName.TryGetValue(args.Name, out assembly))
        assembly
      else
      {
        if (UnresolvedAssemblies.Contains(args.Name))
          null
        else
        {
          UnresolvedAssemblies.Add(args.Name, null);
          try
          {
            mutable requestingAssemblyPath;
            when (args.RequestingAssembly != null && pathByAssembly.TryGetValue(args.RequestingAssembly, out requestingAssemblyPath))
            {
              def assemblyName = SR.AssemblyName(args.Name);
              def dllPath = Combine(GetDirectoryName(requestingAssemblyPath), assemblyName.Name + ".dll");
              def exePath = ChangeExtension(dllPath, ".exe");
              if (Exists(dllPath))
                assembly = NonBlockingAssemblyLoadFrom(dllPath)
              else when (Exists(exePath))
                assembly = NonBlockingAssemblyLoadFrom(exePath)
            }
            when (null != assembly)
            {
              def path = Uri(assembly.CodeBase).LocalPath;
              def fileTime = GetLastWriteTimeUtc(path);
              assemblyByPath[path] = (assembly, fileTime);
              assemblyByStrongName[assembly.FullName] = assembly;
              _ = UnresolvedAssemblies.Remove(args.Name);
            }
            assembly
          }
          catch
          {
            | e =>
              Trace.WriteLine(e.Message);
              UnresolvedAssemblies[args.Name] = e.Message;
              null
          }
        }
      }
    }

    /*
    Общая идеология.

    Так как мы не можем выгружать библиотеки, и так как мы обязаны иметь список
    бибилотек для всех загруженных проетков, то мы должны создать глобальный список
    сборок (точнее мап).

    Этот мап должен хранить пути к сборкам и соответствующие ему сборку и дату обновления файла.
    При загрузке будем проверять есть ли файл с таким путем в списке. Если есть, то проверяем
    не изменился ли файл (сравнивая время обновления файла). Если изменился, то перезагружаем
    сборку. Так же загружаем сборку если сборки нет в списке. 
    В любом случае при перезагрузке сборки обновляем информацию о ней в списке.
    
    */

    static assemblyByPath       : Hashtable [string, SR.Assembly * DateTime] = Hashtable(StringComparer.CurrentCultureIgnoreCase);
    static assemblyByStrongName : Hashtable [string, SR.Assembly] = Hashtable();
    static pathByAssembly       : Hashtable [SR.Assembly, string] = Hashtable();

    public static UpdateAssemblies(paths : array[string]) : void
    {
      UnresolvedAssemblies.Clear();

      foreach (path in paths)
      {
        when (Exists(path))
        {
          def path = path.ToLowerInvariant();
          def fileTime = GetLastWriteTimeUtc(path);
          def ((_, time), ok) = assemblyByPath.TryGetValue(path);
          when (!ok || time != fileTime)
          {
            def assembly = AssemblyLoadFromImpl(path);
            assemblyByPath[path] = (assembly, fileTime);
            assemblyByStrongName[assembly.FullName] = assembly;
          }
        }
      }
    }

    public this (man : ManagerClass, lib_paths : list [string]) { base (man, lib_paths); }
    /// static cache to workaround problems with multiple loading of the 
    /// same assemblies from GAC
    
    //public static CleanCache() : void
    //{
    //  assemblyByPath.Clear();
    //  assemblyByStrongName.Clear();
    //}
    
    protected override assemblyLoad(name : string) : SR.Assembly
    {
      mutable value;

      if (assemblyByPath.TryGetValue(name, out value))
      {
        def (assembly, _) = value;
        assembly;
      }
      else
      {
        mutable assembly;
        if (assemblyByStrongName.TryGetValue(name, out assembly))
          assembly;
        else
        {
          // This assembly was not cached. Usually it's Nemerle.Macros.dll
          //
          assembly = SR.Assembly.Load(name);
          def path     = Uri(assembly.CodeBase).LocalPath;
          def fileTime = GetLastWriteTimeUtc(path);
          assemblyByPath[path] = (assembly, fileTime);
          assemblyByStrongName[assembly.FullName] = assembly;
          assembly;
        }
      }
    }

    protected override assemblyLoad(_name : SR.AssemblyName) : SR.Assembly
    {
      Trace.Assert(false);
      //def fullName = name.FullName;
      //mutable assembly;

      //unless (assemblyByStrongName.TryGetValue (fullName, out assembly))
      //{
      //  assembly = base.assemblyLoad(name);
      //  assemblyByStrongName.Add(fullName, assembly);
      //}

      //assembly
      null
    }

    public override getAssemblyLocation (assembly : SR.Assembly) : string
    {
      def (path, ok) = pathByAssembly.TryGetValue(assembly);
      if (ok) path else base.getAssemblyLocation(assembly);
    }

    static DomainAssemblyLoadFrom(path : string) : SR.Assembly
    {
      def ((assembly, _), ok) = assemblyByPath.TryGetValue(path);
      if (ok) assembly
      else
      {
        if (Exists(path))
        {
          def asmName = AssemblyName.GetAssemblyName(path);
          def (assembly, ok) = assemblyByStrongName.TryGetValue(asmName.FullName);
          if (ok)
          {
            //assemblyByPath[path] = (assembly, fileTime);
            assembly
          }
          else
          {
            def fileTime = GetLastWriteTimeUtc(path);
            def assembly = AssemblyLoadFromImpl(path);
            assemblyByPath[path] = (assembly, fileTime);
            assemblyByStrongName[assembly.FullName] = assembly;
            assembly
          }
        }
        else null
      }
    }

    protected override assemblyLoadFrom(path : string) : SR.Assembly
    {
      DomainAssemblyLoadFrom(path)
      //def (assembly, _) = assemblyByPath[path];
      //assembly
    }

    static _dotnetPath : string = System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeDirectory().ToLowerInvariant();

    static AssemblyLoadFromImpl(path : string) : Assembly
    {
      def fullPath = GetFullPath(GetDirectoryName(path)).ToLowerInvariant();
      def fileName = GetFileName(path).ToLowerInvariant();

      // prevent loading assemblies from x64 GAC
      if (fullPath.Contains("\\assembly\\gac_64\\"))
      {
        def gac32Path = path.ToLowerInvariant().Replace("\\assembly\\gac_64\\", "\\assembly\\gac_32\\");
        SR.Assembly.LoadFrom(gac32Path)
      }
      else if (fullPath.StartsWith(_dotnetPath) || fileName == "nemerle.dll"
        || fileName == "nemerle.compiler.dll" || fileName == "nemerle.macros.dll" 
        || fileName == "nemerle.msbuild.tasks.dll"
      )
        SR.Assembly.LoadFrom(path)
      else
      {
        try { NonBlockingAssemblyLoadFrom(path) }
        catch
        {
            // processing FileLoadException with following HResults: 
            // e.HResult == 0x80131402 : Unverifiable code failed policy check.
            // e.HResult == 0x80131019 : Attempt to load an unverifiable executable with fixups (IAT with more than 2 sections or a TLS section.)
            // Such execeptions usually occurs when trying to load mixed assemblies.
          | e is System.IO.FileLoadException when e.HResult == 0x80131402 || e.HResult == 0x80131019 => 
                SR.Assembly.ReflectionOnlyLoad(ReadAllBytes(path))
          | _ => throw;
        }
      }
    }

    static NonBlockingAssemblyLoadFrom(path : string) : Assembly
    {
      //SR.Assembly.LoadFrom(path)
      def asmBytes = ReadAllBytes(path);
      def symPath = ChangeExtension(path, ".pdb");
      def symBytes = if (Exists(symPath)) ReadAllBytes(symPath) else null;
      def asm = Assembly.Load(asmBytes, symBytes);

      // Note from Assembly.CodeBase documentation:
      //
      // If the assembly was loaded as a byte array, using an overload of the
      // Load method that takes an array of bytes, this property returns
      // the location of the caller of the method, not the location of the loaded assembly.
      //
      pathByAssembly[asm] = path;
      asm
    }
  }
}
