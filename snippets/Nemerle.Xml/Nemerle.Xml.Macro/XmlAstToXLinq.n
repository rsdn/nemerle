using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using TT = Nemerle.Compiler.Typedtree;
using TExpr = Nemerle.Compiler.Typedtree.TExpr;

using System.Collections.Generic;
using System.Xml.Linq;
using L = System.Xml.Linq;
using X = Nemerle.Xml;
using SCG = System.Collections.Generic;
using NColl = Nemerle.Collections.NCollectionsExtensions;

namespace Nemerle.Xml
{
  class XmlAstToXLinq
  {
    _typer  : Typer;
    _parser : XmlQuotParser;
    
    public this(typer : Typer, parser : XmlQuotParser)
    {
      _typer  = typer;
      _parser = parser;
    }
          
    public ToLocation(node : PegLocated) : Location
    {
      _parser.ToLocation(node)
    }
    
    Parse(loc : Location, code : string) : PExpr
    {
      _typer.Manager.MacroColors.PushUseSiteColor();
      def pExpr = try     { MainParser.ParseExpr(_typer.Env, code, loc, false); }
                  finally { _typer.Manager.MacroColors.PopColor(); };
      pExpr
    }

    SplicablePExprName(value : X.Splicable, nsVars : Set[string], defaultns : string = "") : PExpr
    {
      Util.locate(ToLocation(value),
      match (value)
      {
        | Splicable.PrefiedName(ns, name) => DefineXmlnsImpl.MakeXNameFieldRef(_typer, ToLocation(value), ns, name, nsVars)
        | Splicable.Value(value)          =>
            if(defaultns.IsEmpty())    
                <[ L.XName.Get($(value : string)) ]>
            else            
                <[ L.XNamespace.Get($(defaultns : string)).GetName($(value : string))]>
        | Splicable.Expr(expr)            => Parse(ToLocation(value), expr)
        | Splicable.ListExpr              => Message.FatalError(<#The "..$" not supportend in name context.#>);
        | Splicable.ControlExpr           => assert(false)
      })
    }
    
    SplicablePExprStr(value : X.Splicable) : PExpr
    {
      Util.locate(ToLocation(value),
      match (value)
      {
        | Splicable.PrefiedName     => Message.FatalError(<#A value can't be a prefixed name.#>);
        | Splicable.Value(value)    => <[ $(value : string) ]>
        | Splicable.Expr(expr)      => Parse(ToLocation(value), expr)          
        | Splicable.ListExpr(_expr) => Message.FatalError(<#The "..$" not supportend in name context.#>);
        | Splicable.ControlExpr     => assert(false)
      })
    }
    public Transform(xmlAst : XmlAst, nsVars : Set[string], defaultns : string) : PExpr
    {
      Util.locate(ToLocation(xmlAst), TransformImpl(xmlAst, nsVars, defaultns))
    }
    
    public TransformImpl(xmlAst : XmlAst, nsVars : Set[string], defaultns : string) : PExpr
    {
      match (xmlAst)
      {
        | Attr(name, Splicable.Expr as value)             => 
          def name1   = SplicablePExprName(name, nsVars, defaultns);
          def value1  = SplicablePExprStr(value);
          
          <[  { // If value of expression is null we return null which cause ignorin the attribute
                def value = $value1 : object;
                if (value == null) null else L.XAttribute($name1, value) 
              } ]>

        | Attr(name, value)             => 
          def name1   = SplicablePExprName(name, nsVars, defaultns);
          def value1  = SplicablePExprStr(value);
          
          <[ L.XAttribute($name1, $value1) ]>
          
        | Text(Splicable.Value(value))  => <[ L.XText($(value : string)) ]>
        | Text(_)  => assert(false);
        | Tag(name, XmlAst.AttrSplice(expr, SpliceType.Foreach) as c :: content) =>
          def tag     = XmlAst.Tag(xmlAst.StartPos, xmlAst.EndPos, name, content);
          def tagExpr = TransformImpl(tag, nsVars, defaultns);
          def header = Parse(ToLocation(c), expr);
          <[  { 
                def lst = SCG.List();
                
                foreach ($header)
                {
                  def tag = $tagExpr;
                  
                  when (tag != null)
                    lst.Add(tag);
                }
                  
                lst.ToArray()
              } ]>
          
        | Tag(name, XmlAst.AttrSplice(expr, SpliceType.When)   as c :: content) with isWhen = true
        | Tag(name, XmlAst.AttrSplice(expr, SpliceType.Unless) as c :: content) with isWhen = false
          => 
          def tag     = XmlAst.Tag(xmlAst.StartPos, xmlAst.EndPos, name, content);
          def tagExpr = TransformImpl(tag, nsVars, defaultns);
          def cond1 = Parse(ToLocation(c), expr);
          def cond2 = if (isWhen) cond1 else <[ ! $cond1 ]>;
          <[ if ($cond2) $tagExpr else null ]>
        
        | Tag(name, content)            => 
          mutable nsVars2 = nsVars;
          mutable defns2=defaultns;
          def (nsAttrDef, cont, xmlNsVars) = content.Fold(([], [], []), (x, (nsAttrDef, cont, nsVarsDef)) => 
            match (x)
            {
              // The prefix "xml" is bound to "http://www.w3.org/XML/1998/namespace" by default.
              // The value can be declared explicitly, but cannot be changed.
              | XmlAst.Attr(Splicable.PrefiedName("xmlns", "xml"), Splicable.Value("http://www.w3.org/XML/1998/namespace")) =>
                def xmlNs = <[ L.XAttribute(L.XNamespace.Xmlns.GetName("xml"), "http://www.w3.org/XML/1998/namespace") ]>;
                (xmlNs :: nsAttrDef, cont, nsVarsDef)
              | XmlAst.Attr(Splicable.PrefiedName("xmlns", "xml"), _) =>
                Message.Error(<#The prefix "xml" is reserved.#>);
                (nsAttrDef, cont, nsVarsDef)
              | XmlAst.Attr(Splicable.PrefiedName("xmlns", name) as attr, Splicable.Value(val)) => 
                nsVars2 = nsVars2.Add(name);
                Util.locate(ToLocation(attr), 
                  {
                    def nsVar = <[ def $(name : usesite) : L.XNamespace = L.XNamespace.Get($(val : string)); ]>;
                    def x = <[ L.XAttribute(L.XNamespace.Xmlns.GetName($(name : string)), $(val : string)) ]>;
                    (x :: nsAttrDef, cont, nsVar :: nsVarsDef)
                  });
              | XmlAst.Attr(Splicable.PrefiedName("xmlns", _), _) => 
                Message.Error(<#An embedded expression cannot be used here.#>);
                (nsAttrDef, cont, nsVarsDef)
                
              | XmlAst.AttrSplice(_expr, SpliceType.When) => (nsAttrDef, x :: cont, nsVarsDef)
              | XmlAst.Attr(Splicable.Value("xmlns")as attr, Splicable.Value(val)) =>
                  defns2=val;
                  Util.locate(ToLocation(attr), 
                  {
                    (nsAttrDef, cont, nsVarsDef)
                  });
              | _ => (nsAttrDef, x :: cont, nsVarsDef)
            });

          def nameExpr1 = SplicablePExprName(name, nsVars2, defns2);
          def nameExpr2 = Util.locate(ToLocation(name), <[ $nameExpr1 : L.XName ]>);
          def cont = nsAttrDef + cont.RevMap(x => <[ $(Transform(x, nsVars2, defns2)) : object ]>);
          def expr = xmlNsVars + [<[ L.XElement($nameExpr2, array[..$cont]); ]>];
          <[ { ..$expr } ]>
          
        | TagSplice(expr, false)        => 
          def expr = Parse(ToLocation(xmlAst), expr);
          // TODO: Отладить проверку типа у сплайса утрибута "Тип не должен быть XAttribute".
          // На сегодня _typer.TypeExpr(expr) не видит переменных объявленных внутри $foreach,
          // так как они парсятся динамически.
          
          //def tExpr = _typer.TypeExpr(expr);
          //_ = _typer.DelayMacro(_ => 
          //  match (tExpr.Type.Hint)
          //  {
          //    | Some(ty) => 
          //      //def tExpr = tExpr;
          //      Macros.DefineCTX(_typer);
          //      def attrTy = <[ ttype: System.Xml.Linq.XAttribute ]>;
                
          //      when (ty.TryRequire(attrTy))
          //        Message.Error(expr.Location, $"The content of XML elementd can't have $attrTy type");

          //      Some(expr)
                
          //    | None => None()
          //  });
            
          expr
          
        | TagSplice(expr, true)             => <[ NColl.NToArray($(Parse(ToLocation(xmlAst), expr))) ]>
        | AttrSplice(expr, SpliceType.Expr) => <[ $(Parse(ToLocation(xmlAst), expr)) : L.XAttribute ]>
        | AttrSplice(expr, SpliceType.List) => <[ NColl.NToArray.[L.XAttribute]($(Parse(ToLocation(xmlAst), expr)) : IEnumerable[L.XAttribute]) ]> 
        | AttrSplice(_, SpliceType.Foreach)
        | AttrSplice(_, SpliceType.When)
        | AttrSplice(_, SpliceType.Unless)  => 
          Message.FatalError("Control instraction must place before attributes.");
      }
    }
  }
}
