using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;
using TExpr = Nemerle.Compiler.Typedtree.TExpr;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Xml
{
  [MacroUsage(MacroPhase.BeforeInheritance, MacroTargets.Assembly)]
  public macro DefineXmlns(params args : array[expr])
  {
    DefineXmlnsImpl.DoTransform(Macros.ImplicitCTX(), args)
  }
  
  module DefineXmlnsImpl
  {
    internal XLinqXmlNamespasecId = "XLinqXmlNamespasec defined";
    
    internal MakeXNameFieldRef(typer : Typer, loc : Location, nsPrefix : string, name : string, nsVars : Set[string]) : PExpr
    {
      Macros.DefineCTX(typer);
      
      // The special prefix "xml" is handled ahead of others.
      // The namespace is usually omitted to declare in XML documents.
      if (nsPrefix == "xml")
      {
        <[ System.Xml.Linq.XNamespace.Xml.GetName($(name : string)); ]>
      }
      else if (nsVars.Contains(nsPrefix))
      {
        <[ $(nsPrefix : usesite).GetName($(name : string)); ]>
      }
      else
      {
        def nsTy        = <[ ttype: System.Xml.Linq.XNamespace ]>;
        def nsField     = GetNamespacePrefixField(typer, loc, nsPrefix);
        def nsFieldRef  = PExpr.Typed(loc, TExpr.StaticRef(loc, nsTy, nsTy, nsField, []));
          
        <[ $nsFieldRef.GetName($(name : string)); ]>
      }
    }

    internal GetNamespacePrefixField(typer : Typer, loc : Location, fieldName : string) : IField
    {
      def tb = GetXLinqXmlNamespasecType(typer);
      def member = tb.LookupMember(fieldName, false);
      Macros.DefineCTX(typer);
      def ty = <[ ttype: System.Xml.Linq.XNamespace ]>;
      
      match (member)
      {
        | [field is IField] when field.GetMemType().Equals(ty) => field // fiels already exists!
        | [] | null => Message.FatalError(loc, $"XML namespace '$fieldName' is not defined neither by xmlts attribute nor by DefineXmlns macro.")
        | _ :: _ => // We have not field member! Report the error...
          assert(false);
      }          
    }
    
    internal GetXLinqXmlNamespasecType(typer : Typer) : TypeBuilder
    {
      match (typer.Env.LookupType(["XLinqXmlNamespasec"], null, 0))
      {
        | Some(tb is TypeBuilder) => tb
        | _ => typer.Env.Define(<[ decl: public module XLinqXmlNamespasec { } ]>, false)
      }
    }
    
    internal DoTransform(typer : Typer, args : array[PExpr]) : void
    {
      Macros.DefineCTX(typer);
      def tb = GetXLinqXmlNamespasecType(typer);

      foreach (arg in args)
      {
        | <[ $nsPrefix = $(ns : string) ]> => 
          def fieldName = nsPrefix.ToString();
          tb.Define(<[ decl: public $(fieldName : usesite) : System.Xml.Linq.XNamespace = System.Xml.Linq.XNamespace.Get($(ns : string));]>);
          
        | _ => Message.Hint(arg.Location, <#Incorrect xml namespace format. Use NamespacePrefix="namespace" formar.#>);
      }
    }
  }
}
