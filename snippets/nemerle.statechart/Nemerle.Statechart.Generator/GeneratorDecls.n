using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;

namespace Nemerle.Statechart
{
  
  using PathNode;
  
  /// <summary>
  /// Description of GeneratorDecls.
  /// </summary>
  public partial class StaticGenerator
  {
    analyser : FsmAnalyser;
    ty : TypeBuilder;
    mutable tran_events : list[string];
    mutable events : list[string];
    mutable events_call : Map[string, PExpr];
    mutable actions : list[GenAction];    
    mutable decls : Map[string, ClassMember];
    mutable action_for : Map[string, string]; // source_name * dest_name
    mutable event_for : Map[string, string];
    mutable macro_actions : Map[string, list[PExpr]];
    mutable constructor : option[string];
    mutable guard_for : Map[string, string]; // сторожевые условия объявленные в классе
    mutable history_paths : Map[string, list[GenAction]];
    mutable history_transitions : Map[string, list[GenAction]];
    mutable history_def_transitions : Map[string, list[GenAction]];

    ChartName : string;
    
    mutable init_exprs : list[PExpr] = [];
    mutable gen_members : list[ClassMember] = [];
    mutable compile_list : list[TypeBuilder] = [];
    mutable state_builders : Map[string, TypeBuilder] = Map();
    mutable method_decls : list[string];
    
    FinalizeGen() : void
    {
      Define(gen_members);
      compile_list.Iter(_.Compile());
    }
    
    public WithSources : bool {get;set;}

    public this(analyser : FsmAnalyser, ty : TypeBuilder)
    {
      this.analyser = analyser;
      this.ty = ty;
      ChartName = ty.Name;
      WithSources = true;
    }

    public Generate() : void
    {
      Init();
      DefineEvents();
      DefineActions();
      DefineGuards();
      DefineTransitionActions();
      DefineDoActivity();
      DefineInit();
      DefineHistory();
      DefinePseudo();
      FinalizeGen();
    }

  }
}
