using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of GeneratePseudo.
  /// </summary>
  public partial class StaticGenerator
  {
    get_junction_body(node : DecisionNode, ctx : GenCtx, ret : bool = false) : PExpr
    {
      
      def get_body(p, ret = true)
      {
          
        match (p)
        {
          | DecisionNode.Else(body = Target as b, level = 0) => get_body(b, ret)
          | Else(body = b) => get_body(b, ret)
          | Condition(condition = c, body = b, else_node = els) =>
              def check = GetGuards([c], ctx);
              <[
                if ($check) $(get_body(b, false)) else $(get_body(els, false))
              ]>
          
          | Target(destination = d, Path = p) =>
         
              def body = GetBody(p, d, d.PostConditions, ctx);
              if (ret)
              <[
                def st = $body;
                res(st)
              ]> else body
          | _ => <[ null ]>
        }
      }
      
      def body = get_body(node, ret);
      <[
        {
          res:
            {
              $body
            }
        }
      ]>
          
    }

    get_choice_body(p : DecisionNode, ctx : GenCtx, ret : bool = true) : PExpr
    {
      def get_body(p, ret = true)
      {
        match (p)
        {
          | DecisionNode.Else(body = Target() as b, level = 0, Path = p) => 
              def body = get_body(b, false);
              def act = GetActions(p, true);
                   <[
                     $act;
                     $body;
                   ]>
          | Else(body = b, Path = p) => 
              def body = get_body(b);
              def act = GetActions(p, true);
                   <[
                     $act;
                     $body
                   ]>
          | Action(condition = Some(g), body = b, Path = p) => 
              def body = get_body(b);
              def check = GetGuards([g], ctx);
              def act = GetActions(p, true);
                  <[ 
                     when ($check) 
                     {
                       $act;
                       $body
                     }
                  ]>

          | Action(condition = None(), body = b, Path = p) => 
              def body = get_body(b);
              def act = GetActions(p, true);
                  <[
                    $act;
                    $body
                  ]>
            
          | Condition(condition = c, body = b, else_node = els, Path = np) =>
              def check = GetGuards([c], ctx);
              def path = GetActions(np, true);
              def body = get_body(b);
              def els = get_body(els);
                  <[ 
                     when ($check)
                     {
                       $path;
                       $body;
                     }
                     $els
                  ]>
          
          | Target(destination = d, Path = p) =>
         
              def dest = GetDestination(d, ctx);
              def jact = GetActions(p, true);
              if (ret)
                  <[
                    $jact;
                    res($dest)
                  ]> else
                  <[
                    $jact;
                    $dest
                  ]>
        }
      }
      def body = get_body(p, ret);
                <[
                {
                  res:
                    {
                      $body
                    }
                }
                ]>
              }
                
    DefineHistoryPaths(builder : TypeBuilder, st : FsmState) : void
    {
      def create_body(hist)
      {
        def body = <[ fsm.$(hist.Name : usesite)(); ]>;
        if (st is FsmState.ConcurrentRegion && st.HaveFinal)
        {
          def tran = hist.History.Default.Value;
        <[
          if (IsFinal) fsm.$(tran.Name : usesite)() else $body;
        ]>
        } else body
      }

      if (st.IsTopState) // if it is top state
      {
        def names = analyser.HistoryStates |> get_history_run_name(_, _.state.Name); // get name of history states
        def decls = names |> <[decl: public virtual $(_ : usesite)(_ : $(ChartName : usesite)) : State {null} ]>; // create transition methods for history states
        Define(builder, decls);
      } else
      {
        if (st.Lived && st is FsmState.Final) 
        {
          def create_body(hist)
          {
            def tran = hist.Default.Value;
            <[ fsm.$(tran.Name : usesite)() ]>
          }
          
          def hist  =  st.ParticipateInHistory;
          def name  =  hist |> (_, get_history_run_name(_, _.state.Name)); // create transition names
          def decl  =  name.MapToList((x, y) => <[decl: public override $(y : usesite)(fsm : $(ChartName : usesite)) : State {$(create_body(x))}]>);
          Define(builder, decl)
        } else
          when (st.HaveHistoryPaths && (st.Lived || st is FsmState.ConcurrentRegion)) // if state has history paths or it is lived
          {
            def paths  =  st.HistoryPaths;
            def name  =  paths |> (get_history_run_name(_[2].History, _), _[2]); // create transition names
            def decl  =  name.MapToList((n, y) => <[decl: public override $(n : usesite)(fsm : $(ChartName : usesite)) : State {$(create_body(y))}]>);
            Define(builder, decl)
          }
      }
      
    }
    
    DefineHistory() : void
    {
      def get_run_hist_body(hist)
      {
        | StateTransition.Default(From = from, history = StateHistory where (Name = name) as hist) as t =>
            def hname = get_history_run_name(hist, from.Name);
                <[ 
                if ($(name : usesite) != null) // определяем выбор в случае если есть переход по умолчанию в случ.если нет истории
                    $(name : usesite).$(hname : usesite)(this); else $(DefineTransBody([t], GenCtx.Normal()));
                ]> 
      }
      
      def def_history(h)
      {
        def create_history(hist)
        {
          def hist_field =  <[decl: mutable $(hist.Name : usesite) : State;]>;
          def clear = <[decl: $($"$(hist)Clear" : usesite)() : void 
            {
                $(hist.Name : usesite) = null
            }]>;    
          def default = hist.Default.Map(x => [<[decl: $($"$(x.history)Run" : usesite)() : State {$(get_run_hist_body(x));} ]>]).WithDefault([]);  
          [hist_field, clear] + default
        }
        
        def save_body(hist)
        {
          def idx = hist.Index;
          match (hist.state)
          {
            | FsmState where (PartOfRegion = Some(r), PartOfSubRegion = Some(sr)) => def name = GetExecStateName(r);
                def reg = <[ $name.$($"cur_state$(sr.index)" : usesite); ]>;
                       <[ $(hist.Name : usesite) = if ($reg != null) $reg.GetCopy($idx) else null ]>
            | _ => <[ $(hist.Name : usesite) = cur_state.GetCopy($idx);]>
          }
        }
        
        def head = h.Head;
        def hist_func =  head.SimpleName;
        
        def body = h.Map(save_body);
            // save history function
        def save =  <[decl: $($"$(hist_func)Save" : usesite)() : void 
            {
              ..$body
            }]>;
            
        def defs = h |>< create_history(_);
        def defs = save :: defs;
        // default transitions
        Define(defs); // add definition to state class
      }
      
      def def_hist(st)
      {
        when (st.history.HasValue)
        {
          def hist = st.UsedHistory;
          when (!hist.IsEmpty()) def_history(hist);
        }
      }
      
      analyser.LivedNestedStates.Iter(def_hist)
    }
    
  }
}
