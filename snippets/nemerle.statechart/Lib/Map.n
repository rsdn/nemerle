using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using StringTemplate;
using Nemerle.Macros;

namespace Nemerle.Statechart
{
  macro @|>(first, second)
  syntax (first, "|>", second)
  {
    
    def (n, expr) =  MapHelper.MapCreate(second);
    def pars = MapHelper.GetParams(n);
    <[ $first.Map($pars => $expr) ]>
  }
  
  macro @|><(first, second)
  syntax (first, "|><", second)
  {
    
    def (n, expr) =  MapHelper.MapCreate(second);
    def pars = MapHelper.GetParams(n);
    <[ $first.Map($pars => $expr).Flatten() ]>
  }
 
  module MapHelper
  {

    
    public GetParam(num : int) : PExpr
    {
      | 2 => <[ y ]>
      | 3 => <[ z ]>
      | 4 => <[ a ]>
      | 5 => <[ b ]>
      | 1
      | _ => <[ x ]>
    }

    public GetParams(num : int) : PExpr
    {
      | 2 => <[ (x, y) ]>
      | 3 => <[ (x, y, z) ]>
      | 1 
      | _ => <[ x ]>
    }
    
      
    public MapCreate(second : PExpr) : int * PExpr
    { 
    
      
      def is_first(ctx)
      {
        | TraverseContext.Top
        | Expr(<[ $_.$_ ]>, Top) 
        | Expr(<[ (..$_) ]>, Top) => true
        | _ => false
      }
      
      def loop(ctx, after, expr)
      {
        def wild_find()
        {
          when (ctx.Data :> int == 0) ctx.Data = 1;
        }
        
        if (after)
          match (expr)
          {
            | <[ $(_ : name) ]> when (is_first(ctx)) => wild_find();<[ x.$(expr.ToString() : usesite) ]>
            | <[ _ ]> => wild_find();<[ x ]>
            | Call(<[ Nemerle.IO.sprint ]>, [PExpr.Literal(Literal.String(str))]) =>
                when (str.Contains("_")) wild_find();
                def str = str.Replace("$_[2]", "$y");
                def str = str.Replace("$(_[2])", "$(y)");
                def str = str.Replace("$_[3]", "$z");
                def str = str.Replace("$(_[3])", "$(z)");
                def str = str.Replace("$_", "$x");
                def str = str.Replace("$(_)", "$(x)");
                <[ Nemerle.IO.sprint($str) ]>
            | _ => expr
          } else 
          match (expr)
          {
            | <[ $_.$_ ]>
            | <[ (..$_) ]> => ctx.Push();null
            | PExpr.Indexer(<[ _ ]>, [PExpr.Literal(Literal.Integer(val = val))]) with num = val :> int => ctx.Data = Math.Max(ctx.Data :> int, num);<[ $(GetParam(num)) ]>
            | _ => null
          }
      }
      
      def insert_wild(ctx, after, expr)
      {
        | (_, true, <[ $(_ : name) ]>) => ctx.Break();<[ x.$(expr.ToString() : usesite) ]>
        | (_, true, _) => expr
        | (_, false, _) => null
      }
      
      def ctx = TraverseContext.Top();
      ctx.Data = 0;
      def expr = Macros.TraverseExprWithContext(None(), second, ctx, loop);
      def n_params = ctx.Data :> int;
      if (n_params == 0) (1, Macros.TraverseExprWithContext(None(), expr, null, insert_wild)) else (n_params, expr)
    }

  }
  
}
