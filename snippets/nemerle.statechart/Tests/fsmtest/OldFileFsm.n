using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;
using Nemerle.Statechart;

namespace Nemerle.Statechart.Tests
{  
  
  [statechart(<#

  flags : auto_initial transition_completed_events;

  0 => Waiting;

  state FileWorking
  {
    NewFile => NeedSaving;
    OpenFile => NotNeedSaving;
    Exit => $0;

    state NotNeedSaving
    {
        $> / SaveDis;

        state Saved
        {
            $> / CaptionFileName LastFileCur SaveAsEna;
            Save => @;
            Change => Changed;
        }

        state Waiting
        {
            $> / SaveAllDis CaptionProgName;
        }
    }

    state NeedSaving
    {
        $> / SaveEna;
        Save => NotNeedSaving;

        state New
        {
            $> / CaptionFile LastFileEmpty SaveAsEna;
        }

        state Changed
        {
            $> / CaptionChanged;
        }
    }
  }
  #>
  )]
  public class OldFileFsmN
  {
    LastFileCur() : void
    {
      LastSaved = CurFile;
    }

    LastFileEmpty() : void
    {
      LastSaved = "";
    }

    [Constructor]
    Init() : void
    {
      OpenDialog = OpenFileDialog();
      SaveDialog = SaveFileDialog();
      CurWantToSave = "Want to save file?";
      CurOverwrite = "Want to overwrite file?";
    }

    ViewOpenDialog() : DialogResult
    {
      OpenDialog.ShowDialog();
    }

    ViewSaveAsDialog() : DialogResult
    {
      SaveDialog.ShowDialog();
    }

    ViewNewDialog() : bool
    {
      if (NewDialog!= null) NewDialog(); else true
    }
    
    ОткрытиеДиалога() : bool
    {
      def check_need_save()
      {
        if (IsNeedSave) DoSaving() else true
      }
      break :
      {
        when (!check_need_save()) break(false);
        def answ = ViewOpenDialog();
        when (answ != DialogResult.OK) break(false);
        CurFile = OpenDialog.FileName;
        when (OpenFileAction == null) break(true);
        OpenFileAction(CurFile);
      }
    }

    НовыйДиалог() : bool
    {
      def check_need_save()
      {
        if (IsNeedSave) DoSaving() else true
      }

      if (check_need_save()) ViewNewDialog(); else false
    }

    SaveCurrentFile() : bool
    {
      if (SaveFileAction!= null)
        SaveFileAction(CurFile) else true
    }

    ViewOverwrite() : DialogResult
    {
      MessageBox.Show(CurOverwrite, "Warning", MessageBoxButtons.YesNoCancel);
    }

    ViewWantToSave() : DialogResult
    {
      MessageBox.Show(CurWantToSave, "Warning", MessageBoxButtons.YesNoCancel);
    }

    SaveAsDialog() : bool
    {
      SaveDialog.FileName = CurFile;
      def res = ViewSaveAsDialog();
      if (res == DialogResult.OK)
      {
        CurFile = SaveDialog.FileName;
        SaveCurrentFile()
      }
      else false
    }

    DoSaveFile() : bool
    {
      if (IsNewFile)
      {
        SaveAsDialog();
      }
      else
      {
        match (ViewOverwrite())
        {
          | Yes => CurFile = LastSaved;SaveCurrentFile()
          | No => SaveAsDialog()
          | _ => false
        }
      }
    }

    DoSaving() : bool
    {
      if (IsNeedSave)
      {
        match (ViewWantToSave())
        {
          | Yes => DoSaveFile()
          | No => true
          | _ => false
        }
      } else true
    }

    public IsNewFile : bool
    {
      get
      {
        IsInState(State.New());
      }
    }

    public IsNeedSave : bool
    {
      get
      {
        IsInState(State.NeedSaving());
      }
    }

    public OpenDialog : OpenFileDialog {get;set;}
    public SaveDialog : SaveFileDialog {get;set;}
    public NewDialog : void -> bool {get;set;}

    public LastSaved : string {get;private set;}
    public CurFile : string {get;private set;}
    public OpenFileAction : string -> bool {get;set;}
    public SaveFileAction : string -> bool {get;set;}
    public CurWantToSave : string {get;set;}
    public CurOverwrite : string {get;set;}

    public Open() : void
    {
      when (ОткрытиеДиалога()) OpenFile()
    }

    public DoSave() : void
    {
      when (DoSaveFile()) Save()
    }

    public SaveAs() : void
    {
      when (SaveAsDialog()) Save()
    }

    public DoExit() : void
    {
        when (DoSaving()) Exit()
    }

    public New() : void
    {
        when (НовыйДиалог()) NewFile()
    }
  }
}
