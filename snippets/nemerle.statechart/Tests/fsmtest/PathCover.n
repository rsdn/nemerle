using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;


namespace Nemerle.Statechart.Tests
{
  /// <summary>
  /// Description of PathCover.
  /// </summary>
  [statechart(<#
  
  flags : auto_initial, transition_completed_event;
  
  state A
  {
      (H*) => D;
      
      (H) => F;
      $>;
      $<;

      merge m1 [mg1] / ma1 => F;
      g => H;
      //0 => H*;
      0  / init_actionA => D; //b
      //0 [test_guard1] / a => C;
      //0 [test_guard2] / b => C;
      
      l [test_guard1] /act1 => E; // b => E;
      l [test_guard2] /act2 => E;
      
      f => D; // cross
          _ [test_guard1] / a => D; //
          _ [test_guard2] / A => D; //
      
          a / D => F;
      state B
      {
        0 [test_guard1] /init_actionB => C;
        0 [guard1] => E;
          //0 /init_action => C;
          (H*) => E;
          $> / b_action_entry;
          $< / b_action_exit;
          
          [Concurrently, NoWait, NotLong] do / activity1 activity2;
          
          b => D; // cross
          
          d => D;
          f [test_guard1] / f_action =>@;
          k => A;
          c => E;

                z => {
                       jguard1 / A1 => {
                                          jguard2 / A2 A8 => {
                                                             jguard3 / A3 => A;
                                                             jguard4 / A4 => B;
                                                             else    / A5 => C1;
                                                           }
                                          jguard5 / A6 => C;
                                          else => (junc1);
                                       }
                       jguard6 / A7 => D;
                       else => G;
                     }
          
          junction junc2 { / A => A; }
          
          junction junc1 {
                  junc1_jguard1 / junc1_A1 => {
                                    junc1_jguard2 / junc1_A2 A8 => {
                                                        junc1_jguard3 / junc1_A3 => A;
                                                        junc1_jguard4 / junc1_A4 => B;
                                                        else    / junc1_A5 => C1;
                                                      }
                                    / junc1_A6 => C;
                                  }
                  junc1_jguard6 / junc1_A7 => D;
                  else => G;
                }

          choice choice1 {
                  choice1_guard1 / choice1_A1 => ${
                                    choice1_jguard2 / choice1_A2 A8 => ${
                                                        choice1_jguard3 / choice1_A3 => A;
                                                        choice1_jguard4 / choice1_A4 => B;
                                                        else    / choice1_A5 => C1;
                                                      }
                                    / choice1_A6 => C;
                                  }
                  choice1_jguard6 / choice1_A7 => D;
                  else => G;
                }
                
          state C
          {
              $>;
              //a [test_guard1] / A;
              a / B;
              //a [test_guard2] / A;
              
              $<;
              
              b [test_guard1] => E;
              //b [test_guard1] => D;
              m =>@;
              d => C72;
          }
          
          state E
          {
              $>;
              $<;
              i => D;
              j => A;
              o / final_action1 => $0;
              c => G; // transition to region
              d => C72;
              a => C4; // transition to sub region state
              b => C2 C4;
              e => C72 C4;
              h => G[0].H;
              g => C8[0].H;
              f => G[1].H;
              
              state F
              {
                $>;
                $<;
                i => $0;
              }
              
              state G
              {
                $>;
                $<;
                _ => D;
                m => A;
                (H*) => C5;
                
                state C1
                {
                  $>;
                  $<;

                  [NoWait] do / activityC1;
                  a => C4;
                  c => (j1);
                  
                  state C5
                  {
                    $>;
                    $<;
                    b => C4;
                    e => D;
                    d => A;
                    
                    state C6
                    {
                      $>;
                      $<;
                      e => E;
                      _ => (j2);
                    }
                  }
                }
                
                state C4
                {
                  $>;
                  $<;
                  
                  do / activityC4;
                  
                  b => $0;
                  c => Dummy;
                }
                
                [-----------]
                
                $>;
                $<;
                
                (H*) => C7;
                
                state C3
                {
                  $>;
                  $<;
                  
                  _ => (j2);
                  do / activityC3;
                  b => $0;
                  c [JGuard2] => (j1);
                  
                  state C7
                  {
                    $>;
                    $<;
                    state C71
                    {
                      $>;
                      $<;
                      
                      state C8
                      {
                        $>;
                        $<;
                        
                        o => B;
                        
                        state C82
                        {
                        }
                        
                        (H*) => C82;
                        
                        [-----------]
                        
                        state C81
                        {
                        }
                      }
                    }
                    
                    [-----------]

                    $>;
                    $<;
                    
                    state C72
                    {
                        $>;
                        $<;
                    }
                  }
                }

                state C2
                {
                  $>;
                  $<;
                  
                  do / activityC2;
                  c => C3;
                  b => $0;
                }
                
                [-----------]
                  $>;
                  $<;
                
                state C9
                {
                  $>;
                  $<;
                  c => (j1);
                  b => $0;
                }
              }
              
              join j1 => D;
              join j2 => B;
              
              state Dummy
              {
                $>;
                $<;
              }
          }
          
      }
            
      state D
      {
          $>;  
          $<;
          e => B;
          n => B.H;
          f => A.H*;
          b => A.H;
          
          
          
                (H*) => D2;
                
                state D1
                {
                $>;
                $<;
                
                a => D2;
                
                с => { 
                       junc_guard1 / A1 A2 => A;
                       junc_guard2 / A3 => B;
                       else / A4        => C;
                     }
                }

                
                
                state D2
                {
                $>;
                $<;
                
                c => {
                       jguard1 / A1 => {
                                          jguard2 / A2 A8 => {
                                                             jguard3 / A3 => A;
                                                             jguard4 / A4 => B;
                                                             else    / A5 => (junc1);
                                                             }
                                          jguard5 / A6 => C;
                                          else => (junc1);
                                       }
                       jguard6 / A7 => (m1);
                       else => G;
                     }

                 d => ${
                       cguard1 / A1 => ${
                                          cguard2 / A2 A8 => ${
                                                              cguard3 / A3 => (junc2);
                                                              cguard4 / A4 => B;
                                                              else    / A5 => C1;
                                                              }
                                          cguard5 / A6 => C;
                                          else => (choice1);
                                       }
                       cguard6 / A7 => D;
                       else => G;
                     }
                   }
                 y => (m1);  

      }
      
      
  }
  #>
  )]
  class PathCoverFsm
  {
    
    [GuardFor(junc_guard1)]
    [GuardFor(junc_guard2)]
    [GuardFor(jguard1)]
    [GuardFor(jguard2)]
    [GuardFor(jguard3)]
    [GuardFor(jguard4)]
    [GuardFor(jguard6)]
    test_guard1() : bool// {get;set;}
    {
      true
    }
      
    test_guard2 : bool// {get;set;}
    {
      get
      {
        true
      }
    }
      
    test_guard3 : bool// {get;set;}
    {
      get
      {
        true
      }
    }      
  }
}
