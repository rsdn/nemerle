using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;
using Nemerle.Statechart;

namespace Nemerle.Statechart.Tests
{  

  [statechart(<#

  flags : auto_initial transition_completed_events;

  state FileWorking
  {
    close => Exiting;
    
    state Files
    {
      (H*)
      NewFile => Processing;
      Open => Opening;
      
      state Waiting
      {
          $> / SaveAllDis CaptionProgName;
          $< / SaveAsEna;
      }

      state Opened
      {
        save_as => Saving.SaveAs;
    
        state Saved
        {
            $> / SaveDis CaptionFileName LastFileCur;
            Save => @;
            Change => Changed;
        }

        state NotSaved
        {
            $> / SaveEna;
            
            state New
            {
                $> / CaptionFile LastFileEmpty SaveAsEna;
                Save => Saving.SaveAs;
            }

            state Changed
            {
                $> / CaptionChanged;
                Save => Saving.Overwrite;
            }
        }
      }
    }

    state Processing
    {
      _ => Saved;
      Cancel => Files.H;
    
      state CreateNew
      {
        _ => NotSaved;
        
      statemachine dialogs : FileDialogs
      {
        _ => NewDialog;
      }
      
        state NewDialog
        {
          $> / ViewNewDialog;
          ok / LoadData => $0;
        }
      
      }

        new statemachine Saving : FileDialogs
        {
          
          0 => {
                 in_state(NotSaved) => WantSave;
                 else               => $0;
               }
    
          state WantSave
          {
            $> / ViewWantToSave;
            yes => {
                     in_state(New) => SaveAs;
                     else          => Overwrite;
                   }
            no => $0;
          }
    
          state SaveAs
          {
            $> / ViewSaveAsDialog;
            ok => (save_junc);
          }
    
          state Overwrite
          {
            $> / ViewOverwrite;
            no  => SaveAs;
            yes => (save_junc);
          }
    
          junction save_junc
          {
            / save => $0;
          }
        }
      
      state Opening
      {
        statemachine OpenSave : FileDialogs
        {
          _ => OpenDialog;
        }
      
        state OpenDialog
        {
          $> / ViewOpenDialog;
          ok / LoadData => $0;
        }
      
      }
    
      state Exiting
      {
        statemachine ExitSave : FileDialogs
        {
          _ => Exit;
        }

        state Exit
        {
          0 => X;
          $> / Exit;
        }
        
      }
    }
  }
  #>
  )]
  public class FileFsm
  {
    
    
    LastFileCur() : void
    {
      LastSaved = CurFile;
    }

    LastFileEmpty() : void
    {
      LastSaved = "";
    }

    [Constructor]
    Init() : void
    {
      OpenDialog = OpenFileDialog();
      SaveDialog = SaveFileDialog();
      CurWantToSave = "Want to save file?";
      CurOverwrite = "Want to overwrite file?";
    }

    ViewOpenDialog() : void
    {
      when (!DisableDialogs)
      {
        def res = OpenDialog.ShowDialog();
        process_res(res)
      }
    }

    ViewSaveAsDialog() : void
    {
      when (!DisableDialogs)
      {
        def res = SaveDialog.ShowDialog();
        process_res(res)
      }
    }

    ViewNewDialog() : void
    {
      when (NewDialog!= null) 
      {
        def res = NewDialog();
        process_res(if (res) DialogResult.OK else DialogResult.Cancel)
      }
    }
    
    process_res(res : DialogResult) : void
    {
        | DialogResult.Yes => yes()
        | Cancel => Cancel()
        | No => no()
        | OK => ok()
        | _ => ()
    }
    
    ViewOverwrite() : void
    {
      when (!DisableDialogs)
      {
      def res = MessageBox.Show(CurOverwrite, "Warning", MessageBoxButtons.YesNoCancel);
      process_res(res)
      }
    }

    ViewWantToSave() : void
    {
      when (!DisableDialogs)
      {
      def res = MessageBox.Show(CurWantToSave, "Warning", MessageBoxButtons.YesNoCancel);
      process_res(res)
      }
    }

    public IsNewFile : bool
    {
      get
      {
        IsInState(State.New());
      }
    }

    public DisableDialogs : bool {get;set;}

    public OpenDialog : OpenFileDialog {get;set;}
    public SaveDialog : SaveFileDialog {get;set;}
    public NewDialog : void -> bool {get;set;}

    public LastSaved : string {get;private set;}
    public CurFile : string {get;private set;}
    public OpenFileAction : string -> bool {get;set;}
    public SaveFileAction : string -> bool {get;set;}
    public CurWantToSave : string {get;set;}
    public CurOverwrite : string {get;set;}

  }
  
}
