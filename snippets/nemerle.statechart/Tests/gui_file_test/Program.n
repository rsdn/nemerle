using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;
using Nemerle.Statechart.Tests;

namespace fsm_test
{

  class Test
  {
    public Name : string {get;set;}
  }        
        
  class Test2
  {
    public Name : string {get;set;}
  }
          
  class FileFsmFormControl 
  {
    mutable form : FileFsmForm;
    mutable fsm : FileFsm;

    public this()
    {
      form = FileFsmForm();
      fsm = FileFsm();
      init()
    }

    public Form : FileFsmForm
    {
      get
      {
        form
      }
    }

    WaitingEntry() : void 
    {
      form.CaptionChange("program_name")
    }

    NewEntry() : void 
    {
      form.CaptionChange("program_name - [document]")
    }

    ChangedEntry() : void 
    {
      form.CaptionChange("program_name - [document]*")
    }

    SavedEntry() : void 
    {
      form.CaptionChange("program_name - [new document]")
    }

    Closing(_ : object, evt : FormClosingEventArgs) : void
    {
      fsm.close();
      when (!fsm.IsTerminated) evt.Cancel = true;
    }
    
    init() : void 
    {
      Form.NewHandler +=  (_, _)  => fsm.NewFile();
      Form.OpenHandler +=  (_, _)  => fsm.Open();
      Form.SaveHandler +=  (_, _)  => fsm.Save();
      Form.ChangeHandler +=  (_, _)  => fsm.Change();
      Form.SaveAsHandler +=  (_, _)  => fsm.save_as();
      Form.FormClosing += Closing;
      
      fsm.SaveEnaAction += form.SaveEna;
      fsm.SaveDisAction += form.SaveDis;
      fsm.SaveAsEnaAction += form.SaveAsEna;
      fsm.SaveAllDisAction += form.SaveAllDis;
      fsm.SavedEntry += SavedEntry;
      fsm.WaitingEntry+= WaitingEntry;
      fsm.NewEntry += NewEntry;
      fsm.ChangedEntry += ChangedEntry;
      fsm.SaveDialog = Form.SaveDlg;
      fsm.OpenDialog = Form.OpenDlg;
      fsm.TransitionCompleted += fsm_TransitionCompleted;
      fsm.NewDialog = () => MessageBox.Show("New file", "New file", MessageBoxButtons.OKCancel) == DialogResult.OK;
      fsm.OpenFileAction = file => MessageBox.Show($"Opening file $file", "Opening file", MessageBoxButtons.OKCancel) == DialogResult.OK;
      fsm.SaveFileAction = file => MessageBox.Show($"File $file saved", "Saving file", MessageBoxButtons.OKCancel) == DialogResult.OK;
      
      fsm.Initiate();
      UpdateState()
    }

    UpdateState() : void 
    {
      Form.SetState(fsm.ToString(), fsm.LastSaved)
    }

    fsm_TransitionCompleted(_ : object, _ : EventArgs) : void 
    {
      UpdateState()
    }
  }

  module Program 
  {
    public mutable form : FileFsmFormControl;

    /// <summary>
    /// The main entry point for the application.
    /// </summary
    [STAThread()]
    Main() : void 
    {
      Application.EnableVisualStyles();
      Application.SetCompatibleTextRenderingDefault(false);
      form = FileFsmFormControl();
      Application.Run(form.Form)
    }
  }


}