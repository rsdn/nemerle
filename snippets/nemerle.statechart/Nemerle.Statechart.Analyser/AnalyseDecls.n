using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nemerle.Statechart;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  using ListUtils;
   
  public partial class FsmAnalyser
  {

    [Accessor] statemap : StateMap;
    [Accessor] mutable lived_states : list[FsmState];
    [Accessor] mutable lived_nested_states : list[FsmState];
    [Accessor] mutable states : list[FsmState];
    [Accessor] mutable events : list[string];
    [Accessor] mutable transitions : Map[string, StateTransition];
    [Accessor] mutable internal_transitions : Map[string, StateTransition];
    mutable events_map : Map[string, StateEvent]; // event * for internal transition
    mutable trans_paths : list[TransitionPaths];
    [Accessor] mutable transition_nodes : Map[string, PathNode];
    [Accessor] mutable int_trans_nodes : Map[string, PathNode];
    [Accessor] mutable actions : list[string];
    [Accessor] mutable action_node : PathNode;
    [Accessor] mutable history_states : list[StateHistory];
    [Accessor] mutable history_paths : list[HistoryPath];
    [Accessor] mutable work_transitions : Map[string, StateTransition];
    [Accessor] mutable work_transition_nodes : Map[string, PathNode];
    [Accessor] mutable initial_transition_nodes : Map[string, PathNode];
    [Accessor] mutable initial_transitions : Map[string, StateTransition];
    [Accessor] mutable do_activities : list[StateAction.Do];
    [Accessor] mutable regions : list[FsmState.ConcurrentRegion];
    [Accessor] mutable pseudo_states : list[PseudoStateNode] = [];
    [Accessor] mutable junctions : list[PseudoStateNode.Junction] = [];
    [Accessor] mutable choices : list[PseudoStateNode.Choice] = [];
    [Accessor] mutable merges : list[PseudoStateNode.Merge] = [];
    [Accessor] mutable forks : list[PseudoStateNode.Fork] = [];
    [Accessor] traverser : TransitionTraverser = TransitionTraverser();
    [Accessor] mutable concurrent_states : list[FsmState];
    [Accessor] mutable special_transitions : list[StateTransition];
    [Accessor] mutable paths_from_out : list[StateTransition];
    
    [Accessor]    
    fsm : StateNode.StateMachine;

    Init() : void
    {
      Errors = [];
      Warnings = [];
    }

    public NextJunctionNum() : int
    {
       unnamed_junction_num++; 
       unnamed_junction_num
    }

    public NextChoiceNum() : int
    {
       unnamed_choice_num++; 
       unnamed_choice_num
    }
    
    InitStatechart() : void
    {
      topState = FsmState.State(fsm.state, null, this, false); // create statemachine from top state
      TopState.Name = FsmState.TopStateName;
    }

    CheckParseErrors() : void
    { 
      def check_err(err, res)
      {
        def r = match (err)
                {
                  | StateNode.Error(StateNode.DoActivity as node) => ParseError.DuplicateActivity(node)
                  | StateNode.Error(node)                         => ParseError.UnknownElement(node)
                }
        r :: res
      }
      
      def flags = fsm.flags.errors |> ParseError.UnknownMachineFlag(_);
      def err = fsm.GetErrors().FoldLeft([], check_err).Rev();
      def errs = err + flags;
      errs.Iter(AddParseError)
    }
    
    public AddParseError(err : ParseError) : void
    {
      def str = "Parse Error:" + match (err)
                  {
                    | DuplicateActivity(act) => $<#Duplicate do activity $act, state may have only one do activity node#>
                    | UnknownElement(node) => $<#Unknown parse node $node #>
                    | UnknownMachineFlag(f) => $<#Unknown state machine flag "$f" #>
                  }
      Errors ::= str;
    }
    
    public BreakIfError() : void
    {
      when (!Errors.IsEmpty()) throw FsmErrorException()
    }
    
    public AddError(err : FsmError) : void
    {
      def str = match (err)
                {
                  | StateNotFound(s)  => $<#State "$s" Not Found#>
                  | SubMachineStateNotFound(m, s) => $<#Sub machine "$m" does not contain referenced sub state "$s"#>
                  | UnknownState(s, name, tran)  => $<#Transition "$tran" in "$s" has unknown target state "$name"#>
                  | DuplicateTransition(tran)  => $<#Duplicate transitions "$tran"#>;
                  | DuplicateHistory(st, hist)  => $<#Duplicate history of type "$(hist.Type)" in "$st"#>
                  | RegionMustContainInitial(reg, tran) => $<#Transition "$tran" requires region "$reg" to contain initial transition in each of it sub regions#>
                  | SubRegionsMustContainInitial(reg, tran) => $<#Transition "$tran" requires sub regions "$reg" to contain initial transitions#>
                  | UnknownTerminateTransition(tran) => $<#Unknown terminate transition target of "$tran", there is several terminate pseudo states, specify full name#>                  
                  | ForkMustGoToRegion(f) => $<#Fork "$f" must go to concurrent sub regions#>
                  | ForkMustGoToSeparateRegion(f) => $<#Fork "$f" must go to different concurrent sub regions#>
                  | UnknownNode(tran) => $<#Unknown pseudostate node used in target of "$tran" transition #>
                  | JoinTransitionMustHaveSameTrigger(j, tran) => $<#Transitions "$tran" to join "$j" must have same event trigger#>
                  | JoinTransitionMustLeaveRegion(j, tran) => $<#Transitions "$tran" to join "$j" must leave sub state of same orthogonal region#>
                  | TransitionCrossOrthogonalBoundaryOfSameRegion(tran) => $<#Transition "$tran" is cross orthogonal boundary of same region, this is not allowed#>
                  | DefaultTransitionMustGoToState(tran, hist) => $<#Default history transition "$tran" of history "$hist" must go to state#>
                  | JunctionElseMustBeLast(j) => $<#Else node in junction "$(j.state).$j" must be the last alternative node#>
                  | JunctionActionMaybeLast(j, a) => $<#Junction action "$a" in "$(j.state).$j" maybe single in node or last#>
                  | JunctionElseMustAfterAnotherGuard(j) => $<#Junction else node in "$(j.state).$j" must have preceded another GuardNode#>
                  | EmptyJunction(j) => $<#There is a empty node in junction "$(j.state).$j"#>
                  | ChoiceElseMustBeLast(j) => $<#Else node in choice "$(j.state).$j" must be the last alternative node#>
                  | ChoiceActionMaybeLast(j, a) => $<#Choice action "$a" in "$(j.state).$j" maybe single in node or last#>
                  | ChoiceElseMustAfterAnotherGuard(j) => $<#Choice else node in "$(j.state).$j" must have preceded another GuardNode#>
                  | EmptyChoice(j) => $<#There is a empty node in choice "$(j.state).$j"#>
                  | SeveralState(st) => $<#There is several duplicate states of name $st #>
                }
      Errors ::= str;
    }

    public AddWarning(err : FsmWarning) : void
    {
      def str = match (err)
                {
                  | HistoryNotUsed(hist = StateHistory where (state = st, Type = t))  => $<#"$t History in "$st" is not used in fsm life history#>
                  | StateNotUsed(state = st) => $<#State "$st" is not used in fsm life history#>
                  | TransitionNotUsed(tran) => $<#Transition "$tran" is not used in fsm life history#>
                  | RegionNotUsed(reg) => $<#Concurrent region "$reg" is not used in fsm life history#>
                  | NoConcurrentActivity(act) => $<#There is no other activities in do activity node $act. Flag is no meaning, concurrent activity means that several activities may run concurently in do activity region of state.#>
                  | TransitionOverriden(tran,by) => $<#Transition $(tran.GuardedName) is overriden by $(by.GuardedName), due to execute priority rules, because these transition is unguarded#>
                  | x  => $"Unknown Warning $x"
                }
      Warnings ::= str;
    }

    public this(fsm : StateNode.StateMachine)
    {
      this.fsm = fsm;
      statemap = StateMap(this);
      Init();
    }

    public Errors : list[string] {get;set;}
    public Warnings : list[string] {get;set;}

    FinalizeAnalyse() : void
    {
      Errors = Errors.Rev();
      Warnings = Warnings.Rev();
    }
    
    public Analyse() : void
    {
      try
      {
        CheckParseErrors();
        InitStateMap();
        InitEvents();
        CreatePseudoStates();
        CheckTransitions();
        CreateSubMachines();
        CheckInitialTransitions();
        CreateTransitions();
        BreakIfError();
        CreateTransitionPaths();
        CreateConcurrentRegion();
        UpdateInitial();
        CreateHistory();
        CreateActions();
        FinalizeAnalyse();
      }
      catch 
      {
        | _ is FsmErrorException => ()
      }
    }
    
    public TransitionEvents : list[StateEvent]
    {
      get
      {
        events_map.Values()
      }
    }

    public Error : bool
    {
      get
      {
         !Errors.IsEmpty()
      }
    }

    public guards : list[GuardNode]
    {
      get
      {
        def guards = transitions.Values() |>< Guards;
        def init_guards = initial_transitions.Values() |>< Guards;
        def guards = guards + init_guards;
        guards.RemoveDuplicatesSort((x, y) => x.Name.CompareTo(y.Name))
      }
    }

    public history_transitions : Map[string, StateTransition]
    {
      get
      {
        transitions.Filter((_, x)  => x.HistoryTarget != null);
      }
    }

    public history_default_transitions : list[StateTransition]
    {
      get
      {
        history_states.FilterValues(_.Default).Filter(_.Used) |> _ : StateTransition//x.ActualTo != null)
      }
    }

    public all_transitions : list[StateTransition]
    {
      get
      {
              work_transitions.Values() 
              + initial_transitions.Values() 
              + history_transitions.Values() 
              + history_default_transitions 
              + special_transitions
        + paths_from_out
      }
    }
    
    public ActionNodes : list[PathNode]
    {
      get
      {
        action_node.Unsequenced.RemoveDuplicatesSort(PathNode.Compare)
      }
    }

    //public static StringComparator : string * string -> int = string.Compare(_, _, StringComparison.CurrentCulture);
    //public static StrEq : string * string -> bool = (x, y) => StringComparator(x, y) == 0;


    [Accessor]
    public mutable topState : FsmState;

  }
}
