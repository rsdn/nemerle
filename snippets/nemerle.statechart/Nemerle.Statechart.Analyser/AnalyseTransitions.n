using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  using StateTransition;
  using ListUtils;
  using DecisionNode;  
  using GuardNode;
  /// <summary>
  /// Description of AnalyseTransitions.
  /// </summary>
  public partial class FsmAnalyser
  {

    CheckInitialTransitions() : void
    {
      def check_auto_initial(st)
      {
        | FsmState.Final 
        | ConcurrentRegion => ()
        | (FsmState where (Initial = [], SubStates = head :: _)) when (!(head is FsmState.Final)) =>
            st.DefineInitial(head);
        | _ => ()
      }

      states.Iter(x => check_duplicates(x.Initial));  // check duplicates
      when (fsm.flags.AutoInitial) states.Iter(check_auto_initial);

      when (TopState.Initial.IsEmpty()) // if not have initial transition in top state
        if (TopState.Transitions.IsEmpty()) // if not have other transitions
          check_auto_initial(TopState) // initial is first substate
        else TopState.DefineInitial(TopState); // else initial transition is top state

    }

    is_crossed_orthogonal(tr : StateTransition, st : FsmState) : bool
    {
      | (StateTransition where (To = TransitionTarget.State(FsmState where (PartOfRegion = Some(r), PartOfSubRegion = Some(sr)))),
                         FsmState where (PartOfRegion = Some(r2), PartOfSubRegion = Some(sr2))) when r == r2 =>
          sr2 != sr
      | _ => false
    }
    
    CreateSuperStateTransitions() : void
    {
      def create_trans(st)
      {
        | FsmState.State(SuperState = null) => ()
        | FsmState where (SuperState = super, PartOfSubRegion = r) =>
            single_func
            {
              super.combined_transitions;
              if (r.HasValue) __.Filter(x => !is_crossed_orthogonal(x, st)) else __;
              st.DefineTransitions(__)
            }
      }

      states.Iter(create_trans)
    }
    
    CheckCrossTransitions() : void
    {
      def group(st, tr)
      {
        match (tr)
        {
          | _ :: []  => () // if not have group exit
          | StateTransition where (Guard = Some()) as head :: tail  => head.IsCrossed = true; // cross transition
              def (path, end) = tail.SplitFind(x  => x.Guard.IsNone); // get all include last without GuardNode
              head.ParentCrossed = path;
              path.Iter(x => x.CrossFor = true);
              st.DeleteTransitions(end); // delete from usual transitions in state
          | _ :: tail  => st.DeleteTransitions(tail)
          | _  => ()
        }
      }

      def check_cross_tran(st, tr)
      {
        single_func
        {
          tr.Sort((x, y) => StateTransition.GuardComparer(y, x));
          __.Sort((x, y) => y.From.hierarchy_pos - x.From.hierarchy_pos); // sort on hierarchy position
          group(st, __); // group transitions
        }
      }

      def check_cross(st)
      {
        def tran = st.Transitions + st.InternalTran + st.Initial;
        def group = FsmState.create_transition_group(tran).Filter((_, x) => x.Length > 1).Values();
        group.Iter(check_cross_tran(st,_))
      }

      states.Iter(check_cross); // check from the top state
    }

    check_duplicates(tr : list[StateTransition]) : void
    {
      def check_duplicate_tran(tr)
      {
        def check_begin_and_ends(tr)
        {
          def equal(lst, lst2)
          {
            lst.Equals(lst2, StrEq);
          }

          when (tr.Length > 1)
          {
            def acts = tr |> ActionList;
            def res = acts.ElementsEqual(equal);
            when (res) AddError(FsmError.DuplicateTransition(tr));
          }
        }

        def ordinary = tr.Exclude(x => x is Initial || x.IsCompletion);
        def dups = ordinary.Duplicates(StateTransition.GuardComparer); // find duplicates with same guards and same triggers
        if (!dups.IsEmpty())
        {
          AddError(FsmError.DuplicateTransition(dups));
        } else
        {
          def (intern, other) = tr.Partition(_ is Internal);
          check_begin_and_ends(intern);
          def begin_and_end_eq = other.Group((x,y) => x.From.CompareTo(y.From) - x.To.CompareTo(y.To));
          def begin_and_end_eq = begin_and_end_eq.Filter(x => x.Length > 1);
          begin_and_end_eq.Iter(check_begin_and_ends)
        }
      }

      def check_override(tr)
      {
        match (tr.Find(x => x.Guard.IsNone))
        {
          | Some(t) => def tr = tr.Exclude([t], (x, y) => x == y : object);
              tr.Iter(x => AddWarning(FsmWarning.TransitionOverriden(x, t)));
          | _ => ()
        }
      }
      
      def group = FsmState.create_transition_group(tr).Values();
      def group = group.Filter(x => x.Length > 1);
      group.Iter(check_duplicate_tran);
      group.Iter(check_override)
    }

    /// <summary>
	  /// Check duplicates
	  /// </summary>
    CheckDuplicates() : void
    {
      states.Iter(x => check_duplicates(x.this_transitions));
      states.Iter(x => check_duplicates(x.Initial))
    }

    
    get_named(tr : TransitionTarget.Named) : TransitionTarget
    {
      | Named(name = n, transition = tr) =>
      
          def states = pseudo_states.Filter(x => x.NativeName.HasValue);
          match (states.Find(x => x.NativeName.Value == n))
          {
            | Some(t) => TransitionTarget.PseudoState(tr, t)
            | _ => AddError(FsmError.UnknownNode(tr));null
          }
    }

    check_targets(tr : TransitionTarget) : TransitionTarget
    {
        | PseudoState(node = Junction as j)
        | PseudoState(node = Choice as j) => CheckJunctionChoice(j);null
        | _  => null
    }

    resolve_targets(st : FsmState, tr : TransitionTarget) : TransitionTarget
    {
      
      def tran = tr?.transition;
      
      match (tr)
      {
        | TransitionTarget.Final(state = null) as t =>
            def super = if (tran is Initial) st else st.SuperState;
            match (super.SubStates.FindType()[0])
            {
              | Some(st)  => t.state = st;
              | _  => ()
            }
            t
           
        | PseudoState(node = Terminate(state = null) as node) as t =>
            match (pseudo_states.Filter(_ is PseudoStateNode.Terminate))
            {
              | [] => node.state = TopState;
              | [term] => t.node = term
              | _ => AddError(FsmError.UnknownTerminateTransition(tran))
            }
            t
            
        | PseudoState(node = Join(state = null, name = n)) as t =>
            match (pseudo_states.FilterType())
            {
              | [] => AddError(FsmError.UnknownNode(tran));t
              | joins =>
                  match (joins.Find(x : PseudoStateNode.Join => StrEq(x.name, n)))
                  {
                    | Some(j) => TransitionTarget.PseudoState(tran, j)
                    | _ => AddError(FsmError.UnknownNode(tran));t
                  }
            }
            
        | Named as t => def t = get_named(t);
                        resolve_targets(st, t)
        | Qualified(parent = st, target = t) => 
            match (statemap.Get(st), t)
            {
              | (FsmState.SubMachine(inlined = false) as m, TransitionTarget.State(FsmState where (Name = n))) =>
                  m.Scan(); // scan external sub machine for states
                  when (!m.ref_sub_states.Contains(n)) AddError(FsmError.SubMachineStateNotFound(m, n));
                  TransitionTarget.SubMachine(tran, m, n)
              | (null, _) => AddError(FsmError.UnknownState(t.transition.From, FsmState.State(st), t.transition));null
              | (st, t) => match (resolve_targets(st, t))
                  {
                    | null => t
                    | t => t
                  }
            }
        | t  => t
      }
    }
    
    create_join_transitions() : void
    {
        
      def check_join(j, tr)
      {
        match (j)
        {
          | PseudoStateNode.Join(state = st, target = t) =>

              if (tr.ElementsEqual((x, y) => x.Trigger == y.Trigger))
              {
                if (tr.All(x => x.From.PartOfSubRegion.HasValue) &&
                      tr.ElementsEqual((x, y) => x.From.PartOfRegion.Value == y.From.PartOfRegion.Value))
                {
                  def tran = Transition(st, tr.Head.Trigger, t, j);
                  def reg = tr.Head.From.PartOfRegion.Value;
                  def tr = tr.Sort((x, y) => x.FromRegion.index - y.FromRegion.index);
                  j.joined_tran = tr;
                  j.region = reg;
                  j.transition = tran;
                } else AddError(FsmError.JoinTransitionMustLeaveRegion(j, tr))
              } else
              {
                AddError(FsmError.JoinTransitionMustHaveSameTrigger(j, tr));
                throw FsmErrorException()
              }
        }
      }
              
      def get_join(t, lst)
      {
        match (t)
        {
          | StateTransition where (To = TransitionTarget.PseudoState(Join() as j)) => (j, t) :: lst
          | _ => lst
        }
      }
      
      def join_tran = states.Map(x => x.all_transitions_with_init.FoldLeft([], get_join)).Flatten();
      def jtrans = join_tran.Group((x, y) => FsmAnalyser.StringComparator(x[0].name, y[0].name)).Map(x => (x.Head[0], x.Split()[1]));
      jtrans.Iter(check_join);
        
        
    }

    create_fork_transitions() : void
    {
      def check_fork(f)
      {
        match (f)
        {
          | PseudoStateNode.Fork(target = t) =>

              def st = t |> ToState;
              def reg = st |> PartOfSubRegions;
              if (!reg.IsEmpty() && reg.All(x => !x.IsEmpty()))
              {
                def sreg = reg |> Last();
                def dups = sreg.Duplicates((x, y) => x.index - y.index);
                when (dups.Length != 0) AddError(FsmError.ForkMustGoToSeparateRegion(f));
                def reg = sreg.Head.contained_in;
                def sub_trans = t |> StateTransition.Transition(reg, null, _, f) : StateTransition;
                sub_trans.Iter(x => x.Local = true);
                f.fork_tran = sub_trans;
              } else
              {
                AddError(FsmError.ForkMustGoToRegion(f));
              }
            
        }
      }
        
      def get_fork(t, lst)
      {
        match (t)
        {
          | StateTransition where (To = TransitionTarget.PseudoState(Fork as f)) => f :: lst
          | _ => lst
        }
      }
      
      def tran = states |>< _.all_transitions_with_init.FoldLeft([], get_fork);
      tran.Iter(check_fork)
    }
    /// <summary>
	  /// Creating Transitions
	  /// </summary>
    CreateTransitions() : void
    {
      def check_tran(st)
      {
        st.all_transitions_with_init.Iter(x => x.TargetTraverse(check_targets))
      }
      
      states.Iter(check_tran);
      
      create_join_transitions(); // creating join transitions
      create_fork_transitions(); // creating fork transitions
      CreateSuperStateTransitions(); // create parent transitions
      CheckDuplicates(); // check duplicates
      CheckCrossTransitions(); // look for cross transitions
      def int_tran =  states |>< InternalTran;
      def int_tran =  RenameTransition(int_tran);
      internal_transitions = Map(int_tran);
    }

    CheckTransitions() : void
    {
      def proc_tran(st, tran)
      {
        match (tran.To)
        {
          | TransitionTarget.State(to) when (!statemap.Contains(st.Name)) => AddError(FsmError.UnknownState(st, to, tran));
          | _  => ()
        }

      }

      def check_cross_orthogonal(tr)
      {
        when (is_crossed_orthogonal(tr, tr.Source)) AddError(FsmError.TransitionCrossOrthogonalBoundaryOfSameRegion(tr))        
      }
      
      def init(st)
      {
        st.Initial.Iter(proc_tran(st, _));
        st.all_transitions.Iter(proc_tran(st, _));
      }

      def check_tran(st)
      {
        st.all_transitions_with_init.Iter(x => x.TargetTraverse(resolve_targets(st, _)))
      }
      
      states.Iter(init);
      states.Iter(x => x.all_transitions.Iter(check_cross_orthogonal));
      states.Iter(check_tran)
      
    }

    RenameTransition(tran : list[StateTransition]) : list[string * StateTransition]
    {
      def (dups, tran) = tran.DuplicatesPartition(StateTransition.Comparer);
      dups.Iter(x => x.NeedGuardedName = true);
      def dups = dups |> (GuardedName, _);
      def tran = tran |> (Name, _);
      def tran = tran + dups;
      def (dups, tran) = tran.DuplicatesPartition((x, y) => StringComparator(x[0], y[0]));
      def dups = dups.Group((x, y) => StringComparator(x[0], y[0]));
      dups.Iter(x => AddError(FsmError.DuplicateTransition(x.Split()[1])));
      tran
    }

    CreateTransitionPaths() : void
    {
      def traverse()
      {
        traverser.Add(TopState.Initial);
        traverser.Traverse(); // model the fsm traversing states and transition from top recursively through initial transition and pseudo states
        $[x.paths, x in states, x.paths != null]
      }

      def determine_used()
      {
        def filter_used(st)
        {
          | FsmState.ConcurrentSubRegion
          | ConcurrentRegion
          | Final => false
          | _ => true
        }

        def (lived, empty) =  states.Partition(_.LivedNested); // determine lived states
        states.Iter(_.CreatePathFromOut()); // creating paths from outer world for using as sub machine to go to any state from out
        def empty = empty.Filter(filter_used);
        lived_nested_states = lived;
        lived_states = states.Filter(_.Lived);
        def all_tran = states |>< all_transitions;
        def (trans, not_used) = all_tran.Partition(_.UsedInGenerate);
        def not_used = not_used.Filter(x => x.From.Lived);
        def not_used = not_used.Exclude(_.NotWork);
        def not_used = not_used.Exclude(_.Used);
        paths_from_out = states |> PathFromOut;
        empty.Iter(x => AddWarning(FsmWarning.StateNotUsed(x))); // warning about all without substates and not lived that is not used
        not_used.Iter(x => AddWarning(FsmWarning.TransitionNotUsed(x)));
        trans
      }

      def get_special_transitions(tran)
      {
        | StateTransition.Transition(Destination = TransitionDestination.Fork(sub_tran = tr)) => tr
        | StateTransition.Transition(To = PseudoState(PseudoStateNode.Join(transition = tr))) => [tr]
        | _ => []
      }

      def paths = traverse(); // traverse paths
      def trans = determine_used(); // determine used elements
      def special = trans |>< get_special_transitions(_);
      special_transitions = special.RemoveDuplicatesSort(StateTransition.Comparer);
      special_transitions.Iter(x => x.UpdateReference(statemap));
      trans_paths = paths; // save in field
      def trans = RenameTransition(trans);
      def trans_nodes =  trans.Map((x, y) => (x, y.PathNode));  // nodes
      def trans_nodes = trans_nodes.RemoveDuplicatesSort(nodes_cmp);
      def map = Map(trans);
      transitions = map;
      def int_nodes = internal_transitions |> (_, _[2].PathNode);
      int_trans_nodes = Map(int_nodes.RemoveDuplicatesSort(nodes_cmp));
      transition_nodes = Map(trans_nodes);
      def (used_hstates, not_used) = history_states.Partition(_.Used);
      history_states = used_hstates;
      not_used.Iter(x => AddWarning(FsmWarning.HistoryNotUsed(x)));
      def select = trans.Filter((_, x)  => x.HistoryTarget == null);
      work_transitions = Map(select);
      def work_nodes = select |> (_, _[2].PathNode);
      work_transition_nodes = Map(work_nodes.RemoveDuplicatesSort(nodes_cmp));
    }

    UpdateInitial() : void
    {
      def init = states |>< Initial;
      def init = init.Filter(x => x.UsedInChoice || x.From.IsTopState);
      def reg_init = (regions |>< sub_regions |>< Initial);
      def defs = init + reg_init;
      def (init, not_used) = defs.Partition(_.Used);
      not_used.Iter(x => AddWarning(FsmWarning.TransitionNotUsed(x)));
      def (init, not_used) = init.Partition(_.Used);
      not_used.Iter(x => AddWarning(FsmWarning.TransitionNotUsed(x)));
      def init = RenameTransition(init);
      initial_transitions = Map(init);
      def init_nodes = init |> (_, _[2].PathNode);
      initial_transition_nodes = Map(init_nodes.RemoveDuplicatesSort(nodes_cmp));
    }

  }
}
