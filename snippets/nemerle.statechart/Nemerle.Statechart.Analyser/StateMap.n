using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Collections;

namespace Nemerle.Statechart
{
  using FsmState;
  
  public class StateMap
  {
    [Accessor]
    mutable map : array[FsmState];
        
    [Accessor]
    mutable errors : list[FsmError] = [];

    [Accessor] analyser : FsmAnalyser;
    
    public HaveErrors : bool
    {
      get
      {
         !errors.IsEmpty()
      }
    }

    public Count : int
    {
      get
      {
        map.Length
      }
    }

    public Contains(state : string) : bool
    {
      map.Exists(x => FsmAnalyser.StrEq(x.Name, state))
    }

    public static GetFullName(st : list[FsmState]) : string
    {
      string.Join(".", st |> NativeName)
    }
    
    public Get(state : list[string]) : FsmState
    {
      def merge_name(n)
      {
        string.Join(".", n)
      }
      
      def get_loop(st, lst, path)
      {
        | (st, head :: tail, p) => 
           def path = head :: p;
           match (get_all_state(st, head), tail)
           {
             | ([], _) => errors ::= FsmError.StateNotFound(State(merge_name(path.Rev())));null
             | ([st], []) => st
             | ([st], _) => get_loop(st.SubStates, tail, path)
             | (lst, _) => errors ::= FsmError.SeveralState(lst |> State(merge_name((_.NativeName :: p).Rev())));null
           }
        | _ => null   
      }
      
      get_loop(map.NToList(), state, [])
    }

    get_all_state(map : list[FsmState], state : string) : list[FsmState]
    {
      def name = state ?? FsmState.TopStateName;
      def (name, sub_name) = if (name != FsmState.TopStateName) 
                             {
                               def sub =  name.GetSub('[', ']');
                               if (sub != null) (name.GetSub('['), sub) else (name, null)
                             } else (name, null);
      def name = if (sub_name != null) $"$(name)SubRegion$sub_name" else name;
      map.FindAll(x => FsmAnalyser.StrEq(x.NativeName, name))
    }
    
    public Get(state : string) : FsmState
    {
      def st = state.SplitToList('.');
      Get(st)
    }

    public Get(num : int) : FsmState
    {
      map[num]
    }
    
    public Add(st : FsmState) : void
    {
      map = map.Append(st);
      st.FormatName();
      st.is_new = false;
    }
    
    public Rem(st : FsmState) : void
    {
      def st = get_all_state(map.NToList(), st.NativeName);
      map = map.FilterToArray(x => !st.Contains(x));
    }
    
    public Item[index : string] : FsmState
    {
      get
      {
        Get(index)
      }
    }

    public Item[index : int] : FsmState
    {
      get
      {
        Get(index)
      }
    }
    
    public this(analyser : FsmAnalyser)
    {
      this.analyser = analyser;
    }    
    
    public Init(topstate : FsmState) : void
    {
      def sub = topstate :: topstate.AllSubStates;
      sub.IterI((i, x) => 
       {
         x.is_new = false;
         x.Num = i;
       });
      map = sub.ToArray()
    }

    public Names : array[string]
    {
      get
      {
        map |> Name
      }
    }

    public States : array[FsmState]
    {
      get
      {
        map
      }
    }
  }
}
