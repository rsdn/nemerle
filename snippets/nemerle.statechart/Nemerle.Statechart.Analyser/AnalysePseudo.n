using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  using ListUtils;
  using DecisionNode;
  /// <summary>
  /// Description of AnalysePseudo.
  /// </summary>
  public partial class FsmAnalyser
  {
    mutable unnamed_junction_num : int;
    mutable unnamed_choice_num : int;
    
    CreatePseudoStates() : void
    {
      def get_junction(t, a)
      {
        match (t)
        {
          | StateTransition where (To = TransitionTarget.PseudoState(Junction as j)) => j :: a
          | _ => a
        }
      }

      def get_choice(t, a)
      {
        match (t)
        {
          | StateTransition where (To = TransitionTarget.PseudoState(Choice as j)) => j :: a
          | _ => a
        }
      }

      def get_merge(t, a)
      {
        match (t)
        {
          | StateTransition where (To = TransitionTarget.PseudoState(Merge as j)) => j :: a
          | _ => a
        }
      }

      def get_forks(t, a)
      {
        match (t)
        {
          | StateTransition where (To = TransitionTarget.PseudoState(Fork as j)) => j :: a
          | _ => a
        }
      }
      
      def pseudo = states |>< pseudo_states;
      def (junc, other) = pseudo.PartitionType();
      def (choice, other) = other.PartitionType();
      def (merge, other) = other.PartitionType();
      forks = states.FoldLeft([], (x, a) => x.all_transitions_with_init.FoldLeft(a, get_forks));
      def junctions = states.FoldLeft([], (x, a) => x.all_transitions_with_init.FoldLeft(a, get_junction)) + junc;
      def choices = states.FoldLeft([], (x, a) => x.all_transitions_with_init.FoldLeft(a, get_choice)) + choice;
      def merges = states.FoldLeft([], (x, a) => x.all_transitions_with_init.FoldLeft(a, get_merge)) + merge;
      pseudo_states = other %+ junctions %+ choices %+ merges;
    }
    
    CheckJunctionChoice(node : PseudoStateNode) : PseudoStateNode
    {
      | PseudoStateNode.Choice(Name = n) as node => 
      
            match (choices.Find(x => x.Name == n))
            {
              | Some(j) => j
              | _ => 
                    def n = node.WithTree(DecisionNode.Create(node, this));
                    choices ::= n;
                    n
                   
            }
      
      | Junction(Name = n) as node => 
      
            match (junctions.Find(x => x.Name == n))
            {
              | Some(j) => j
              | _ => 
                    def n = node.WithTree(DecisionNode.Create(node, this));
                    junctions ::= n;
                    n
            }

      | _ => null
    }

  }
}
