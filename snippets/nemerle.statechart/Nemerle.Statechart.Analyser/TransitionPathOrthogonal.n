using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{

  using CheckNode;
  using StateTransition;
  using PathNode;
  using TransitionDestination;
  using FsmState;

  /// <summary>
  /// Description of TransitionPathOrthogonal.
  /// </summary>
  public partial class TransitionPath
  {

    TraverseJoinTransition(join : PseudoStateNode.Join, tr : StateTransition) : TransitionDestination
    {
      | (Join(joined_tran = jtran, state = st, transition = tran), StateTransition where (Source = src)) =>

          tr.Used = true;
          tr.omit_guard = true;
          DefExitPath(src, st);
          when (tran.Path == null) traverser.Add(tran);
          if (tr.FromRegion == jtran.Last().FromRegion)
          {
            tr.AddCheck(Join(join, tr));
            JoinedTransition(join, tran)
          } else
          if (tr.FromRegion == jtran.Head.FromRegion)
          {
            tr.AddCheck(RegionStates(jtran |> From));
            def has_guard = jtran.Exists(x => x.SourceGuard.HasValue);
            when (has_guard) tr.AddCheck(Guard(jtran.FilterValues(_.Guard)));
            Join(join)
          }
          else
          {
            tr.AddCheck(Join(join, tr));
            Join(join)
          }
    }
    
    TraverseFork(fork : PseudoStateNode.Fork, targets : list[TransitionTarget]) : TransitionDestination
    {
      | (Fork(fork_tran = ftran), t) => 
      
        def st = t |> ToState;
        def reg = st |> PartOfSubRegions;
        def sreg = reg |> Last();
        def reg = sreg.Head.contained_in;
        traverser.Add(ftran);
        Fork(reg, ftran)
    }

    TraverseOrthogonalRegion(reg : ConcurrentRegion) : TransitionDestination
    {
      def initial = reg.sub_regions |> Initial;
      when (!initial.All(x => !x.IsEmpty())) analyser.AddError(FsmError.RegionMustContainInitial(reg, transition));
      def init = initial.Flatten();
      init.Iter(_.TraversePath(true));
      def target = Region(reg);
      if (transition is Initial) target else TraverseCompletionTransition(target, target)
    }

    TraverseCompletionTransition(target : TransitionDestination, to : TransitionDestination) : TransitionDestination
    {
      match (target)
      {
        | Region(ConcurrentRegion(sub_regions = sr)) =>
          def init = sr |>< Initial;
          def st = init |> Destination;
          def st = st |> TraverseCompletionTransition(_, to);
          match (st.Find(_ is CheckAfter))
          {
           | Some(c) => c
           | _ => to
          }
        | SubRegion(reg = FsmState where (join_completion_transitions = (_ :: _) as tr))
        | State(FsmState where (join_completion_transitions = (_ :: _) as tr)) => 
        
            def (reg, joined) = match (tr.Head.To)
            {
              | PseudoState(Join(joined_tran = tran, region = reg)) => (reg, tran)
              | _ => (null, null)
            }
            traverser.Add(tr);
            ForceStateChange(TransitionPostConditions.RegionCompletion(reg, joined), to)
        | _ => to// end state
      }
    }
    
    TraverseSubRegion(reg : ConcurrentSubRegion, to : TransitionTarget, tran : StateTransition) : TransitionDestination
    {
      def region = reg.contained_in;
      def st = to.ToState;
      def omitted = region.RegionsExcept(st); // other omitted regions
      def initial = omitted |> Initial;
      when (!initial.All( _ is (_ :: _))) analyser.AddError(FsmError.SubRegionsMustContainInitial(omitted, transition));
      def init = initial.Flatten();
      traverser.Add(init |> _ : StateTransition);
      def target = TraverseTarget(to, tran);
      def res = SubRegion(reg, target, transition.From);
      TraverseCompletionTransition(target, res)
    }

    TraverseWithinRegionTransition(tran : StateTransition) : TransitionDestination
    {
      def to = TraverseOrdinaryTransition(tran);
      TraverseCompletionTransition(to, to)
    }

    DefineRegionsExit(region : ConcurrentSubRegion) : void
    {
      foreach (st in region.AllSubStates)
      {
        def (exit, _) = FindPath(st, region.PartOfRegion.Value, [], []); // exit state nested in region
        def exit = ExitNodeCreate(exit); // create exit state node
        st.region_exit_path = exit;
      }
    }

    TraverseTransitionFromRegion(reg : ConcurrentSubRegion, tran : StateTransition) : TransitionDestination
    {
      | (ConcurrentSubRegion(contained_in = region), StateTransition where (Source = src, From = from)) =>

          region.sub_regions.Iter(DefineRegionsExit); // define exit actions from region
          DefPath(src, from, tran);
          tran.Used = true;
          ForceStateChange(TraverseTargetReg(tran.To, tran)) // traversing transition target
    }

  }
}
