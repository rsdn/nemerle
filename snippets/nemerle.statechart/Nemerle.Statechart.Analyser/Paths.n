using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System.Diagnostics;
using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;

namespace Nemerle.Statechart
{

  using FsmState;

  [Record]
  public variant PathNode
  {
    | Empty
    | Sequence {seq : list[PathNode];}
    | Entry
        {
          action : StateAction.Entry;
          inline : list[PathNode * bool] = [];

          this (action : StateAction.Entry)
          {
            this.action = action;
          }

          Name : string
          {
            get
            {
              $"$(action)"
            }
          }

          override ToString() : string
          {
            Name
          }

        }

    | Exit
        {
          action : StateAction.Exit;
          inline : list[PathNode * bool] = [];

          this (action : StateAction.Exit)
          {
            this.action = action;
          }

          Name : string
          {
            get
            {
              $"$(action)"
            }
          }

          override ToString() : string
          {
            Name
          }


        }

    | Action
        {
          actions : Actions;

          override ToString() : string {$"PathNode+Action$(actions)"}
        }
    | ClearHistory
        {
          history : list[StateHistory];

          override ToString() : string {$"PathNode+ClearHistory$history"}
        }
    | SaveHistory
        {
          history : list[StateHistory];

          override ToString() : string {$"PathNode+SaveHistory$history"}
        }

    | RunDoActivity
        {
          activity : StateAction.Do;

          override ToString() : string {$"$(activity)Run"}
        }

    | StopDoActivity
        {
          activity : StateAction.Do;

          override ToString() : string {$"$(activity)Stop"}
        }
    | RegionExit
        {
          states_in : list[ConcurrentSubRegion];
          region : ConcurrentRegion;

          override ToString() : string {$"RegionExit$(region)In$states_in"}
        }
    
    public static Equals(a : PathNode, b : PathNode) : bool
    {
      | (Sequence(lst), Sequence(lst2)) => lst.Equals(lst2, Equals)
      | (n1, n2) => FsmAnalyser.StrEq(n1.ToString(), n2.ToString())
    }

    public static Compare(a : PathNode, b : PathNode) : int
    {
      | (Sequence(lst), Sequence(lst2)) => if (lst.Equals(lst2, Equals)) 0 else -1
      | (n1, n2) => FsmAnalyser.StringComparator(n1.ToString(), n2.ToString())
    }

    public static @+(a : PathNode, b : PathNode) : PathNode
    {
      Sequence([a, b])
    }

    public Unsequenced : list[PathNode]
    {
      get
      {
        match (this)
        {
          | Sequence(lst) => lst |>< Unsequenced
          | Empty => []
          | x => [x]
        }
      }
    }

    public Clone() : PathNode
    {
      PathNode.Sequence(Unsequenced)
    }

    public Actions : list[string]
    {
      get
      {
        match (this)
        {
          | Entry(action = act)
          | Exit(action = act)
          | Action(actions = act) => act.ActionList
          | Sequence(seq) => seq |>< Actions
          | _  => []
        }
      }
    }

  }

  public variant CheckNode
  {
    | Empty
    | Sequence {nodes : list[CheckNode];}
    | RegionStates {states : list[FsmState];}
    | Join {join : PseudoStateNode.Join;tran : StateTransition;}
    | Guard {tran : list[GuardNode];}

    public static @+(a : CheckNode, b : CheckNode) : CheckNode
    {
      Sequence([a, b])
    }

  }

  
  /// <summary>
  /// Description of TransitionPath.
  /// </summary>
  public class TransitionPaths
  {
    [Accessor]
    mutable paths : list[StateEvent * TransitionPath];
    [Accessor]
    state : FsmState;

    public this(st : FsmState)
    {
      state = st;
    }

    public TraverseTransitions(recursive : bool = false) : void
    {
      def trans = state.all_transitions.Exclude(_.UsedInGenerate);
      trans.Iter(_.TraversePath(recursive));
      def paths = trans |> (Trigger, Path);
      this.paths = paths;
    }

    public Actions : list[string]
    {
      get
      {
        (paths.Split()[1] |>< Actions).RemoveDuplicatesSort(FsmAnalyser.StringComparator)
      }
    }

    public ActionNodes : list[PathNode]
    {
      get
      {
        paths.Split()[1] |> Path
      }
    }

  }

}
