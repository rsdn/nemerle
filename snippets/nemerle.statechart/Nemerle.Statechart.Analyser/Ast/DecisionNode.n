using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
 
  using ListUtils;
  
  [Record]
  public variant DecisionNode
  {
    | Condition 
        {
          condition : GuardNode;
          body : DecisionNode;
          else_node : DecisionNode;
        }
    | Action
        {
          condition : option[GuardNode];
          body : DecisionNode;
        }
    | Else
        {
          body : DecisionNode;
        }
    | Target 
        {
          target : TransitionTarget;
          destination : TransitionDestination;
          
          SetDestination(dest : TransitionDestination) : Target
          {
            Target(level, state, actions, node_path, out_path, PrevState, target, dest)
          }
          
          SetDestination(dest : TransitionDestination, npath : PathNode, out_path : PathNode) : Target
          {
            Target(level, state, actions, npath, out_path, PrevState, target, dest)
          }
        }
      
    public this(node : DecisionNode)
    {
      obj_assign (node)
      {
        level;
        state;
        actions;
        PrevState;
        node_path;
        out_path;
      }
    }
    
    public level : int;
        
    public state : FsmState;
    
    public actions : list[Actions] = [];
        
    public PrevState : FsmState;
    
    public this() {}
    
    public this(lev : int, st : FsmState, act : list[Actions], npath : PathNode, out_path : PathNode, prev_st : FsmState) 
    {
      level = lev;
      state = st;
      actions = act;
      node_path = npath;
      PrevState = prev_st;
      this.out_path = out_path;
    }

    public SetCopy(n : int) : DecisionNode
    {
      def inc(t)
      {
        | Target(t, d)      => Target(t.SetCopy(n), d)
        | _                 => this
     }
     
     Map(inc)
    }
    
    public ActionNode : PathNode
    {
      get
      {
        PathNode.Sequence(actions |> PathNode.Action(_))
      }
    }
        
    public Actions : PathNode
    {
      get
      {
        def act = Iterator |> ActionNode;
        PathNode.Sequence(act)
      }
    }
    
    public Map(func : DecisionNode -> DecisionNode) : DecisionNode
    {
      def node = func(this);
      def node = node ?? this;
      match (node)
      {
        | Condition(c, b, e) as j => 
            def nb = b.Map(func);
            def ne = e.Map(func);
            if (nb != b : object || ne != e : object) 
              Condition(level, state, actions, j.node_path, j.out_path, j.PrevState, c, nb, ne) else node
        | Else(b) as j => 
            def nb = b.Map(func);
            if (nb != b : object) Else(level, state, actions, j.node_path, j.out_path, j.PrevState, nb) else node
                     
        | Action(c, b) as j => 
            def nb = b.Map(func);
            if (nb != b : object) Action(level, state, actions, j.node_path, j.out_path, j.PrevState, c, nb) else node
        
        | Target => node
        
      }
    }

    public SetPath(npath : PathNode, out_path : PathNode) : DecisionNode
    {
      match (this)
      {
        | Condition(c, b, e) => Condition(level, state, actions, npath, out_path, PrevState, c, b, e)
        | Else(b)            => Else(level, state, actions,npath, out_path, PrevState, b)
        | Action(c, b)       => Action(level, state, actions, npath, out_path, PrevState, c, b)
        | Target(t, d)       => Target(level, state, actions, npath, out_path, PrevState, t, d)
      }
    }
    
    public Iterator : IEnumerable[DecisionNode]
    {
      get
      {
        yield this;
        match (this)
        {
          | Condition(body = b, else_node = null)
          | Action(body = b)
          | Else(body = b)                        => foreach (i in b.Iterator) yield i
          | Condition(body = b, else_node = els)  => foreach (i in b.Iterator) yield i;
              foreach (i in els.Iterator) yield i
          | Target => ()
        }
      }
    }

    public Guards : list[GuardNode]
    {
      get
      {
        def get_guard(n)
        {
          | Condition(c, _, _)
          | Action(Some(c), _) => Some(c)
          | _ => None()
        }
        
        Iterator.FilterValues(get_guard)
      }
    }
    
    
    public ThisPath : PathNode
    {
      get
      {
        PathNode.Sequence(actions |> PathNode.Action(_))
      }
    }

    public Paths : PathNode
    {
      get
      {
        PathNode.Sequence(Iterator |> Path)
      }
    }
    
    [RecordIgnore] public node_path : PathNode = PathNode.Empty();
    [RecordIgnore] public out_path : PathNode = PathNode.Empty();

    public ThisOutPath : PathNode
    {
      get
      {
        ThisPath + node_path
      }
    }
    
    public Path : PathNode
    {
      get
      {
        node_path + ThisPath + out_path
      }
    }
    
    public Traverse(func : DecisionNode -> void) : void
    {
      Iterator.Iter(func)
    }

    public static Create(node : PseudoStateNode, analyser : FsmAnalyser) : DecisionNode
    {
      def contains_decision(n)
      {
        match (n.guard)
        {
          | None
          | Some(GuardNode.Else) => false
          | _ => true
        }
      }
      
      def create_choice_tree_node(n, lev, st, prevst, els)
      {
        
        def get_sub_node(t, lev, st, prevst, els)
        {
          match (t)
          {
            // TODO: разобраться с prevst
            | TransitionTarget.PseudoState(Junction(nodes = n, state = st)) => 
                def prevst = st ?? prevst;
                //def st = nst ?? j.state =. st;
                create_junc_tree_node(n, [], lev + 1, st, prevst, els)
                             
            | PseudoState(Choice(nodes = n, state = st)) => 
                def prevst = st ?? prevst;
                //def st = nst ?? c.state =. st;
                create_choice_tree_node(n, lev + 1, st, prevst, els)
                
            | PseudoState(Merge(node = JunctionNode(g, a, t, _), state = st)) => 
                def prevst = st ?? prevst;
                //def st = nst ?? m.state =. st;
                DecisionNode.Action(lev, st, a %:: [], prevst, g, get_sub_node(t, lev + 1, st, prevst, els))
                
            | _ => Target(lev, st, [], prevst, t, null)
          }
        }
        
        match (n)
        {
          | JunctionNode(guard = Some(Else), parent = Choice as p) :: (_ :: _) => 
              analyser.AddError(FsmError.ChoiceElseMustBeLast(p));
              null
              
          | [JunctionNode(Some(Else), a, t, Choice as p) as j] => 

              def n = p.nodes.Exclude([j]);
              // if same node not contains other previous decision node
              if (!n.Exists(contains_decision)) 
              {
                analyser.AddError(FsmError.ChoiceElseMustAfterAnotherGuard(p));
                null
              } else
              {
                def a = a %:: [];
                def node = get_sub_node(t, lev, st, prevst, els);
                // if new node is in another state
                def (st, prevst, node) = if (st != node.state)
                                         {
                                           // cache it, process path before, traverse it with new values of state
                                           def prevst = st;
                                           def st = node.state;
                                           (st, prevst, get_sub_node(t, lev, st, prevst, els))
                                         } else (st, prevst, node);
                def st = if (st != prevst) st else null;                         
                def prevst = prevst ?? (t.transition?.From ?? st);
                Else(lev, st, a, prevst, node)
              }

          | JunctionNode(Some(g), a, t, _) :: tail => 
              def a = a %:: [];
              def st = if (st != prevst) st else null;                         
              def prevst = prevst ?? (t.transition?.From ?? st);
              Condition(lev, st, a, prevst, g, get_sub_node(t, lev, st, prevst, els), create_choice_tree_node(tail, lev, st, prevst, els))

            // if no guards or actions there is error
          | JunctionNode(None(), None(), _, Choice as p) :: _ => 
              analyser.AddError(FsmError.EmptyChoice(p));
              null
          
          | [JunctionNode(None(), None(), t, _)] => 
              get_sub_node(t, lev, st, prevst, els)
             // if single action node and not decision, taking sub node collecting action
          | [JunctionNode(None(), Some(), t, Choice(nodes = [_]))] => 
              get_sub_node(t, lev, st, prevst, els)
            // if last action node it is else
          | [JunctionNode(None(), Some(a), t, _)] =>
              def node = get_sub_node(t, lev, st, prevst, els);
                                       // if another pseudostate state 
              def (st, prevst, node) = if (st != node.state)
                                       {
                                         def prevst = st;
                                         def st = node.state;
                                         // cache it, process path before, traverse it with new values of state
                                         (st, prevst, get_sub_node(t, lev, st, prevst, els))
                                       } else (st, prevst, node);
              def st = if (st != prevst) st else null;                         
              def prevst = prevst ?? (t.transition?.From ?? st);
              Else(lev, st, [a], prevst, node)
              
            // if action have other nodes after it
          | JunctionNode(None(), Some(a), _, Choice as p) :: _ => analyser.AddError(FsmError.ChoiceActionMaybeLast(p, a));null
          | JunctionNode(None(), _, _, _) :: _ => null
          | [] => null
        }
      }

      and create_junc_tree_node(n, aa, lev, st, prevst, els)
      {
        
        def get_sub_node(t, aa, lev, st, els)
        {
          match (t)
          {
            | TransitionTarget.PseudoState(Junction(nodes = n, state = st)) => 
                def prevst = st;
                //def st = nst ?? j.state =. st;
                create_junc_tree_node(n, aa, lev + 1, st, prevst, els)
                
            | PseudoState(Choice(nodes = n, state = st)) => 
                def prevst = st;
                //def st = nst ?? c.state =. st;
                create_choice_tree_node(n, lev + 1, st, prevst, els)
                
            | PseudoState(Merge(node = JunctionNode as n, state = st)) => 
                def prevst = st;
                //def st = nst ?? m.state =. st;
                create_junc_tree_node([n], aa, lev + 1, st, prevst, els)
            
            | _ => Target(lev, st, aa.Rev(), prevst, t, null)
          }
        }
        
        match (n)
        {
          | JunctionNode(guard = Some(Else), parent = Junction as p) :: (_ :: _) => 
              analyser.AddError(FsmError.JunctionElseMustBeLast(p));
              null
              
          | [JunctionNode(Some(Else), a, t, Junction as p) as j] => 

              def n = p.nodes.Exclude([j]);
              
              // if same node not contains other previous decision node
              if (!n.Exists(contains_decision)) 
              {
                analyser.AddError(FsmError.JunctionElseMustAfterAnotherGuard(p));
                null
              } else
                Else(lev, st, [], prevst, get_sub_node(t, a %:: aa, lev, st, els))

          | JunctionNode(Some(g), a, t, _) :: [] => 
              Condition(lev, st, [], prevst, g, get_sub_node(t, a %:: aa, lev, st, els), els)
                
          | JunctionNode(Some(g), a, t, _) :: tail => 
              def els = create_junc_tree_node(tail, aa, lev, st, prevst, els);
              Condition(lev, st, [], prevst, g, get_sub_node(t, a %:: aa, lev, st, els), els)
          
            // if no guards or actions there is error
          | JunctionNode(None(), None(), _, Junction as p) :: _ => 
              analyser.AddError(FsmError.EmptyJunction(p));
              null
          | JunctionNode(None(), None(), _, _) :: _ => null
             // if single action node and not decision, taking sub node collecting action
          | [JunctionNode(None(), Some(a), t, Junction(nodes = [_]))] => 
              get_sub_node(t, a :: aa, lev, st, els)
            // if last action node it is else
          | [JunctionNode(None(), Some(a), t, _)] => Else(lev, st, [], prevst, get_sub_node(t, a :: aa , lev, st, els))
            
            // if action have other nodes after it
          | JunctionNode(None(), Some(a), _, Junction as p) :: _ => analyser.AddError(FsmError.JunctionActionMaybeLast(p, a));
              null
          | JunctionNode(None(), Some(), _, _) :: _ => null    
          | [] => null
        }
      }
      
      match (node)
      {
        | PseudoStateNode.Choice(nodes = n, state = st) => create_choice_tree_node(n, 0, st, null, null)
        | Junction(nodes = n, state = st)               => create_junc_tree_node(n, [], 0, st, null, null)
        | _ => null
      }


    }
  }
  
}
