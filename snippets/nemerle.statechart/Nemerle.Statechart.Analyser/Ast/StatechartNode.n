using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;

namespace Nemerle.Statechart
{

  using FsmState;
  
  [Record]  
  public class StateEvent
  {
    [Accessor] evt : TransitionNode.Event;
    public InternalOnly : bool {get;set;}

    public Name : string
    {
      get
      {
        if (evt.name != null) evt.name else "Completion"
      }
    }

    public this(e : TransitionNode.Event)
    {
      evt = e;
    }

    public CompareTo(b : StateEvent) : int
    {
      FsmAnalyser.StringComparator(Name, b.Name)
    }

    public static  @== (a : StateEvent, b : StateEvent) : bool
    {
      FsmAnalyser.StringComparator(a.Name, b.Name) == 0
    }

    public IsCompletion : bool
    {
      get
      {
        evt.name == null
      }
    }
    
    public override ToString() : string
    {
      $"Event$Name"
    }
  }
  
  public variant StateHistory
  {
    | Shallow
        {
          public this(st : FsmState,  hist : StateNode.History, reference : bool = false)
          {
            history = hist;
            state = if (hist.state != null) FsmState.State(hist.state, null, true); else st;
            type = hist.type;
            this.reference = reference;
            default = history.default |> StateTransition.Default(state, this, _);
          }
      
        }
    | Deep
        {
          public this(st : FsmState,  hist : StateNode.History, reference : bool = false)
          {
            history = hist;
            state = if (hist.state != null) FsmState.State(hist.state, null, true); else st;
            type = hist.type;
            this.reference = reference;
            default = history.default |> StateTransition.Default(state, this, _);
          }
      
        }
      
    [Accessor] mutable history : StateNode.History;
    [Accessor] mutable default : option[StateTransition.Default];
    public state : FsmState {get;set;}
    [Accessor] mutable type : HistoryType;
    public reference : bool {get;set;}
          
    public Used : bool {get;set;}
    public Index : int {get;set;}
    
    public this() {}
    public this(hist : StateHistory, clone : bool = false, ncopy : int = 0)
    {
      history = hist.history;
      default = if (clone) hist.default.Map(x => x.Clone(ncopy) :> StateTransition.Default) else hist.default;
      state = hist.state;
      type = hist.type;
      reference = hist.reference;
      Used = hist.Used;
      Index = hist.Index;
    }
    
    public static Create(st : FsmState, hist : TwoOption[StateNode.History], href : bool = false) : TwoOption[StateHistory]
    {      
      hist.Map(Create(st, _, href))
    }

    public static Create(st : FsmState, hist : StateNode.History, href : bool = false) : StateHistory
    {
      match (hist)
      {
        | StateNode.History(type = HistoryType.Deep)    => StateHistory.Deep(st, hist, href)
        | StateNode.History(type = HistoryType.Shallow) => StateHistory.Shallow(st, hist, href)
        | _ => null
      }
    }
    
    public Clone(ncopy : int) : StateHistory
    {
      def newh = match (this)
                 {
                   | Shallow as h => Shallow(h, true, ncopy)
                   | Deep    as h => Deep(h, true, ncopy)
                 }
      newh.clone_for = this;
      newh
    }
    
    [Accessor] mutable clone_for : StateHistory;
    
    public static  @==(a : StateHistory, b : StateHistory) : bool
    {
      | (null, null)  => true
      | (a, null)  => a : object  ==  null
      | (null, b)  => b : object  ==  null
      | (_, _)  => a.Name == b.Name && a.type == b.type && a.state == b.state
    }

    public static @!=(a : StateHistory, b : StateHistory) : bool
    {
            !(@==(a, b))
    }
          
    public BothHistories : bool
    {
      get
      {
        state.BothHistories
      }
    }
    
    public Name : string
    {
      get
      {
        def type = match (type)
                   {
                     | Deep  => "Deep"
                     | Shallow  => "Shallow"
                     | None  => ""
                   }
                  
        if (state.history.IsOne) $"$(state)History" else $"$(state)$(type)History"
      }
    }
    
    public SimpleName : string
    {
      get
      {
        $"$(state)History"
      }
    }
    
    public override ToString() : string
    {
      Name
    }
    
    public SubStatesParticipateInHistory : list[FsmState]
    {
      get
      {
        state.SubStatesParticipateIn(this)
      }
    }

    public UpdateReference(map : StateMap) : void
    {
      when (state.Reference) state = map[state.Name];
      when (history.reference)
      {
        def hist  =  state.GetHistory(this);
        type  =  hist.type;
        default  =  hist.default;
      }
      default.Iter(_.UpdateReference(map));
    }
    
  }
    
  [Record]    
  [DebuggerDisplay("Actions  =  {ActionList}")]
  public variant StateAction : Actions
  {
    | Entry
        {
          
          Name : string
          {
            get
            {
              $"$(state)Entry"
            }
          }
         
          flags : ActionFlags;
          
          
          override ToString() : string
          {
            Name
          }
        
        }
    | Exit
        {
         
          this(act : list[string], st : FsmState)
          {
            base(act, st);
            flags = ActionFlags.None;
          }
          
          Name : string
          {
            get
            {
              $"$(state)Exit"
            }
          }
         
          flags : ActionFlags;
          
          override ToString() : string
          {
            Name
          }
        }
      
    | Do 
        {
          [FlagAccessor (Concurrently,  NoWaitCancel, NotLong, flags = WantSetter)]
          mutable flags : ActivityFlag; // shows that we must run each action concurrently with others
          
          Name : string
          {
            get
            {
              $"DoActivity$(state)"
            }
          }
         
          override ToString() : string
          {
            Name
          }
        }       
        
        public Clone() : StateAction
        {
          def a = actions;
          def st = state;
          match (this)
          {
            | Entry(f) => Entry(a, st, f)
            | Exit(f)  => Exit(a, st, f)
            | Do(f)    => Do(a, st, f)
          }
        }
        
    public mutable state : FsmState;
  }
  
}
