using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{

  using ListUtils;
  using PseudoStateNode;
  /// <summary>
  /// Description of TransitionActions.
  /// </summary>
  public partial variant StateTransition
  {

    public this() 
    {
    }
    
    public this(tran : StateTransition, ncopy : int = 0)
    {
      this();
      From = tran.From;
      guard = tran.guard;
      action = tran.action;
      To = if (ncopy != 0) tran.To.SetCopy(ncopy) else tran.To;
      omit_guard = tran.omit_guard;
      ParentCrossed = tran.ParentCrossed;
      IsCrossed = tran.IsCrossed;
      Source = tran.Source;
      Local = tran.Local;
      ImplicitFrom = tran.ImplicitFrom;
    }
    /// <summary>
    /// State reacts on event of transition (begining of transition line)
    /// </summary>
    public From : FsmState {get;set;}
    mutable guard : option[GuardNode] = None();
    public mutable action : option[Actions] = None();
    public To : TransitionTarget {get;set;}
    public ActualTo : FsmState {get;set;}
    public Path : TransitionPath {get;set;}
    public ImplicitFrom : PseudoStateNode {get;set;}

    public Destination : TransitionDestination {get;set;}

    public PostConditions : TransitionPostConditions
    {
      get
      {
        Destination?.PostConditions
      }
    }
    
    public omit_guard : bool {get;set;}
    
    public Guard : option[GuardNode]
    {
      get
      {
        if (omit_guard) None() else guard
      }
    }
    
    public SourceGuard : option[GuardNode]
    {
      get
      {
        guard
      }
    }
    
    public FriendlyTriggerName : string
    {
      get
      {
        match (this)
        {
          | Transition(TriggerName = null) => "Completion"
          | Transition(TriggerName = trig)
          | Internal(TriggerName = trig) => trig
          | Initial => "Initial"
          | Default => "Default"
          | History => "History"
        }
      }
    }

    public IsCrossed : bool {get;set;}

    public IsCompletion : bool
    {
      get
      {
        FriendlyTriggerName == "Completion"
      }
    }

    name : string
    {
      get
      {
        match (this)
        {
          | Transition(ImplicitFrom = null) => $"Transition$(Source)To$(To)By$(FriendlyTriggerName)"
          | Transition(ImplicitFrom = src)  => $"Transition$(src)To$(To)"
          | Internal(TriggerName = t)       => $"InternalTransition$(From)By$(t)"
          | Initial                         => $"InitialTransitionFrom$(From)To$To"
          | History                         => $"HistoryFrom$(From)To$ToState"
          | Default(history = h)            => 
              match (Destination)
              {
                | History(StateHistory where (state = st)) => $"DefaultTransition$(h)To$st"
                | _ => $"DefaultTransition$(h)To$ActualTo"
              }
        }
      }
    }

    public Name : string
    {
      get
      {
        if (NeedGuardedName) GuardedName else name;
      }
    }

    public GuardedName : string
    {
      get
      {
        match (this)
        {
          | StateTransition where (Guard = Some(g)) => $"$(name)With$g"
          | _ => name
        }
      }
    }

    public static GuardComparer : StateTransition * StateTransition -> int = (g1, g2) => g2.Guard.Compare(g1.Guard, (x, y) => x.CompareTo(y));

    public static Comparer : StateTransition * StateTransition -> int  =  (t1, t2)  => t1.Name.CompareTo(t2.Name);

    public static FullComparer(t1 : StateTransition, t2 : StateTransition) : int
    {
      ret:
        {
        when (Comparer(t1, t2) == 0)
          when (GuardComparer(t1, t2) == 0)
            when (t1.ActionList.Equals(t2.ActionList, _ == _)) ret(0);
        -1
        }
    }
        
    /// <summary>
    /// Transitions from parents crossed by events with this state
    /// </summary>
    public mutable ParentCrossed : list[StateTransition];

    public HistoryTarget : StateHistory
    {
      get
      {
        match (To)
        {
          | TransitionTarget.History(hist)  => hist
          | _  => null
        }
      }
    }

    public ToChoice : list[StateTransition]
    {
      get
      {
        match (Destination)
        {
          | Choice(_, tran, _) => tran
          | _ => []
        }
      }
    }

    public ToState : FsmState
    {
      get
      {
        match (To)
        {
          | TransitionTarget.State(st)  => st
          | _  => null
        }
      }
    }

    /// <summary>
	  /// Concrete State for where transition ends known at compile time
	  /// </summary>
    public AtLeastStaticTo : FsmState
    {
      get
      {
        match (To)
        {
          | Final(st)
          | History(StateHistory where (state = st))
          | PseudoState(PseudoStateNode where (state = st))
          | State(st) => st
          | _ => null
        }
          
      }
    }
    
    /// <summary>
    /// Beginning state from which real executes transition
    /// </summary>
    /// <remarks>
    /// (from From differs, what Source shows current active state from which executes transition, not from beginning on diagram
    /// From determines beginning state from which follow out transition
    /// Source as a rule is nested state or same as From, if From not have sub states
    /// </remarks>
    public Source : FsmState {get;set;}

    public Local : bool {get;set;}
    
    public TraversePath(recursive : bool = false) : void
    {
      when (Path == null)
      {
        Path = TransitionPath(this, From.Analyser);
        Path.Traverse(recursive);
      }
    }

    public PathNode : PathNode
    {
      get
      {
        match (this)
        {
          | Internal(ActionNode = node) => node
          | _ => Path.Path
        }
      }
    }

    public PathNodeRecursive : PathNode
    {
      get
      {
        match (Destination)
        {
          | null => PathNode
          | JunctionNode(node)
          | ChoiceNode(node) => PathNode + node.Paths
          | _ => PathNode
        }
      }
    }
    
    public Trigger : StateEvent
    {
      get
      {
        match (this)
        {
          | Transition(trigger = t)
          | Internal(trigger = t) => t
          | _ => null
        }
      }
    }

    public MaybeInlined : bool
    {
      get
      {
        def path_inlined(p)
        {
          def false_paths(p)
          {
            | PathNode.Entry
            | Exit
            | _ => false
          }
          
          !p.Unsequenced.Exists(false_paths) && p.Actions is []
        }
        
        def path_ok = path_inlined(Path.Path) && Guards is [];
        def targ_ok = match (Destination)
                      {
                        | ForceStateChange => false
                        | JunctionNode(DecisionNode where (Paths = p, Guards = g)) 
                        | ChoiceNode(DecisionNode where (Paths = p, Guards = g)) => path_inlined(p) && g is []
                        | _ => true
                      }
        path_ok && targ_ok
      }
    }
    
    public Guards : list[GuardNode]
    {
      get
      {
        match (To)
        {
          | TransitionTarget.PseudoState(PseudoStateNode.Merge(node = PseudoStateNode.JunctionNode(Guards = g)))
          | TransitionTarget.PseudoState(PseudoStateNode.Junction(Guards = g))
          | TransitionTarget.PseudoState(PseudoStateNode.Choice(Guards = g)) => SourceGuard %:: g
          | _ => SourceGuard %:: []
        }

      }
    }
    
    public UpdateReference(map : StateMap, force  : bool = false) : void
    {
      when (force || (From != null && From.Reference)) From = map[From.Name];
      To = To.UpdateReference(map, force);
    }

    /// !!! mutable
    public TargetTraverse(func : TransitionTarget -> TransitionTarget) : void
    {
       To = To?.Traverse(func)
    }

    public UpdateTargets(old_t : FsmState, new_t : FsmState) : void
    {
      def check_target(tar)
      {
        | TransitionTarget.State(st) as t when (st == old_t) =>
            t.ChangeState(new_t)
        | Qualified(_, State(st) as t) when (st == old_t) => t.ChangeState(new_t)
        | Final(st) as t when (st == old_t) => 
            match (new_t)
            {
              | FsmState.Final as st => t.ChangeState(st)
              | _ => tar
            }
        | PseudoState(node) as t when (node.state == old_t) => t.ChangeNode(node.ChangeState(new_t))
        | _ => tar
      }
      
      when (From == old_t) From = new_t;
      when (Source == old_t) Source = new_t;
      TargetTraverse(check_target)
    }

    public Clone(ncopy : int) : StateTransition
    {
      def tr = match (this)
               {
                 | Default    as tr => Default(tr, ncopy)
                 | History    as tr => History(tr, ncopy)
                 | Initial    as tr => Initial(tr, ncopy)
                 | Internal   as tr => Internal(tr, ncopy)
                 | Transition as tr => Transition(tr, ncopy)
               }
      clones ::= tr;
      tr.cloneFor = this;
      tr
    }
    
    mutable clones : list[StateTransition] = [];
    [Accessor] mutable cloneFor : StateTransition;
    
    public ActionList : list[string]
    {
      get
      {
        action.MapDefault(_.ActionList, [])
      }
    }

    public Actions : list[string]
    {
      get
      {
        match (this)
        {
          | Internal(ActionNode = a) => a.Actions
          | _ => Path.Actions
        }
      }
    }

    public WithinRegion : bool
    {
      get
      {
        match (AtLeastTo, From)
        {
          | (FsmState where (PartOfRegion = Some(r)), FsmState where (PartOfRegion = Some(reg))) => r == reg
          | _ => false
        }
      }
    }    

    public OutOfRegion : bool
    {
      get
      {
        match (AtLeastTo, From)
        {
          | (FsmState where (PartOfRegion = Some(r)), FsmState where (PartOfRegion = Some(reg))) => r != reg
          | (FsmState where (PartOfRegion = Some), FsmState where (PartOfRegion = None))         => true
          | _ => false
        }
      }
    }    
    
    /// <summary>
	  /// State for which at least transition proceed known at compile time
	  /// </summary>
    public AtLeastTo : FsmState
    {
      get
      {
        def check_dest(d)
        {
          | null => match (To)
              {
                | Final(st)
                | History(StateHistory where (state = st))
                | PseudoState(PseudoStateNode where (state = st))
                | State(st) => st
                | _ => null
              }
          | TransitionDestination.State when ActualTo != null => ActualTo
          | State(st) => st
          | Choice(_, _, Some(st))
          | Choice(st, _, _)
          | Fork(st, _)
          | History(StateHistory where (state = st))
          | Region(ConcurrentRegion as st)
          | Join(Join(state = st))
          | Final(state = st)
          | Terminate(PseudoStateNode.Terminate(state = st)) => st
          | CheckAfter(before = st)
          | ForceStateChange(st)
          | SubRegion(state = st) => check_dest(st)
          | _ => null
        }
          
        check_dest(Destination)
      }
    }

    [Accessor]
    public mutable executeCheck : CheckNode = CheckNode.Empty();
    
    public AddCheck(node : CheckNode) : void
    {
      executeCheck += node
    }
    
    public static completion_evt : StateEvent = StateEvent(TransitionNode.Event(0, null));
    
    /// <summary>
	  /// Shows that transition is used
	  /// </summary>
    mutable used : bool;
    
    public Used : bool
    {
      get
      {
        used || clones.Exists(_.Used)
      }
      set
      {
        used = value
      }
    }
    
    public UsedInGenerate : bool
    {
      get
      {
        used
      }
    }
    
    /// <summary>
	  /// Used in Choice of crossed transitions
	  /// </summary>
    public mutable UsedInChoice : bool;
    /// <summary>
	  /// Shows that transition is cross for other
	  /// </summary>
    public mutable CrossFor : bool;
    
    public NotWork : bool {get;set;}

    public override ToString() : string
    {
      Name
    }
   
    public FromRegion : FsmState.ConcurrentSubRegion
    {
      get
      {
        From.PartOfSubRegion.Value
      }
    }
    /// <summary>
		/// Shows what need name with GuardNode out of name crossing
		/// </summary>        
    public NeedGuardedName : bool {get;set;}
    public static NameComparer : StateTransition * StateTransition -> bool = (x, y) => x.Name == y.Name;

  }
  
}
