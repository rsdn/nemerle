using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Diagnostics;
using Nemerle.Statechart;
using System.Reflection;

namespace Nemerle.Statechart
{

  using StateTransition;
  using ListUtils;
  
  [Record]
  [DebuggerDisplay("State  =  {Name}")]
  public partial variant FsmState
  {
    | State  
        {
          this(name : string)
          {
            this(StateNode.State(name), null, true)
          }
        }
        
    | Final
        {
          //this(st : Final, reference : bool = false, ncopy : bool = false)
          //{
          //  base(st, reference, clone);
          //}
          
          this(super : FsmState, reference : bool =  false)
          {
            base();
            this.super_state = super;
            name =  $"$(super_state)Final";
            this.reference = reference;
          }

        }

    | ConcurrentSubRegion
        {
          index : int;
          contained_in : ConcurrentRegion;
      
          this(st : ConcurrentSubRegion, ncopy : int = 0)
          {
            base(st, false, ncopy);
            index = st.index;
            contained_in = st.contained_in;
          }
          
          this(region : ConcurrentRegion, st : StateNode.State, idx : int)
          {
            contained_in = region;
            do_activity = st.do_activity |> StateAction.Do(_.action.ActionList, this, _.flags);
            internal_tran = Internal.Create(this, st.internal_tran);
            entry = st.entry |> StateAction.Entry(_.action.ActionList, this, _.attrib);
            exit = st.exit |> StateAction.Exit(_.action.ActionList, this, _.attrib);
            history = StateHistory.Create(this, st.history);
            transitions = Transition.Create(this, st.transitions);
            initial = st.initial |> Initial(this, _);
            pseudo_states = st.pseudo_states |> PseudoStateNode.Create(_.node, this, null);
            sub_states = st.sub_states |> State(_, this, false);
            sub_states.Iter(x => x.super_state = this);
            index = idx;
            super_state = region;
          }
    
          transitions_to_final : list[StateTransition]
          {
            get
            {
              (LivedSubStatesNested |>< transitions).Filter(x => x.ActualTo is Final)
            }
          }
          
          FinalState : option[FsmState]
          {
            get
            {
              sub_states.Find(_ is Final)
            }
          }
        }
    
    | ConcurrentRegion
        {
          sub_regions : list[ConcurrentSubRegion] = [];
    
          /// <summary>
	        /// Indicates that maybe external transitions from some points of orthogonal state out of region not only completion
	        /// </summary>
          MayTakePlaceForcedTransitions : bool 
          {
            get
            {
              all_transitions_nested.Exists(_.OutOfRegion)
            }
          }
          
          NeedHistorySave : bool {get;set;}
          /// <summary>
		      /// Indicates that maybe transitions from outer states forking control to this orthogonal region
		      /// </summary>
          MayForkingFromOut : bool 
          {
            get
            {
              def is_this(r)
              {
                | null => false
                | _ => match (r.PartOfRegion)
                {
                  | Some(r) when (r == this) => true
                  | _ => false
                }
              }
              
              Analyser.Forks.Exists(x => x.target.Exists(x => is_this(x.ToState)))
            }
          }
          
          this(st : ConcurrentRegion, ncopy : int = 0)
          {
            base(st, false, ncopy);
            sub_regions = st.sub_regions;
            NeedHistorySave = st.NeedHistorySave;
          }
          
          this(st : FsmState, node : StateNode.Region)
          {
            name = node.state.name;
            super_state = st;
            transitions = Transition.Create(this, node.transitions);
            sub_regions = node.regions.MapIndex((x, i) => ConcurrentSubRegion(this, x, i));
            sub_states = sub_regions |> _ : FsmState;
          }

          static get_pattern(reg : list[ConcurrentSubRegion]) : string
          {
            def idx = (reg |> index).Sort(_ - _);
            $<#..$(idx;"")#>; 
          }
          

          RegionExcept(st : list[ConcurrentSubRegion]) : ConcurrentSubRegion
          {
            match (sub_regions.Exclude(st, _ == _))
            {
              | [sub] => sub
              | head :: _ => head
              | _ => null
            }
          }

          RegionsExcept(st : list[FsmState]) : list[ConcurrentSubRegion]
          {
            sub_regions.Filter(x => !x.AllSubStates.Exists(y => st.Exists(y == _)) && !st.Exists(_ == x))
          }
          
          RegionsExcept(st : FsmState) : list[ConcurrentSubRegion]
          {
            sub_regions.Filter(x => !x.AllSubStates.Contains(st) && x != st)
          }

          Joins : list[PseudoStateNode.Join]
          {
            get
            {
              def get_join(t, lst)
              {
                match (t)
                {
                  | StateTransition where (To = TransitionTarget.PseudoState(Join() as j)) => j :: lst
                  | _ => lst
                }
              }
      
              def tran = AllLivedSubStatesNested.Map(x => x.all_transitions.FoldLeft([], get_join)).Flatten();
              tran.RemoveDuplicatesSort((x, y) => x.name.CompareTo(y.name));
            }
          }
          
          HaveJoinTransitions : bool
          {
            get
            {
              !Joins.IsEmpty()
            }
          }
          
          HaveFinalCompletion : bool
          {
            get
            {
              def st = this :: SuperStates;
              HaveFinal && st.Exists(x => !x.completion_transitions.IsEmpty())
            }
          }
          
          
          FinalStates : list[FsmState]
          {
            get
            {
              if (HaveFinal) sub_regions |> FinalState.Value else []
            }
          }
          
        }
   
    | SubMachine
        {
          type : string;
      
          mutable ref_sub_states : list[string] = [];
          mutable proc_events : list[string] = [];
          private mutable scanned : bool;
          mutable inlined : bool;
          mutable inlined_st : FsmState.InlinedSubMachine;
          
          this(st : SubMachine, ncopy : int = 0) 
          {
            base(st, false, ncopy);
            type = st.type;
            ref_sub_states = st.ref_sub_states;
            proc_events = st.proc_events;
            scanned = st.scanned;
            inlined = st.inlined;
          }
          
          this(st : StateNode.State, super : FsmState)
          {
            def (StateNode.State(type = StateType.SubMachine(type = t))) = st;
            name = st.name;
            this.type = t;
            super_state = super;//State(st.SuperState, true);
            transitions = Transition.Create(this, st.transitions);
          }
      
          Scan() : void
          {
            when (!inlined && !scanned)
            {
              def type = Type.GetType(type);
              def st = type.GetField("ContainsStates");
              ref_sub_states = st.GetValue(null) :> list[string];
              def evt = type.GetField("ProcessEvents");
              proc_events = evt.GetValue(null) :> list[string];
              scanned = true;
            }
          }
          
          InitInline() : void
          {
            //def update_pseudo(tar, _, new_st)
            //{
            //  match (tar)
            //  {
            //    | TransitionTarget.PseudoState(node) as t when (node == new_st) => t.ChangeNode(new_st)
            //    | _ => null
            //  }
            //}

            def st = inlined_st.Clone(inlined_st.ncopy + 1); // clone the inline sub machine instance
            do_activity = st.do_activity; // take data from it except transitions to outer world
            internal_tran = st.internal_tran;
            entry = st.entry;
            exit = st.exit;
            history = st.history;
            initial = st.initial;
            sub_states = st.sub_states;
            def tran = st.all_transitions_nested;
            def tran = tran %+ st.AllHistory.FilterValues(_.Default);
            def ren_st = (inlined_st, this) :: (st.AllSubStates |> (CloneFor, _)); // take old and new copy
            //def pst = st.AllPseudoStates |> (CloneFor, _);
            sub_states.Iter(x => x.super_state = this); // change super state to this
            //pst.Iter((ost, nst) => tran.Iter(x => x.TargetTraverse(update_pseudo(_, ost, nst)))); // update pseudo states in this sub machine
            ren_st.Iter((ost, nst) => tran.Iter(x => x.UpdateTargets(ost, nst))); // change targets according to rename in new location
            st.AllSubStates.Iter(x => x.history.Iter(x => x.reference = true)); // history must point to real state history
            st.AllSubStates.Iter(_.RenameState()); // actions renaming state
            pseudo_states = st.pseudo_states;
            //UpdateReference(Analyser.Statemap, true);
            Analyser.UpdateStateMap(); // updates state map
          }
          
          override UpdateReference(map : StateMap, force : bool = false) : void
          {
            base.UpdateReference(map, force);
            when (!inlined)
            {
              def fsm = Analyser.States.FilterType();
              match (fsm.Find(x => x.type == type))
              {
                | Some(InlinedSubMachine as f) => 
                    inlined = true;
                    inlined_st = f;
                    
                | _ => ()
              }
            }
          }

        }
    
    | InlinedSubMachine
        {
          type : string;
          [RecordIgnore] mutable ncopy : int;
      
          this(st : InlinedSubMachine, copy : int = 0) 
          {
            base(st, false, copy);
            st.ncopy = copy;
            this.ncopy = copy;
            type = st.type;
          }
          
          this(st : StateNode.State, super : FsmState, reference : bool = false)
          {
            base(st, super, reference);
            def (StateNode.State(type = StateType.InlinedSubMachine(type = t))) = st;
            this.type = t;
          }
        
        }  
  }

}
