using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Extensions;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Diagnostics;

namespace Nemerle.Statechart
{  
  
  public partial variant StateTransition
  {
    | Default
        {
          default : StateNode.Default;
          history : StateHistory;
          
          this(tran : Default, ncopy : int = 0)
          {
            base(tran, ncopy);
            default = tran.default;
            history = tran.history;
          }
          
          this(st : FsmState, hist : StateHistory, default : StateNode.Default)
          {
            this.default = default;
            history = hist;
            action = default.action;
            From = st;
            Source = From;
            To = TransitionTarget.State(this, FsmState.State(default.target, null, true))
          }
        }
        
    | Initial 
        {
          initial : StateNode.Initial;
          
          this(tran : Initial, ncopy : int = 0)
          {
            base(tran, ncopy);
            initial = tran.initial;
          }
          
          this(st : FsmState, init : StateNode.Initial)
          {
            From = st;
            Source = From;
            guard = init.guard;
            action = init.action;
            To =  TransitionTarget.Create(st, this, init.to);
          }
          
          this(from : FsmState, to : FsmState)
          {
            From = from;
            Source = From;
            To = TransitionTarget.State(this, to);
          }
          
        }
        
    [DebuggerDisplay("Transition  =  {Name}")]
    | Transition 
        {
          trigger : StateEvent;
          node : StateNode.Transition;
          
          TriggerName : string
          {
            get
            {
              trigger.Name
            }
          }

          static Create(st : FsmState, tr : list[StateNode.Transition]) : list[StateTransition]
          { 
            $[Transition(st, StateEvent(y), x) : StateTransition, x in tr, y in x.evt]
          }

          this(tran : Transition, ncopy : int = 0)
          {
            base(tran, ncopy);
            trigger = tran.trigger;
            node = tran.node;
          }
          
          this(st : FsmState, evt : StateEvent, tr : StateNode.Transition)
          {
            From = st;
            Source = From;
            this.trigger = evt;
            node = tr;
            guard = tr.guard;
            action = tr.action;
            To = TransitionTarget.Create(st, this, tr.to)
          }

          this(st : FsmState, to : FsmState, source : PseudoStateNode)
          {
            From = st;
            Source = From;
            ImplicitFrom = source;
            To = TransitionTarget.State(this, to);
          }
          
          this(st : FsmState, trigger : StateEvent, to : TransitionTarget, source : PseudoStateNode)
          {
            From = st;
            this.trigger = trigger;
            Source = From;
            ImplicitFrom = source;
            To = to;
          }
          
          this(st : FsmState, tr : Transition)
          {
            this(tr);
            Source = st;
          }
        }
        
    | Internal
        {
          trigger : StateEvent;
          node : StateNode.InternalTransition;
          
          ActionNode : PathNode
          {
            get
            {
              PathNode.Action(action.Value)
            }
          }

          TriggerName : string
          {
            get
            {
              trigger.Name
            }
          }

          override ToString() : string
          {
            Name
          }

          this(tran : Internal, ncopy : int = 0)
          {
            base(tran, ncopy);
            trigger = tran.trigger;
            node = tran.node;
          }
          
          this(st : FsmState, tr : Internal)
          {
            this(tr);
            Source = st;
          }
          
          this(trigger : StateEvent, tran : StateNode.InternalTransition, from : FsmState) 
          {
            this.trigger = trigger;
            node = tran;
            action = Some(node.action);
            guard = node.guard;
            From = from;
            Source = from;
          }

          static Create(st : FsmState, tr : list[StateNode.InternalTransition]) : list[StateTransition]
          {
              $[Internal(StateEvent(y), x, st) : StateTransition, x in tr, y in x.evt]
          }
          
        }
        
    | History
        {
          history : StateHistory;
          
          this(tran : History, ncopy : int = 0)
          {
            base(tran, ncopy);
            history = tran.history;
          }
          
          this(hist : StateHistory, st : FsmState, to : FsmState)
          {
            From = st;
            history = hist;
            Source = From;
            To = TransitionTarget.State(this, to);
          }
        
        }
  }
    
}
