using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  using PseudoStateAstNode;
  using FsmState;
  using PseudoStateNode;
  
  [Record]
  public variant TransitionTarget
  {
    | History 
        {
          mutable history : StateHistory;
         
          override UpdateReference(map : StateMap) : void
          {
            when (history.reference) history = map[history.state.Name].GetHistory(history);
          }

          override ToString() : string
          {
            $"$(history.state)History"
          }
          
          this(tran : StateTransition, st : FsmState, type : TargetType.History)
          {
            base(tran);
            history = StateHistory.Create(st, type.history, true)
          }
        }
    | Final
        {
          mutable state : FsmState.Final;

          override ToString() : string
          {
            $"$(state)"
          }
          
          this(tran : StateTransition)
          {
            base(tran)
          }
          
          public override UpdateReference(map : StateMap) : void
          {
            when (state != null && state.Reference) state = map[state.NativeName] :> FsmState.Final;
          }
        }
    | PseudoState
        {
          mutable node : PseudoStateNode;

          this(tran : StateTransition, st : FsmState, node : TargetType.PseudoState)
          {
            def init_target(t)
            {
              t.transition = tran
            }
            
            base(tran);
            this.node = PseudoStateNode.Create(node.node, st);
            Traverse(init_target)
          }

          override UpdateReference(map : StateMap) : void
          {
            node.UpdateReference(map);
          }
          
          override ToString() : string
          {
            node.ToString()
          }
        }
    | State 
        {
          mutable state : FsmState;
          
          override UpdateReference(map : StateMap) : void
          {
            when (state.Reference) state = map[state.NativeName]
          }

          Name : string
          {
            get
            {
              state.Name
            }
          }
          
          override ToString() : string
          {
            state.ToString();
          }
          
          this(tran : StateTransition, type : TargetType.State)
          {
            base(tran);
            state = FsmState.State(type.state, null, true);
          }
          
        }
    
    | Named
        {
          mutable state : FsmState;
          name : string;

          override UpdateReference(map : StateMap) : void
          {
            when (state != null && state.Reference) state = map[state.NativeName];
          }

          Name : string
          {
            get
            {
              $"Named$state.$name"
            }
          }
          
          override ToString() : string
          {
            Name
          }
          
          this(tran : StateTransition, st : FsmState, type : TargetType.Named)
          {
            base(tran);
            state = CreateState(type.parent, st);
            name = type.name;
          }

        }
    
    | Qualified 
        {
          mutable parent : string;
          target : TransitionTarget;
      
          override UpdateReference(map : StateMap) : void
          {
            match (target)
            {
              | State(st) as t when (st.Reference) => t.state = map[$"$parent.$(st.NativeName)"]
              | _ => target.UpdateReference(map)
            }
          }
      
          override ToString() : string
          {
            $"$parent.$target"
          }
      
        }
    | SubMachine 
        {
          mutable machine : FsmState.SubMachine;
          state : string;

          override UpdateReference(map : StateMap) : void
          {
            match (machine)
            {
              | FsmState where (Reference = true, Name = n) => machine = map[n] :> FsmState.SubMachine;
              | _ => ()
            }
          }
      
          override ToString() : string
          {
            $"$machine.$state"
          }
      
        }
    
    public static Create(state : FsmState, tran : StateTransition, target : TargetType) : TransitionTarget
    {
      match (target)
      {
        | PseudoState as t => PseudoState(tran, state, t)
        | History as t => History(tran, state, t)
        | Final => Final(tran)
        | State as t => State(tran, t)
        | Named as t => Named(tran, state, t)
        | SubMachine(m, s) => SubMachine(tran, SubMachine(m, null), s)
        | Qualified(parent = p, target = t) => Qualified(tran, p, Create(state, tran, t))
      }
    }
    
    public CompareTo(target : TransitionTarget) : int
    {
      CompareTo(this, target)
    }

    public static CompareTo(t1 : TransitionTarget, target : TransitionTarget) : int
    {
      | (History(h1), History(h2)) => FsmAnalyser.StringComparator(h1.Name, h2.Name)
      | (Final(st1), Final(st2)) => FsmAnalyser.StringComparator(st1.Name, st2.Name)
      | (PseudoState(n1), PseudoState(n2)) => FsmAnalyser.StringComparator(n1.ToString(), n2.ToString())
      | (State(st1), State(st2)) => FsmAnalyser.StringComparator(st1.Name, st2.Name)
      | (SubMachine(m, s), SubMachine(m2, s2)) when (m == m2) => FsmAnalyser.StringComparator(s, s2)
      | _ => -1
    }

    public static @==(a : TransitionTarget, b : TransitionTarget) : bool
    {
      | (History(h1), History(h2))              => h1 == h2
      | (State(st1), State(st2))
      | (Final(st1), Final(st2))               => st1 == st2
      | (PseudoState(n1), PseudoState(n2))     => n1 == n2
      | (Named(st, n), Named(st2, n2))         => st == st2 && n == n2
      | (Qualified(p, t), Qualified(p2, t2))   => FsmAnalyser.StrEq(p, p2) && t == t2
      | (SubMachine(m, s), SubMachine(m2, s2)) => m == m2 && s == s2
      | _ => false
    }
    
    public PartOfSubRegion : option[ConcurrentSubRegion]
    {
      get
      {
        match (ToState)
        {
          | null => None()
          | ConcurrentSubRegion as st => Some(st)
          | st => st.PartOfSubRegion
        }
      }
    }
    
    public ToState : FsmState
    {
      get
      {
        match (this)
        {
          | PseudoState(PseudoStateNode where (state = st))
          | History(StateHistory where (state = st))
          | Final(state = st)
          | SubMachine(st, _)
          | State(state = st)  => st
          | Named => null
          | Qualified(_, t) => t.ToState
        }
      }
    }
    
    public Clone(ncopy : int = 0) : TransitionTarget
    {
      def tar = match (this)
      {
        | PseudoState(node = n, transition = t)               => PseudoState(t, n.Clone(ncopy))
        | History(transition = t, history = h)                => History(t, h)
        | Final(state = st, transition = t)                   => Final(t, st)
        | SubMachine(machine = m, state = st, transition = t) => SubMachine(t, m, st)
        | State(state = st, transition = t)                   => State(t, st)
        | Named(state = st, transition = t, name = n)         => Named(t, st, n)
        | Qualified(transition = tr, parent = p, target = t)  => Qualified(tr, p, t.Clone(ncopy))
      }
      tar.clone_for = this;
      tar
    }
    
    public mutable transition : StateTransition;
    
    public Traverse(func : TransitionTarget -> void) : void
    {
      def check_change(t)
      {
        func(t)
      }
      
      def check_node(n)
      {
        check_change(n.to);
        n.to.Traverse(func)
      }
      
      and traverse(n)
      {
        n.Iter(check_node)
      }
      
      check_change(this);
      match (this)
      {
        | PseudoState(Merge(node = n)) => check_node(n)
        | PseudoState(Junction(nodes = n))
        | PseudoState(Choice(nodes = n)) => traverse(n)
        | _ => ()

      }
    }
    
    [RecordIgnore] 
    [Accessor]
    mutable clone_for : TransitionTarget;
    
    public virtual UpdateReference(_ : StateMap) : void
    {
    }
     
  }
  

}
