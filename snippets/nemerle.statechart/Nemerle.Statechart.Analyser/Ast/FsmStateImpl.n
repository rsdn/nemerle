using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  using StateTransition;
  using PseudoStateNode;
  /// <summary>
  /// Description of FsmStateImpl.
  /// </summary>
  public partial variant FsmState
  {
    public override ToString() : string {Name}

    public virtual UpdateReference(map : StateMap, force : bool = false) : void
    {
      Analyser = map.Analyser;
      when (is_new) map.Add(this);
      when (super_state != null)
        when (super_state.Reference || force)
        {
          when (super_state.AstName == null) super_state.Name = TopStateName;
          super_state = map[super_state.Name];
        }
      initial.Iter(_.UpdateReference(map, force));
      transitions.Iter(_.UpdateReference(map, force));
      history.Iter(_.UpdateReference(map, force));
      // !!! mutable
      pseudo_states = pseudo_states.Map(_.UpdateReference(map, force))
    }

    public FormatName() : void
    {
      def name = name.SplitToList('.');
      this.name = name.Last();
    }
    
    public DefineInitial(st : FsmState) : void
    {
      match (this)
      {
        | ConcurrentSubRegion(contained_in = r) => initial ::= Initial(r, st)
        | _ => initial ::= Initial(this, st)
      }
    }

    public AddSubState(st : FsmState) : void
    {
      st.Analyser = Analyser;
      when (!sub_states.Exists(x => x.Name == st.Name)) sub_states = sub_states + [st];
    }
    
    public DefineTransition(tr : StateTransition) : void
    {
      | Transition as tr => transitions ::= Transition(this, tr)
      | Internal   as tr => internal_tran ::= Internal(this, tr)
      | Initial    as tr => initial ::= tr
      | _ => ()
    }

    public Clone(ncopy : int) : FsmState
    {
      def st = match (this)
               {
                 | State               as st => State(st, false, ncopy)
                 | ConcurrentRegion    as st => ConcurrentRegion(st, ncopy)
                 | ConcurrentSubRegion as st => ConcurrentSubRegion(st, ncopy)
                 | InlinedSubMachine   as st => InlinedSubMachine(st, ncopy)
                 | SubMachine          as st => SubMachine(st, ncopy)
                 | Final               as st => Final(st, false, ncopy)
               }
               
      clones ::= st;
      st.CopyNum = ncopy;
      st.cloneFor = this;
      //st.FindCopyName();
      st
    }
    
    mutable clones : list[FsmState] = [];
    
    //FindCopyName() : void
    //{
      
    //  if (Analyser.Statemap.Contains(Name)) FindCopyName(); else ()
    //}
    
    public DefineTransitions(tr : list[StateTransition]) : void
    {
      tr.Iter(DefineTransition)
    }

    public DefineHistoryPath(st : string, nodes : HistoryPath) : void
    {
      history_paths ::= (st, nodes)
    }

    public DefineHistoryPathRecurse(st : string, nodes : HistoryPath) : void
    {
      def reg = this is ConcurrentRegion;
      when (Lived || reg) DefineHistoryPath(st, nodes);
      when (!reg) sub_states.Iter(x  => x.DefineHistoryPathRecurse(st, nodes))
    }

    public DeleteTransitions(tr : list[StateTransition]) : void
    {
      def (tran, other) = tr.PartitionType();
      def (int_tran, other) = other.PartitionType();
      def (init, _) = other.PartitionType();
      initial = initial.Exclude(init, (x, y) => StateTransition.FullComparer(x, y) == 0);
      internal_tran = internal_tran.Exclude(int_tran, (x, y) => StateTransition.FullComparer(x, y) == 0);
      transitions = transitions.Exclude(tran, (x, y) => StateTransition.FullComparer(x, y) == 0)
    }

    public DeleteTransitionsNested(tr : list[StateTransition]) : void
    {
      DeleteTransitions(tr);
      AllSubStates.Iter(x => x.DeleteTransitionsNested(tr));
    }
    
    public TraverseTransitions() : void
    {
      paths = TransitionPaths(this);
      paths.TraverseTransitions(true);
    }
    
    public CreatePathFromOut() : void
    {
      path_from_out = StateTransition.Initial(Analyser.TopState, this);
      path_from_out.TraversePath();
    }

    public mutable super_state_cross_transitions : list[StateTransition] = [];
    
    public this()
    {
      is_new = true;
    }

    public this(st : StateNode.State, super : FsmState, analyser : FsmAnalyser, reference : bool = false)
    {
      this();
      this.Analyser = analyser;
      Create(st, super, reference)
    }

    Create(st : StateNode.State, super : FsmState, reference : bool = false) : void
    {
      this.Analyser = Analyser ?? super?.Analyser;
      state = st;
      source_pos = st.pos;
      Name = st.name;
      this.reference = reference || state.reference;
      
      def st_from_node(n)
      {
        | StateNode.State(type = SubMachine) => SubMachine(n, this)
        | State(type = InlinedSubMachine)    => InlinedSubMachine(n, this)
        | _                                  => FsmState.State(n, this, false)
      }
      
      when (!Reference)
      {
        do_activity = st.do_activity |> StateAction.Do(_.action.ActionList, this, _.flags);
        internal_tran = Internal.Create(this, st.internal_tran);
        entry = st.entry |> StateAction.Entry(_.action.ActionList, this, _.attrib);
        exit = st.exit |> StateAction.Exit(_.action.ActionList, this, _.attrib);
        history = StateHistory.Create(this, st.history);
        transitions = Transition.Create(this, st.transitions);
        initial = st.initial |> Initial(this, _);
        def (regs, subst) = st.sub_states.Partition(x => x.regions.HasValue);
        def regs = regs |> ConcurrentRegion(this, _.regions.Value); // TODO: сделать с помощью st_from_node
        super_state = super;
        def subst = (subst |> st_from_node(_)) + regs;
        sub_states = subst.Sort((x, y) => x.source_pos - y.source_pos);
        pseudo_states = st.pseudo_states |> PseudoStateNode.Create(_.node, this, null)
      }
    }
    
    public this(st : StateNode.State, super : FsmState, reference : bool = false)
    {
      this();
      Create(st, super, reference)
    }
    
    public this(st : FsmState, reference : bool = false, ncopy : int = 0)
    {
      this();
      this.reference = reference;
      name = st.name;
      Analyser = st.Analyser;
      do_activity = st.do_activity;
      internal_tran = if (ncopy != 0) st.internal_tran |> Clone(ncopy) else st.internal_tran;
      entry = st.entry |> Clone() :> StateAction.Entry;
      exit = st.exit |> Clone() :> StateAction.Exit;
      history =  if (ncopy != 0) st.history |> Clone(ncopy) else st.history;
      history.Iter(x => x.state = this);
      transitions = if (ncopy != 0) st.transitions |> Clone(ncopy) else st.transitions;
      initial = if (ncopy != 0) st.initial |> Clone(ncopy) else st.initial;
      super_state = st.SuperState;
      sub_states = if (ncopy != 0) st.SubStates |> Clone(ncopy) else st.SubStates;
      sub_states.Iter(x => x.super_state = this);
      pseudo_states = if (ncopy != 0) st.pseudo_states |> SetCopy(ncopy) else st.pseudo_states
    }
    
    public mutable do_activity : option[StateAction.Do];
      
    [Accessor] mutable sub_states : list[FsmState] = [];
    public mutable history : TwoOption[StateHistory] = TwoOption.None();
    public mutable pseudo_states : list[PseudoStateNode] = [];
    
    [Accessor] mutable history_paths : list[string * HistoryPath] = []; // paths from outer history
    
    [Accessor] mutable path_from_out : StateTransition.Initial;
    mutable state : StateNode.State;
    
    [Accessor] mutable initial : list[StateTransition] = [];
    public mutable entry : list[StateAction.Entry] = [];
    public mutable exit  : list[StateAction.Exit] = [];
    [Accessor] mutable internal_tran : list[StateTransition] = [];
    [Accessor] mutable transitions : list[StateTransition] = [];
    [Accessor] mutable super_state  : FsmState;
    public CopyNum : int {get;set;}
    public paths : TransitionPaths {get;set;}
    mutable lived : bool;
    public Num : int {get;set;}
    
    /// <summary>
    /// Indicates what fsm lived in this state and it not only composite for others
    /// </summary>
    public Lived : bool 
    {
      get
      {
        lived || clones.Exists(_.Lived)
      }
      set
      {
       
        lived = value;
      }
    }
    
    public UsedInGenerate : bool
    {
      get
      {
        lived || !AllLivedSubStates.IsEmpty()
      }
    }
    
    /// <summary>
    /// Hierarchy position
    /// </summary>
    public hierarchy_pos : int {get;set;}
    [Accessor] mutable source_pos : int;
    [Accessor] mutable cloneFor : FsmState;
    
    public IsTopState : bool
    {
      get
      {
        Name == TopStateName
      }
    }
    
    public static TopStateName  =  "[Top]";

    [Accessor]
    mutable reference : bool;
    mutable name : string;

    public mutable is_new : bool;
    public Analyser : FsmAnalyser {get;set;}

    public Id : IdType {get;set;}

    CopyName : string
    {
      get
      {
        if (CopyNum == 0) "" else $"$CopyNum"
      }
    }
    
    public Name : string
    {
      get
      {
        match (this)
        {
          | Final                       => $"$(super_state)Final$CopyName"
          | State
          | ConcurrentRegion
          | ConcurrentSubRegion         => NativeName
          | SubMachine(name = n)        => $"SubMachine$n$CopyName"
          | InlinedSubMachine(name = n) => $"InlinedSubMachine$n$CopyName"
        }
      }
      set
      {
        name = value;
      }
    }

    public OriginalName : string
    {
      get
      {
        match (this)
        {
          | ConcurrentSubRegion(index = idx, contained_in = r) => $"$(r)SubRegion$idx"
          | _ => if (name != null) name else AstName
        }
      }
    }
    
    public NativeName : string
    {
      get
      {
        $"$OriginalName$CopyName"
      }
    }
    
    public join_completion_transitions : list[StateTransition]
    {
      get
      {
        completion_transitions.Filter(x => x.To is TransitionTarget.PseudoState(Join()))
      }
    }
    
    public AstName : string
    {
      get
      {
        state.name
      }
    }

    /// <summary>
	  /// Events for which reacts state
	  /// </summary>
    public events : list[StateEvent]
    {
      get
      {
        def evts = work_transitions |> Trigger;
        evts.RemoveDuplicatesSort(_.CompareTo(_))
      }
    }

    /// <summary>
	  /// Events for which reacts state or nested states
	  /// </summary>    
    public events_nested : list[StateEvent]
    {
      get
      {
        def evts = events + (AllLivedSubStates |>< events);
        evts.RemoveDuplicatesSort(_.CompareTo(_));
      }
    }
        
    public SuperStatesInclude : list[FsmState]
    {
      get
      {
        this :: SuperStates
      }
    }

    public PartOfStateMachine : bool
    {
      get
      {
        SuperStatesInclude.Exists(x => x is SubMachine(inlined = true))
      }
    }
    
    public AllHistory : list[StateHistory]
    {
      get
      {
        AllSubStates |>< history.Value
      }
    }
    
    public PartOfSubRegion : option[ConcurrentSubRegion]
    {
      get
      {
        SuperStatesInclude.FindType()[0]
      }
    }

    public PartOfSubRegions : list[ConcurrentSubRegion]
    {
      get
      {
        SuperStatesInclude.FilterType()
      }
    }

    public PartOfTopRegion : option[ConcurrentRegion]
    {
      get
      {
        match (PartOfRegions)
        {
          | [] => None()
          | lst => Some(lst.Last())
        }
      }
    }
   
    public PartOfRegion : option[ConcurrentRegion]
    {
      get
      {
        SuperStatesInclude.FindType()[0]
      }
    }
    
    public PartOfRegions : list[ConcurrentRegion]
    {
      get
      {
        SuperStatesInclude.FilterType()
      }
    }

    public GetPathFrom(st : FsmState) : list[FsmState]
    {
      def super = SuperStatesInclude.FirstElems(x => x.Name == st.Name);
      st :: super.Rev()
    }
    
    public PathName : list[FsmState]
    {
      get
      {
        (this :: SuperStates.SplitLast()[1]).Rev()
      }
    }
    
    public static NameComparer : FsmState * FsmState -> int = (x, y) => string.Compare(x.Name, y.Name);
    
    public PartOfRegionsOf(st : FsmState) : list[ConcurrentRegion]
    {
      SuperStatesInclude.FirstElems(_ == st).FilterType();
    }
    
    public RenameState() : void
    {
      entry.Iter(x => x.state = this);
      exit.Iter(x => x.state = this);
      history.Iter(x => x.state = this)
    }
    
    public UpdateFromTarget(target : TransitionTarget) : void
    {
      def update_pseudo(op, p)
      {
        | (Choice(name = on), Choice(name = n))
        | (Junction(name = on), Junction(name = n))
        | (Join(name = on), Join(name = n)) 
        | (Merge(name = on), Merge(name = n)) when (on == n) => p
        | (Terminate(state = on), Terminate(state = n)) when (on.Name == n.Name) => p
        | _ => op
      }
      
      match (target)
      {
        | History(h)       => history = history.Map(x => if (x == h) h else x)
        | Final(f)         => sub_states = sub_states.Map(x => if (f.Name == x.Name) f else x)
        | PseudoState(p)   => pseudo_states = pseudo_states.Map(update_pseudo(_, p))
        | _                => ()
      }
    }
  }
}
