using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;

namespace Nemerle.Statechart
{

  using StateTransition;
  using ListUtils;

  public partial class FsmAnalyser
  {

    InitStateMap() : void
    {
      def CheckAddFinalState(st)
      {   
        def is_top(st)
        {
          def super = st.SuperState; 
          // check if state is top or state is sub of top and don't have transitions
          super == null || (super.SuperState == null && super.this_transitions.IsEmpty())
        }
        
        def check_target(t, tran)
        {
          | (TransitionTarget.Final as t, _) when (is_top(st))=> 
              def term = PseudoStateNode.Terminate(TopState, 0);
              TopState.pseudo_states ::= term;
              TransitionTarget.PseudoState(t.transition, term)
          | (Final as t, Initial) with super = st
          | (Final as t, _) with super = st.SuperState =>
              def fst = FsmState.Final(super, true);
              super.AddSubState(fst);t.ChangeState(fst);
          | (t, _) => t
        }
      
        st.all_transitions_with_init.Iter(x => x.TargetTraverse(check_target(_, x)))
      }
      
      InitStatechart();
      UpdateStateMap(); // first update state map
      concurrent_states = states.Filter(_ is FsmState.ConcurrentSubRegion);
      states.Iter(_.UpdateReference(statemap));
      states.Iter(CheckAddFinalState); // check to add final state
      UpdateStateMap(); // second update state map
      CreateHistoryStates();
      when (statemap.HaveErrors)
      {
        statemap.Errors.Iter(x => AddError(x));
        throw FsmErrorException()
      }
      RenameDuplicates();
    }

    public UpdateStateMap() : void
    {
      statemap.Init(TopState); // initialize the state map
      InitStates();
      states.Iter(_.UpdateReference(statemap));
      StateId.CreateMasks(this);
    }
    
    InitStates() : void
    {
      def init_states(st, pos)
      {
        st.hierarchy_pos = pos;
        st.SubStates.Iter(init_states(_, pos + 1)); // init sub states
      }
      init_states(TopState, 0); // init state map
      states = statemap.States.NToList();
    }
    
    RenameDuplicates() : void
    {
      def do_rename(n, st)
      {
        st.CopyNum = n;
        st.is_new = true;
        st.UpdateReference(statemap);
      }
      
      def rename_group(st)
      {
        def (head :: _) = st;
        statemap.Rem(head);
        st.IterI(do_rename);
      }
      
      def dups = states.Duplicates(FsmState.NameComparer);
      def dups = dups.Group(FsmState.NameComparer);
      dups.Iter(rename_group);
    }
    
    CreateHistoryStates() : void
    {
      // check history duplicates in state
      def check_dup_history(st)
      {
        match (st.history)
        {
          // duplicate variants
          | TwoOption.Two(StateHistory.Deep, StateHistory.Deep)
          | Two(StateHistory.Shallow, StateHistory.Shallow)  =>
              AddError(FsmError.DuplicateHistory(st, st.history.Value.First()));
          | _  => ()
        }
      }

      def check_exit_actions(st)
      {
        | StateHistory where (state = FsmState where (exit = []) as st) =>
            st.exit = [StateAction.Exit([], st)]
        | _ => ()
      }

      def history = states.Filter(x => x.history.HasValue);
      history.Iter(check_dup_history);
      history_states =  history |>< history.Value;
      def group = history_states.Group((x, y) => string.Compare(x.state.Name, y.state.Name));
      group.IterI((i, x) => x.Iter(x => x.Index = i));
      history_states.Iter(check_exit_actions);
    }

    InitEvents() : void
    {
      def int_evts =  states |>< InternalTran |> Trigger;
      def evts =  states |>< Transitions |> Trigger;
      def evts = evts.Filter(x  => x.Name != null);
      def int_tran_evt = int_evts.RemoveDuplicatesSort(_.CompareTo(_));
      def tran_evt = evts.RemoveDuplicatesSort(_.CompareTo(_));
      def int_tran_evt =  int_tran_evt.Exclude(tran_evt, _  ==  _);
      int_tran_evt.Iter(x  => x.InternalOnly = true);
      def evts =  (int_tran_evt + tran_evt) |> (Name, _);
      events_map = Map(evts);
      events = events_map.Keys()
    }

    nodes_eq : ((string * PathNode) * (string * PathNode)) -> bool = (x, y) => PathNode.Equals(x[1], y[1]);
    nodes_cmp : ((string * PathNode) * (string * PathNode)) -> int = (x, y) => PathNode.Compare(x[1], y[1]);

    CreateHistory() : void
    {
      def sub =  history_states |> (_, state, SubStatesParticipateInHistory);  // get all substates participate in history
      def paths =  $[HistoryPath(par, st, h, this), (h, par, s) in sub, st in s, !(st is FsmState.Final)]; // create history paths
      paths.Iter(_.CreatePath());
      def paths = paths.Filter(x  => !x.IsDefault);
      def paths = paths.RemoveDuplicatesSort((x, y) => x.Name.CompareTo(y.Name));
      history_paths = paths
    }

    CreateActions() : void
    {
      def check_do(act)
      {
        | StateAction.Do(actions = [_], Concurrently = true) => AddWarning(FsmWarning.NoConcurrentActivity(act));
            act.Concurrently = false
        | _ => ()
      }

      def acts =  trans_paths |>< Actions;
      def int_acts =  internal_transitions.Values() |>< Actions;
      def acts = acts + int_acts;
      actions = acts.RemoveDuplicatesSort((x, y) => x.CompareTo(y));
      do_activities = states.FilterValues(_.do_activity);
      do_activities.Iter(check_do);
      def tr = all_transitions |> PathNodeRecursive;
      action_node = PathNode.Sequence(tr)
    }

    CreateConcurrentRegion() : void
    {
      def regs = states.FilterType();
      def (used,not_used) = regs.Partition(_.LivedNested);
      not_used.Iter(x => AddWarning(FsmWarning.RegionNotUsed(x)));
      regions = used;
    }
    
    CreateSubMachines() : void
    {
      def fsm = states.FilterType();
      def st = fsm.Filter(_ is FsmState.SubMachine(inlined = true));
      st.Iter(_.InitInline());
      //InitStates();
    }
  }
}
