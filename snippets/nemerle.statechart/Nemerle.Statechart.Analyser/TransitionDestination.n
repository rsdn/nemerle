using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  using FsmState;  
  /// <summary>
  /// Description of TransitionDestination.
  /// </summary>
  [Record]
  public variant TransitionDestination
  {
    | Unknown
    | History {state : StateHistory;}
    | State {state : FsmState;}
    | NoStateChange
    | Choice 
        {
          state : FsmState;
          choice : list[StateTransition];
          else_state : option[FsmState] = None();
        }
    | Terminate {node : PseudoStateNode.Terminate;}
    | Region {reg : ConcurrentRegion;}
    | SubRegion {reg : ConcurrentSubRegion;state : TransitionDestination;from : FsmState;}
    | Fork {reg : ConcurrentRegion;sub_tran : list[StateTransition];}
    | Join {join : PseudoStateNode.Join;}
    | Final {state : FsmState.Final;sub_region : ConcurrentSubRegion;region : ConcurrentRegion;completion : list[StateTransition];}
    | ForceStateChange {nested : TransitionDestination;}
    | HistoryRestore {history : StateHistory;}
    | EventSend {st : FsmState;evt : StateEvent;}
    | CheckAfter {check : CheckNode;before : TransitionDestination;nested : TransitionDestination;}
    | JoinedTransition {join : PseudoStateNode.Join;transition : StateTransition;}
    | SubMachine {machine : FsmState.SubMachine;state : string;}
    | JunctionNode {tree : DecisionNode;}
    | ChoiceNode {tree : DecisionNode;}
    
    /// <summary>
	  /// Concrete State for where transition ends known at compile time
	  /// </summary>
    public ConcreteTo : FsmState
    {
      get
      {
        def check_dest(d)
        {
          | null => null
          | TransitionDestination.State(st)
          | Fork(st, _)
          | Region(ConcurrentRegion as st)
          | Join(Join(state = st))
          | Final(state = st)
          | Terminate(PseudoStateNode.Terminate(state = st)) => st
          | ForceStateChange(st)
          | SubRegion(state = st) => check_dest(st)
          | _ => null
        }
          
        check_dest(this)
      }
    }
    
    public ToState : FsmState
    {
      get
      {
        match (this)
        {
          | State(st)
          | History(StateHistory where (state = st))
          | Terminate(PseudoStateNode where (state = st))
          | Region(st)
          | SubRegion(reg = st)
          | Fork(reg = st)
          | Join(PseudoStateNode where (state = st))
          | Final(state = st)
          | Choice(st, _, _) => st
          | ForceStateChange(nest) => nest.ToState
          | _ => null
        }
      }
    }

    public this() {}
    
    public this(post : TransitionPostConditions) 
    {
      post_conditions = post
    }
    
    public Nested : TransitionDestination
    {
      get
      {
        match (this)
        {
          | SubRegion(_, st, _)
          | CheckAfter(_, _, st)
          | ForceStateChange(st) => st
          | _ => this
        }
      }
    }
  
    [RecordIgnore] 
    [Accessor]
    post_conditions : TransitionPostConditions;
  }
  
  public variant TransitionPostConditions
  {
    | None
    | RegionCompletion {reg : ConcurrentRegion; tran : list[StateTransition];}
  }
}
