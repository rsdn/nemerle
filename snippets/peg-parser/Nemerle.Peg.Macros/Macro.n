using System;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Parsetree.PExpr;
using Nemerle.Compiler.Token;
using Nemerle.Imperative;

namespace Nemerle.Peg
{
  macro GrammarScope (_rules : Token)
  syntax ("grammar", _rules)
  {
    <[ () ]>
  }
  module PegGrammarOptions
  {
    public EmitDebugSources : bool { get; private set;}
     
    public GetDefineMethod(tb : TypeBuilder) : (ClassMember) -> void
    {
        if(EmitDebugSources)
          (classMember) => _ =  tb.DefineWithSource(classMember);
        else
          tb.Define
    }
    public Parse(expr : PExpr) : void
    {
      | <[Options = EmitDebugSources]> => EmitDebugSources = true;
      | _ => ();
    }
  }

  [Nemerle.MacroUsage(Nemerle.MacroPhase.BeforeTypedMembers, Nemerle.MacroTargets.Class)]
  macro PegGrammar (tb : TypeBuilder, options, startRule, rules)
  {
    try
    {
      PegGrammarOptions.Parse(options);
      def startRuleName = NameRef(startRule.Location, startRule.ToString());
      tb.UserData[typeof(Grammar)] = Grammar(startRuleName);

      def parsedGrammar = Parsing.ParseRules(Macros.ImplicitCTX(), startRuleName, rules);

      GrammarTyper.Check(parsedGrammar);

      when (parsedGrammar == null)
        Message.FatalError(tb.Location, "PEG Grammar not parsed.");

      GrammarImpl.MakeParser(Macros.ImplicitCTX(), tb, parsedGrammar);
    }
    catch
    {
      | e is GrammarException =>
        def loc = if (e.Location != Location.Default) e.Location else tb.Location;
        Message.Error(loc,  e.Message);
      | _ is CriticalUnexpectedException => ()
      | e is Exception =>
        assert2(false, e.ToString());
        Message.Error(tb.Location,  $"Exception $e");
    }
  }

  public module GrammarImpl
  {
    private CheckRules(grammar : Grammar) : bool
    {
      def check(rule : Rule)
      {
        | Call(name, _)    =>
          if (grammar.Rules.Exists(rd => rd.Name.Id == name.Id))
            true
          else
          {
            Message.Error(name.Location, $"There is no rule \"$name\" in grammar.");
            false
          }
        | Choice(rules)
        | Sequence(rules)  => rules.Fold(true, (rule, res) => check(rule) && res)
        | Not(rule)
        | And(rule)
        | Capture(_, rule)
        | Scope(_, rule)
        | RepeatMin(_, rule)
        | RepeatMinMax(_, _, rule) => check(rule);
        | Chars | Fsm | Cut => true
      }
      grammar.Rules.Fold(true, (rd, res) =>
        {
          def r = match (rd.Rule)
          {
            | Some(rule) => check(rule)
            | None       => true
          }
          r && res
        });
    }

    public MakeParser(typer : Typer, tb : TypeBuilder, parsedGrammar : Grammar) : void
    {
      def allRules = CheckRules(parsedGrammar);

      def typedGrammar = GrammarTyper.AddArgumentCaptures(parsedGrammar, typer);

      def compiler = GrammarCompiler(typedGrammar, typer, tb);

      try
      {
        if (typer.Manager.IsIntelliSenseMode)
          IntelliSenseSupport.AddIntelliSenseSupport(compiler, parsedGrammar, typer, tb);
        else
          when (allRules)
            compiler.CompileGrammar();
      }
      finally
      {
        compiler.DefineAllMethods();
      }
    }
  }
}
