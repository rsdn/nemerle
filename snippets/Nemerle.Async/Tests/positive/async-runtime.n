// REFERENCE: ..\Nemerle.Async\bin\Debug\Nemerle.Async.dll
// REFERENCE: ..\Nemerle.Async.Macros\bin\Debug\Nemerle.Async.Macros.dll

using Nemerle.Async;
using System;
using System.Console;
using System.Threading;
using System.Threading.Tasks;
using System.Runtime.CompilerServices;

module Program
{
  Main() : void
  {
    TestGetAwaiter().Wait();
    TestTryCatch().Wait();
  }
  
  public static Delay(n : int) : Task
  {
    Task.Factory.StartNew(() =>
    {
      Thread.Sleep(n);
    });
  }
  
  #region Test GetAwaiter
  
  private static mutable _counter : int;

  public static GetAwaiter(this a : int) : TaskAwaiter
  {
    Task.Factory.StartNew(() =>
    {
      _counter += a;
    })
    .GetAwaiter();
  }
    
  public static async TestGetAwaiter() : Task
  {
    _counter = 0;
    
    for (mutable i = 0; i < 10; i++)
    {
      await 1;
    }

    WriteLine("TestGetAwaiter: {0}", _counter);
  }

  #endregion
  
  #region Test TryCatch
    
  public async TestTryCatch() : Task
  {
    // Test 1 - task without try/catch results in AggregatedException
    //
    // async without try/catch and with Exception (ex) thrown inside
    // always return Task with State = Faulted and
    // Exception = AggregatedException with InnerException = ex
    def task1 = async // W: This async block lacks 'await' operators and will run synchronously.
      {
        throw Exception("Exception 1");
      }

    if (task1.Status == TaskStatus.Faulted &&
      task1.Exception != null &&
      task1.Exception.GetType() == typeof(AggregateException) &&
      task1.Exception.InnerException != null &&
      task1.Exception.InnerException.Message == "Exception 1")
    {
    }
    else
    {
      WriteLine("Exception test 1 failed!");
    }
      
    // Test 2 - exception before await
    await async
      {
        try
        {
          when (true)
          {
            throw Exception("Exception 2");
          }
          await Delay(0);
        }
        catch
        {
          | ex =>
            if (ex.Message == "Exception 2")
            {
            }
            else
            {
              WriteLine("Exception test 1 failed!");
            }
        }
      }

    // Test 3 - exception after await
    await async
      {
        try
        {
          await Delay(0);
          throw Exception("Exception 3");
        }
        catch
        {
          | ex =>
            if (ex.Message == "Exception 3")
            {
            }
            else
            {
              WriteLine("Exception test 3 failed!");
            }
        }
      }
      
    // Test 4 - exception between await and awaiter construction
    await async
      {
        try
        {
          await Delay(0);
          await (fun() : Task
          {
            throw Exception("Exception 4");
          })();
        }
        catch
        {
          | ex =>
            if (ex.Message == "Exception 4")
            {
            }
            else
            {
              WriteLine("Exception test 4 failed!");
            }
        }
      }

    // Test 5 - double try/catch (re-throw test)
    await async
      {
        try
        {
          try
          {
            await Delay(0);
            throw Exception("Exception 5");
          }
          catch
          {
            | ex =>
              throw ex;
          }
        }
        catch
        {
          | ex =>
            if (ex.Message == "Exception 5")
            {
            }
            else
            {
              WriteLine("Exception test 5 failed!");
            }
        }
      }

    // Test 6 - async with return value
    await async
      {
        def res = await async
        {
          try
          {
            def i = await async
            {
              await Delay(0);
              10;
            }
            when (true)
            {
              throw Exception("Exception 6");
            }
            i;
          }
          catch
          {
            | _ => 42;
          }
        }

        if (res == 42)
        {
        }
        else
        {
          WriteLine("Exception test 6 failed!");
        }
      }
    
    WriteLine("TestTryCatch: OK");
  }
    
  #endregion
}

/*
BEGIN-OUTPUT
TestGetAwaiter: 10
TestTryCatch: OK
END-OUTPUT
*/
