// REFERENCE: Nemerle.Async.dll
// REFERENCE: Nemerle.Async.Macros.dll

using Nemerle.Async;
using System.IO;
using System.Threading;
using System.Threading.Tasks;

namespace Nemerle.Async.Tests
{
  public class AsyncCompile
  {
    public P1Async(a : int, b : int) : Task[int]
    {
      Task.Factory.StartNew(() =>
      {
        mutable k = 0;
        for (mutable i = 0; i < 10000; i++)
          for (mutable j = 0; j < 10000; j++)
          {
            unchecked
            {
              k = k + a + b;
            }
          }
        k;
      });
    }
    
    public Delay(n : int) : Task
    {
      Task.Factory.StartNew(() =>
      {
        Thread.Sleep(n);
      });
    }
    
    public AsyncConstructions() : void
    {
      // type of expression: Task
      def _ : Task = async
      {
        await Delay(5000);
      }

      // type of expression: Task
      def _ : Task = async
      {
        await Delay(5000);
        System.Diagnostics.Debug.WriteLine("Expression.");
      }

      // type of expression: Task
      def _ : Task = async
      {
        def _ = "aaa";
        await Delay(5000);
      }

      // type of expression: Task
      def _ : Task = async
      {
        def _ = "aaa";
        await Delay(5000);
        def _ = "bbb";
      }		

      // type of expression: Task[int]
      def _ : Task[int] = async
      {
        def _ = "aaa";
        await Delay(5000);
        42;
      }

      // type of expression: Task
      def _ : Task = async
      {
        def _ = "aaa";
        await Delay(5000);
        def _ = "bbb";
        await Delay(5000);
      }

      // type of expression: Task[int]
      def _ : Task[int] = async
      {
        def k1 = await P1Async(1, 12);
        k1;
      }
      
      // type of expression: Task[int]
      def _ : Task = async
      {
        def k1 = await P1Async(1, 12);
        def _ = "k1 = " + k1;
      }
      
      // type of expression: Task[int]
      // here we are returning value from P1Async method
      def _ : Task[int] = async
      {
        await P1Async(1, 12);
      }
      
      // type of expression: Task[int]
      // here we are returning return value from second P1Async method
      def _ : Task[int] = async
      {
        _ = await P1Async(1, 12);
        await P1Async(1, 12);
      }
      
      // type of expression: Task
      // here we are ignoring return value from P1Async method
      def _ : Task = async
      {
        _ = await P1Async(1, 12);
        _ = await P1Async(1, 12);
      }
      
      // type of expression: Task[int]
      // here we are ignoring return value from P1Async method
      def _ : Task[int] = async
      {
        _ = await P1Async(1, 12);
        _ = await P1Async(1, 12);
        42;
      }

      // type of expression: Task[int]
      def _ : Task[int] = async
      {
        await Delay(3000);
        def k1 = await P1Async(1, 12);
        k1;
      }

      // type of expression: Task[int]
      def _ : Task[int] = async
      {
        def k1 = await P1Async(1, 12);
        await Delay(3000);
        k1;
      }

      // type of expression: Task[int]
      def _ : Task[int] = async
      {
        def k1 = await P1Async(1, 12);
        def k2 = await P1Async(1, 23);
        def k = k1 + k2;
        k;
      }

      // type of expression: Task
      def _ : Task = async
      {
        def k1 = await P1Async(1, 12);
        def _ = "k = " + k1;
      }

      // type of expression: Task
      def _ : Task = async
      {
        _ = await P1Async(1, 12);
        await Delay(3000);
      }

      // type of expression: Task[int]
      def _ : Task[int] = async
      {
        def _ = "ok";
        mutable i = 0;
        while (i < 4)
        {
          await Delay(1000);
          def _ = "ok " + i;
          i++;
        }
        42;
      }

      // type of expression: Task
      def _ : Task = async
      {
        def _ = "ok";
        def list = [1, 2, 3, 4];
        foreach (i in list)
        {
          await Delay(1000);
          def _ = "ok " + i;
        }
      }
      
      // type of expression: Task
      def _ : Task = async
      {
        def _ = "ok";
        def l = System.Collections.ArrayList();
        _ = l.Add(1);
        _ = l.Add("2");
        foreach (i in l)
        {
          await Delay(1000);
          def _ = "ok " + i;
        }
      }

      // type of expression: Task[int]
      def _ : Task[int] = async
      {
        mutable k = 0;
        for (mutable i = 0; i < 100; i++)
        {
          def k1 = await P1Async(1, 12);
          def _ = "i = " + i + "k1 = " + k1;
        }
        k;
      }
      
      // type of expression: Task
      def _ : Task = async
      {
        mutable i = 0;
        while (i > 0)
        {
          def k1 = await P1Async(1, 12);
          def _ = "i = " + i + "k1 = " + k1;
        }
      }
      
      // type of expression: Task
      def _ : Task = async
      {
        mutable i = 0;
        do
        {
          def k1 = await P1Async(1, 12);
          def _ = "i = " + i + "k1 = " + k1;
        }
        while (i > 0)
      }

      // type of expression: Task[int]
      def _ : Task[int] = async
      {
        def _ = "aaa";
        def k1 = await P1Async(1, 12);
        def _ = "bbb";

        //def a = await Delay(5000);
        await Delay(3000);
        def _ = "ccc";
        await Delay(3000);

        def k2 = await P1Async(1, 23);
        def _ = "k1 + k2 = " + (k1 + k2);

        k1 + k2;
      }
      
      // type of expression: Task
      def _ : Task = async
      {
        using (reader1 = StreamReader(""),
          reader2 = StreamReader(""))
        {
          _ = reader1.ReadLine();
          _ = reader2.ReadLine();
          await Delay(0);
        }
      }
    }
  }
}
