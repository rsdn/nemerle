/*
 * Copyright (c) 2010  rampelstinskin@gmail.com
 * Copyright (c) 2012  Marek Gibek
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Collections.Generic;

namespace Nemerle.Async.Internal
{
  /// <summary>
  /// This is a AsyncBuilder.
  /// </summary>
  public class AsyncBuilderMacro
  {
    public Bind(expr : PExpr, name : PExpr, cont : PExpr,
      isDefine : bool, isMutable : bool) : PExpr
    {
      def getAwaiter = Macros.UseSiteSymbol("GetAwaiter");
      
      def initName = match (name)
      {
        | <[ () ]> =>
          <[
            // needed because of validation,
            // exception throwing etc.
            awaiter.GetResult();
          ]>;
        | _ =>
          if (isDefine)
          {
            if (isMutable)
            {
              <[ mutable $name = awaiter.GetResult() ]>;
            }
            else
            {
              <[ def $name = awaiter.GetResult() ]>;
            }
          }
          else
          {
            <[ $name = awaiter.GetResult() ]>;
          }
      }

      def continuation = match (cont)
      {
        | <[ () ]> => <[ $initName ]>
        | _ => <[ $initName; $cont ]>
      }

      <[
        AsyncBuilder.Bind(() =>
          {
            def awaiter = $expr.$(getAwaiter : name)();
            (awaiter, awaiter.IsCompleted, () => $continuation)
          })
      ]>
    }

    public BindAsync(expr : PExpr, name : PExpr, cont : PExpr,
      isDefine : bool, isMutable : bool) : PExpr
    {
      def getAwaiter = Macros.UseSiteSymbol("GetAwaiter");
      
      def initName = match (name)
      {
        | <[ () ]> =>
          <[
            // needed because of validation,
            // exception throwing etc.
            awaiter.GetResult();
          ]>;
        | _ =>
          if (isDefine)
          {
            if (isMutable)
            {
              <[ mutable $name = awaiter.GetResult() ]>;
            }
            else
            {
              <[ def $name = awaiter.GetResult() ]>;
            }
          }
          else
          {
            <[ $name = awaiter.GetResult() ]>;
          }
      }

      def continuation = match (cont)
      {
        | <[ () ]> => <[ $initName ]>
        | _ => <[ $initName; $cont ]>
      }

      <[
        AsyncBuilder.BindAsync(() =>
          {
            def awaiter = $expr.$(getAwaiter : name)();
            (awaiter, awaiter.IsCompleted, () => $continuation)
          })
      ]>
    }

    public Combine(expr1 : PExpr, expr2 : PExpr) : PExpr
    {
      Bind(expr1, <[ () ]>, expr2, false, false);
    }
    
    public CombineAsync(expr1 : PExpr, expr2 : PExpr) : PExpr
    {
      BindAsync(expr1, <[ () ]>, expr2, false, false);
    }

    public Run(expr : PExpr) : PExpr
    {
      <[ AsyncBuilder.Run(() => $expr) ]>
    }
    
    public RunAsync(expr : PExpr) : PExpr
    {
      <[ AsyncBuilder.RunAsync(() => $expr) ]>
    }

    public While(pred : PExpr, body : PExpr) : PExpr
    {
      def awaiter = Macros.NewSymbol("awaiter");
      
      <[
        def tcs : System.Threading.Tasks.TaskCompletionSource[object] =
          System.Threading.Tasks.TaskCompletionSource();

        def loop() : void
        {
          if ($pred)
          {
            // iteration
            def $(awaiter : name) = $body.GetAwaiter();

            // continuation
            $(awaiter : name).OnCompleted(fun() : void
              {
                try
                {
                  // recommended because of validation, exception throwing etc.
                  $(awaiter : name).GetResult();
                  loop();
                }
                catch
                {
                  ex => _ = tcs.TrySetException(ex);
                }
              });
          }
          else
          {
            _ = tcs.TrySetResult(null);
          }
        }

        try
        {
          loop();
        }
        catch
        {
          ex => _ = tcs.TrySetException(ex);
        }

        Nemerle.Async.Internal.AsyncTask(
          tcs.Task : System.Threading.Tasks.Task);
      ]>
    }

    public DoWhile(pred : PExpr, body : PExpr) : PExpr
    {
      def awaiter = Macros.NewSymbol("awaiter");
      
      <[
        def tcs : System.Threading.Tasks.TaskCompletionSource[object] =
          System.Threading.Tasks.TaskCompletionSource();

        def loop() : void
        {
          // iteration
          def $(awaiter : name) = $body.GetAwaiter();

          // continuation
          $(awaiter : name).OnCompleted(fun () : void
            {
              try
              {
                // recommended because of validation, exception throwing etc.
                $(awaiter : name).GetResult();

                if ($pred)
                {
                  loop()
                }
                else
                {
                  _ = tcs.TrySetResult(null);
                }
              }
              catch
              {
                ex => _ = tcs.TrySetException(ex);
              }
            });
        }

        try
        {
          loop();
        }
        catch
        {
          ex => _ = tcs.TrySetException(ex);
        }

        Nemerle.Async.Internal.AsyncTask(
          tcs.Task : System.Threading.Tasks.Task);
      ]>
    }

    protected ForEach(coll : PExpr, cont : PExpr) : PExpr
    {
      <[ AsyncBuilder.ForEach($coll, $cont) ]>
    }
    
    public ForEach(name : PExpr, coll : PExpr, body : PExpr) : PExpr
    {
      def awaiter = Macros.NewSymbol("awaiter");
      def enumerator = Macros.NewSymbol("enumerator");
      
      match (body)
      {
        | <[ match ($(null)) { ..$_ } ]> =>					
          match (name)
          {
            | <[ $(x : name) ]> when char.IsLower(x.Id[0])
            | <[ (..$_) ]> => ()
            | _ => Message.FatalError("only simple names available in pattern"
              " of foreach with direct matching")
          }
        | _ => ()
      }
      
      <[
        def tcs : System.Threading.Tasks.TaskCompletionSource[object] =
          System.Threading.Tasks.TaskCompletionSource();

        try
        {
          def $(enumerator : name) = $coll.GetEnumerator();

          def loop() : void
          {
            if ($(enumerator : name).MoveNext())
            {
              // iteration
              def $name = $(enumerator : name).Current;
              def $(awaiter : name) = $body.GetAwaiter();

              // continuation
              $(awaiter : name).OnCompleted(fun () : void
                {
                  try
                  {
                    // recommended because of validation, exception throwing etc.
                    $(awaiter : name).GetResult();

                    loop();
                  }
                  catch
                  {
                    ex => _ = tcs.TrySetException(ex);
                  }
                });
            }
            else
            {
              (($(enumerator : name) : object) :> IDisposable)?.Dispose();
              _ = tcs.TrySetResult(null);
            }
          }

          loop();
        }
        catch
        {
          ex => _ = tcs.TrySetException(ex);
        }

        Nemerle.Async.Internal.AsyncTask(
          tcs.Task : System.Threading.Tasks.Task);
      ]>
    }
    
    public For(init : PExpr, cond : PExpr, change : PExpr, body : PExpr) : PExpr
    {
      def awaiter = Macros.NewSymbol("awaiter");
      
      <[
        def tcs : System.Threading.Tasks.TaskCompletionSource[object] =
          System.Threading.Tasks.TaskCompletionSource();

        try
        {
          $init;

          def loop() : void
          {
            if ($cond)
            {
              // iteration
              def $(awaiter : name) = $body.GetAwaiter();

              // continuation
              $(awaiter : name).OnCompleted(fun () : void
                {
                  try
                  {
                    // recommended because of validation, exception throwing etc.
                    $(awaiter : name).GetResult();

                    $change;
                    loop();
                  }
                  catch
                  {
                    ex => _ = tcs.TrySetException(ex);
                  }
                });
            }
            else
            {
              _ = tcs.TrySetResult(null);
            }
          }

          loop();
        }
        catch
        {
          ex => _ = tcs.TrySetException(ex);
        }

        Nemerle.Async.Internal.AsyncTask(
          tcs.Task : System.Threading.Tasks.Task);
      ]>
    }

    public TryFinally(body : PExpr, handler : PExpr) : PExpr
    {
      <[ AsyncBuilder.TryFinally(() => $body, () => $handler) ]>
    }

    protected TryCatch(body : PExpr, cont : PExpr) : PExpr
    {
      <[ AsyncBuilder.TryCatch(() => $body, $cont) ]>
    }
    
    public TryCatch(body : PExpr, cases : list [TryCase]) : PExpr
    {
      def e = Macros.NewSymbol("e");
      def p = PExpr.Try(<[ throw $(e : name) ]>, cases);

      TryCatch(body, <[ $(e : name) => $p ]>)
    }

    public Using(expr : PExpr, name : PExpr, body : PExpr) : PExpr
    {
      <[ AsyncBuilder.Using($expr, $name => $body) ]>
    }
  }
}
