/*
 * Copyright (c) 2010  David Sorokin <david.sorokin@gmail.com>
 * Copyright (c) 2010  rampelstinskin@gmail.com
 * Copyright (c) 2012  Marek Gibek
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using System;
using System.Collections.Generic;

namespace Nemerle.Async
{
  using Async.ComputationError;
  using Async.Internal;

  /// <summary>
  /// Creates function body for asynchronous exectution
  /// or executes asynchronous block of code.
  /// </summary>
  public macro @async(expr : PExpr)
  syntax ("async", expr)
  {
    match (expr)
    {
      | <[ def $name(..$args) $body ]> =>
        // async function without specified return type
        def newBody = AsyncExpander.Expand(AsyncBuilderMacro(), body);
        <[
          def $name(..$args)
          {
            $newBody
          }
        ]>

      | <[ def $name(..$args) : $type $body ]> =>
        // async function with specified return type
        def newBody = AsyncExpander.Expand(AsyncBuilderMacro(), body);
        <[
          def $name(..$args) : $type
          {
            $newBody
          }
        ]>

      | _ => AsyncExpander.Expand(AsyncBuilderMacro(), expr);
    }
  }

  /// <summary>
  /// Creates method body for asynchronous execution.
  /// </summary>
  [Nemerle.MacroUsage(Nemerle.MacroPhase.BeforeTypedMembers,
    Nemerle.MacroTargets.Method,
    Inherited = true,
    AllowMultiple = false)]
  public macro AsyncMethod(typeBuilder : TypeBuilder, method : ParsedMethod)
  syntax("async")
  {
    def returnType = typeBuilder.BindFixedType(method.header.ReturnType);
    
    mutable newBody = AsyncExpander.Expand(AsyncBuilderMacro(), method.Body);
    
    newBody = match (returnType.Hint)
      {
        | Some(FixedType.Void) =>
        // on async void method rethrow user unhandled exception (if faulted)
        <[
          _ = ($(newBody) : System.Threading.Tasks.Task).ContinueWith(t =>
            System.Threading.ThreadPool.QueueUserWorkItem(fun (state : object) : void
            {
              throw state :> Exception
            }, t.Exception.InnerException),
            System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted |
            System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously);
        ]>
        
        | Some(_) => newBody

        | _ => Message.Error($"Can't determine type of $(method.header.ReturnType)");
          newBody
      }

    method.Body = newBody
  }

  /// <summary>
  /// Awaits result of asynchronous expression.
  /// </summary>
  public macro @await(expr)
  syntax("await", expr)
  {
    UnexpectedCall("await", expr)
  }

  /// <summary>
  /// This is a helper diagnostic module.
  /// </summary>
  internal module ComputationError
  {
    /// <summary>
    /// Is is called whenever the macro specified by its name is invalid in the current context.
    /// </summary>
    public UnexpectedCall (name : string, expr : PExpr) : PExpr
    {
      Message.FatalError(expr.Location, $"Unexpected use of the $name construct. "
        "It can be applied only inside the construct of the async expression or method. "
        "Please refer to the documentation for more details.")
    }
  }
}
