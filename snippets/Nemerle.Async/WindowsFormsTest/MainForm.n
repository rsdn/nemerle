using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Async;
using Nemerle.Imperative;

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Threading;
using System.Threading.Tasks;
using System.Runtime.CompilerServices;

namespace WindowsFormsTest
{
  /// <summary>
  /// MainForm.
  /// </summary>
  public partial class MainForm : Form
  {
    public this()
    {
      InitializeComponent();
    }

    #region Test Fibonacci
    
    private mutable _cancellationTokenSource : CancellationTokenSource;
    
    private _buttonCancel_Click (_sender : object,  _e : System.EventArgs) : void
    {
      when (_cancellationTokenSource != null)
      {
        _cancellationTokenSource.Cancel();
      }
    }

    private buttonTestFibonacci_Click(_sender : object,  _e : System.EventArgs) : void
    {
      def fib(n)
      {
        Task.Factory.StartNew(() =>
        {
          def fib(n)
          {
            if (n < 2)
              1
            else
              fib(n - 2) + fib(n - 1);
          }

          fib(n);
        });
      }

      def proc(cur, max, cancellationToken, progress : IProgress[double])
      {
        async
        {
          for (mutable i = cur; i <= max; i++)
          {
            cancellationToken.ThrowIfCancellationRequested();

            def res = await fib(i);				

            textBox1.Text = $"fib($i) = $res\r\n" + textBox1.Text;
            
            when (progress != null)
            {
              progress.Report((i * 1.0) / max);
            }
          }
        }
      }

      _ = async
      {
        EnableButtons(false); ClearTextboxes();
        _buttonCancel.Enabled = true;
        progressBar1.Maximum = 1000;
        progressBar1.Value = 0;
        
        _cancellationTokenSource = CancellationTokenSource();
        def time = Diagnostics.Stopwatch.StartNew();

        try
        {				
          await proc(1, 42, _cancellationTokenSource.Token,
            Progress(fun (progress)
              {
                progressBar1.Value = (progress * 1000.0) :> int;
              }
            ));
        }
        catch
        {
          | _ is OperationCanceledException =>
          textBox1.Text = "Operation cancelled.\r\n" + textBox1.Text;
        }
        finally
        {
          textBox1.Text = $"$(time.Elapsed)\r\n" + textBox1.Text;
        
          EnableButtons(true);
          _buttonCancel.Enabled = false;
        }
      }
    }

    #endregion

    #region Test GetAwaiter

    public static GetAwaiter(this ms : int) : TaskAwaiter
    {
      TaskEx.Delay(ms : int).GetAwaiter();
    }

    public static GetAwaiter(this timeSpan : TimeSpan) : TaskAwaiter
    { 
      TaskEx.Delay(timeSpan).GetAwaiter(); 
    }
    
    private async TestGetAwaiter() : Task
    {
      EnableButtons(false); ClearTextboxes();
        
      def time = Diagnostics.Stopwatch.StartNew();
        
      textBox1.Text = "New text should appear every 1 [s]\r\n";
      for (mutable i = 0; i < 4; i++)
      {
        await TimeSpan.FromSeconds(1);
        textBox1.Text += i + "\r\n";
      }
      await 1000;

      when (time.Elapsed.TotalSeconds > 4)
      {
        textBox1.Text += "\r\nTest passed.\r\n";
      }
        
      EnableButtons(true);
    }

    private buttonTestGetAwaiter_Click(_sender : object,  _e : System.EventArgs) : void
    {
      _ = TestGetAwaiter();
    }

    #endregion
    
    #region Test ConfigureAwait
    
    private buttonTestConfigureAwait_Click(_sender : object,  _e : System.EventArgs) : void
    {
      def fib(n)
      {
        if (n < 2)
          1
        else
          fib(n - 2) + fib(n - 1);
      }
      
      def calc()
      {
        Task.Factory.StartNew(() =>
        {
          _ = fib(35);
          System.Threading.Thread.CurrentThread.ManagedThreadId
        });
      }
      
      def calcAll(configureAwait)
      {
        async
        {
          def id1 = await calc().ConfigureAwait(configureAwait);
          def id2 = System.Threading.Thread.CurrentThread.ManagedThreadId;
          (id1, id2)
        }
      }
          
      def Test1()
      {
        async
        {
          textBox1.Text = "ConfigureAwait(false)\r\n\r\n";
          textBox1.Text += $"GUI thread: $(System.Threading.Thread.CurrentThread.ManagedThreadId)\r\n";
          def (id1, id2) = await calcAll(false);
          textBox1.Text += $"Worker thread: $id1\r\n";
          textBox1.Text += $"Continuation thread: $id2\r\n";
          textBox1.Text += $"GUI thread: $(System.Threading.Thread.CurrentThread.ManagedThreadId)\r\n";
          when (id1 == id2)
          {
            textBox1.Text += "\r\nTest passed.\r\n";
          }
        }
      }
      
      def Test2()
      {
        async
        {
          textBox2.Text = "ConfigureAwait(true)\r\n\r\n";
          def id0 = System.Threading.Thread.CurrentThread.ManagedThreadId;
          textBox2.Text += $"GUI thread: $id0\r\n";
          def (id1, id2) = await calcAll(true);
          textBox2.Text += $"Worker thread: $id1\r\n";
          textBox2.Text += $"Continuation thread: $id2\r\n";
          textBox2.Text += $"GUI thread: $(System.Threading.Thread.CurrentThread.ManagedThreadId)\r\n";
          when (id2 == id0)
          {
            textBox2.Text += "\r\nTest passed.\r\n";
          }
        }
      }
      
      _ = async
      {
        EnableButtons(false); ClearTextboxes();
        
        await Task.WhenAll(Test1(), Test2());
        
        EnableButtons(true);
      }
    }
    
    #endregion
    
    #region Test TryCatch
    
    private async buttonTestTryCatch_Click(_sender : object,  _e : System.EventArgs) : void
    {
      ClearTextboxes();

      // Test 1 - task without try/catch results in AggregatedException
      //
      // async without try/catch and with Exception (ex) thrown inside
      // always return Task with State = Faulted and
      // Exception = AggregatedException with InnerException = ex
      def task1 = async
        {
          throw Exception("Exception 1");
        }

      if (task1.Status == TaskStatus.Faulted &&
        task1.Exception != null &&
        task1.Exception.GetType() == typeof(AggregateException) &&
        task1.Exception.InnerException != null &&
        task1.Exception.InnerException.Message == "Exception 1")
      {
        textBox1.Text += "Exception test 1 passed.\r\n";
      }
      else
      {
        textBox1.Text += "Exception test 1 failed!\r\n";
      }
      
      // Test 2 - exception before await
      _ = async
        {
          try
          {
            throw Exception("Exception 2");
            await TaskEx.Delay(0);
          }
          catch
          {
            | ex =>
              if (ex.Message == "Exception 2")
              {
                textBox1.Text += "Exception test 2 passed.\r\n";
              }
              else
              {
                textBox1.Text += "Exception test 2 failed!\r\n";
              }
          }
        }

      // Test 3 - exception after await
      _ = async
        {
          try
          {
            await TaskEx.Delay(0);
            throw Exception("Exception 3");
          }
          catch
          {
            | ex =>
              if (ex.Message == "Exception 3")
              {
                textBox1.Text += "Exception test 3 passed.\r\n";
              }
              else
              {
                textBox1.Text += "Exception test 3 failed!\r\n";
              }
          }
        }
      
      // Test 4 - exception between await and awaiter construction
      _ = async
        {
          try
          {
            await TaskEx.Delay(0);
            await (fun() : Task
            {
              throw Exception("Exception 4");
            })();
          }
          catch
          {
            | ex =>
              if (ex.Message == "Exception 4")
              {
                textBox1.Text += "Exception test 4 passed.\r\n";
              }
              else
              {
                textBox1.Text += "Exception test 4 failed!\r\n";
              }
          }
        }

      // Test 5 - double try/catch (re-throw test)
      _ = async
        {
          try
          {
            try
            {
              await TaskEx.Delay(0);
              throw Exception("Exception 5");
            }
            catch
            {
              | ex =>
                throw ex;
            }
          }
          catch
          {
            | ex =>
              if (ex.Message == "Exception 5")
              {
                textBox1.Text += "Exception test 5 passed.\r\n";
              }
              else
              {
                textBox1.Text += "Exception test 5 failed!\r\n";
              }
          }
        }

      // Test 6 - async with return value
      _ = async
        {
          def res = await async
          {
            try
            {
              def i = await async
              {
                await TaskEx.Delay(0);
                10;
              }
              throw Exception("Exception 6");
              i;
            }
            catch
            {
              | _ => 42;
            }
          }

          if (res == 42)
          {
            textBox1.Text += "Exception test 6 passed.\r\n";
          }
          else
          {
            textBox1.Text += "Exception test 6 failed!\r\n";
          }
        }

      // Test
      // This should not throw an exception outside
      _ = async
      {
        throw Exception("Exception A1");
      }
      
      // Test
      // This should not throw exception outside
      _ = async
      {
        await TaskEx.Delay(0);
        throw Exception("Exception A2");
      }
    }

    #endregion
      
    #region Test TryFinally
    
    private buttonTestTryFinally_Click(_sender : object,  _e : System.EventArgs) : void
    {
      ClearTextboxes();
    
      _ = async
      {
        try
        {
          await TaskEx.Delay(0);
          textBox1.Text = "Before finally.\r\n";
        }
        finally
        {
          textBox1.Text += "Finally executed.\r\n";
        }
        textBox1.Text += "After finally.\r\n";
      }
    }
    
    #endregion
    
    #region Test Unhandled Exception

    private async _buttonUnhandledException_Click(_sender : object, _e : System.EventArgs) : void
    {
      await TaskEx.Delay(100);
      throw Exception("Unhandled async void exception!");
    }
    
    #endregion

    #region Sample constucts that should compile

    // below are few examples how we can use Async library
    // they all should compile (though some with purposeful warnings)

    private P1Async(a : int, b : int) : Task[int]
    {
      Task.Factory.StartNew(() =>
      {
        mutable k = 0;
        for (mutable i = 0; i < 10000; i++)
          for (mutable j = 0; j < 10000; j++)
          {
            unchecked
            {
              k = k + a + b;
            }
          }
        k;
      });
    }

    private AsyncConstructions() : void
    {
      // type of expression: Task
      // warning should appear that async block lacks 'await' operators
      _ = async
      {
        System.Diagnostics.Debug.WriteLine("It makes no sense.");
      }

      // type of expression: Task
      // warning should appear that async block lacks 'await' operators
      _ = async
      {
        42;
      }

      // type of expression: Task
      _ = async
      {
        await TaskEx.Delay(5000);
      }

      // type of expression: Task
      _ = async
      {
        await TaskEx.Delay(5000);
        System.Diagnostics.Debug.WriteLine("Expression.");
      }

      // type of expression: Task
      _ = async
      {
        textBox1.Text = "aaa";
        await TaskEx.Delay(5000);
      }

      // type of expression: Task
      _ = async
      {
        textBox1.Text = "aaa";
        await TaskEx.Delay(5000);
        textBox1.Text = "bbb";
      }		

      // type of expression: Task[int]
      _ = async
      {
        textBox1.Text = "aaa";
        await TaskEx.Delay(5000);
        42;
      }

      // type of expression: Task
      _ = async
      {
        textBox1.Text = "aaa";
        await TaskEx.Delay(5000);
        textBox1.Text = "bbb";
        await TaskEx.Delay(5000);
      }

      // type of expression: Task[int]
      _ = async
      {
        def k1 = await P1Async(1, 12);
        k1;
      }
      
      // type of expression: Task[int]
      _ = async
      {
        def k1 = await P1Async(1, 12);
        textBox1.Text = "k1 = " + k1;
      }
      
      // type of expression: Task[int]
      // here we are returning value from P1Async method
      _ = async
      {
        await P1Async(1, 12);
      }
      
      // type of expression: Task[int]
      // here we are ignoring return value from P1Async method
      // warning should appear
      _ = async
      {
        await P1Async(1, 12);
        42;
      }
      
      // type of expression: Task[int]
      // here we are returning return value from second P1Async method
      _ = async
      {
        _ = await P1Async(1, 12);
        await P1Async(1, 12);
      }
      
      // type of expression: Task
      // here we are ignoring return value from P1Async method
      _ = async
      {
        _ = await P1Async(1, 12);
        _ = await P1Async(1, 12);
      }
      
      // type of expression: Task[int]
      // here we are ignoring return value from P1Async method
      _ = async
      {
        _ = await P1Async(1, 12);
        _ = await P1Async(1, 12);
        42;
      }

      // type of expression: Task[int]
      _ = async
      {
        await TaskEx.Delay(3000);
        def k1 = await P1Async(1, 12);
        k1;
      }

      // type of expression: Task[int]
      _ = async
      {
        def k1 = await P1Async(1, 12);
        await TaskEx.Delay(3000);
        k1;
      }

      // type of expression: Task[int]
      _ = async
      {
        def k1 = await P1Async(1, 12);
        def k2 = await P1Async(1, 23);
        def k = k1 + k2;
        k;
      }

      // type of expression: Task
      _ = async
      {
        def k1 = await P1Async(1, 12);
        textBox1.Text = "k = " + k1;
      }

      // type of expression: Task
      _ = async
      {
        _ = await P1Async(1, 12);
        await TaskEx.Delay(3000);
      }

      // type of expression: Task[int]
      _ = async
      {
        textBox1.Text = "ok";
        mutable i = 0;
        while (i < 4)
        {
          await TaskEx.Delay(1000);
          textBox1.Text = "ok " + i;
          i++;
        }
        42;
      }

      // type of expression: Task
      _ = async
      {
        textBox1.Text = "ok";
        def list = [1, 2, 3, 4];
        foreach (i in list)
        {
          await TaskEx.Delay(1000);
          textBox1.Text = "ok " + i;
        }
      }
      
      // type of expression: Task
      _ = async
      {
        textBox1.Text = "ok";
        def l = System.Collections.ArrayList();
        _ = l.Add(1);
        _ = l.Add("2");
        foreach (i in l)
        {
          await TaskEx.Delay(1000);
          textBox1.Text = "ok " + i;
        }
      }

      // type of expression: Task[int]
      _ = async
      {
        mutable k = 0;
        for (mutable i = 0; i < 100; i++)
        {
          def k1 = await P1Async(1, 12);
          def _ = "i = " + i + "k1 = " + k1;
        }
        k;
      }
      
      // type of expression: Task
      _ = async
      {
        mutable i = 0;
        while (i > 0)
        {
          def k1 = await P1Async(1, 12);
          def _ = "i = " + i + "k1 = " + k1;
        }
      }
      
      // type of expression: Task
      _ = async
      {
        mutable i = 0;
        do
        {
          def k1 = await P1Async(1, 12);
          def _ = "i = " + i + "k1 = " + k1;
        }
        while (i > 0)
      }

      // type of expression: Task[int]
      _ = async
      {
        textBox1.Text = "aaa";
        def k1 = await P1Async(1, 12);
        textBox1.Text = "bbb";

        //def a = await TaskEx.Delay(5000);
        await TaskEx.Delay(3000);
        textBox1.Text = "ccc";
        await TaskEx.Delay(3000);

        def k2 = await P1Async(1, 23);
        textBox1.Text = "k1 + k2 = " + (k1 + k2);

        k1 + k2;
      }
      
      _ = async
      {
        using (reader1 = StreamReader(""),
          reader2 = StreamReader(""))
        {
          _ = reader1.ReadLine();
          _ = reader2.ReadLine();
          await TaskEx.Delay(0);
        }
      }
      
      /*_ = async
      {
        testblock: {
          def k = 0;
          testblock(4);
          await TaskEx.Delay(0);
          5;
        }
      }*/
    }
    
    #endregion
    
    #region Private Methods
    
    private EnableButtons(enable : bool) : void
    {
      _buttonTestFibonacci.Enabled = enable;
      _buttonTestGetAwaiter.Enabled = enable;
      _buttonTestConfigureAwait.Enabled = enable;
      _buttonTestTryCatch.Enabled = enable;
      _buttonTestTryFinally.Enabled = enable;
      _buttonUnhandledException.Enabled = enable;
    }
    
    private ClearTextboxes() : void
    {
      textBox1.Clear();
      textBox2.Clear();
    }
    
    #endregion
    
    #region Private Members
    
    private mutable textBox2 : System.Windows.Forms.TextBox;
    private mutable _buttonTestFibonacci : System.Windows.Forms.Button;
    private mutable _buttonTestGetAwaiter : System.Windows.Forms.Button;
    private mutable _buttonTestConfigureAwait : System.Windows.Forms.Button;
    private mutable _buttonTestTryCatch : System.Windows.Forms.Button;
    private mutable _buttonTestTryFinally : System.Windows.Forms.Button;
    private mutable _buttonUnhandledException : System.Windows.Forms.Button;
    private mutable _buttonCancel : System.Windows.Forms.Button;
    
    #endregion
  }
}
