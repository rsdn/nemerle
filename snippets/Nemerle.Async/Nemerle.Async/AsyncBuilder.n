/*
 * Copyright (c) 2012  Marek Gibek
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Runtime.CompilerServices;

namespace Nemerle.Async.Internal
{
  public module AsyncBuilder
  {
    #region Run
    
    /// <summary>
    /// Converts code to Task.
    ///
    /// This method is called when we are not returning value
    /// in async {} block.
    /// Example:
    ///     async
    ///     {
    ///         Console.WriteLine("It doesn't make much sense.");
    ///     }
    /// </summary>
    public Run(code : void -> void) : Task
    {
      def tcs : TaskCompletionSource[object] = TaskCompletionSource();

      try
      {
        code();
        _ = tcs.TrySetResult(null);
      }
      catch
      {
        ex => _ = tcs.TrySetException(ex);
      }

      tcs.Task;
    }
    
    /// <summary>
    /// Converts code to Task[A].
    ///
    /// This method is called when we are returning value
    /// in async {} block without calling await.
    /// Example:
    ///     async
    ///     {
    ///         Console.WriteLine("It doesn't make much sense.");
    ///         10;
    ///     }
    /// </summary>
    public Run[A](code : void -> A) : Task[A]
    {
      def tcs : TaskCompletionSource[A] = TaskCompletionSource();

      try
      {
        _ = tcs.TrySetResult(code());
      }
      catch
      {
        ex => _ = tcs.TrySetException(ex);
      }

      tcs.Task;
    }
    
    #endregion

    #region RunAsync
    
    /// <summary>
    /// Starts executing async section.
    ///
    /// This method is called when we are not returning value implicitly
    /// in async {} block (we are returning Task).
    /// Example:
    ///     async
    ///     {
    ///         await TaskEx.Delay(5000);
    ///         Console.WriteLine("Async returns Task.");
    ///     }
    /// </summary>
    public RunAsync(code : void -> AsyncTask) : Task
    {		
      try
      {
        code().task;
      }
      catch
      {
        ex =>
          def tcs : TaskCompletionSource[object] = TaskCompletionSource();
          _ = tcs.TrySetException(ex);
          tcs.Task : Task;
      }
    }
    
    /// <summary>
    /// Starts executing async section.
    ///
    /// This method is called when we are returning value explicitly
    /// in async {} block (we are returning Task[T]).
    /// Example:
    ///     async
    ///     {
    ///         await k = FuncAsync(10);
    ///         k + 5;
    ///     }
    /// </summary>
    public RunAsync[A](code : void -> AsyncTask[A]) : Task[A]
    {	
      try
      {
        code().task;
      }
      catch
      {
        ex =>
          def tcs : TaskCompletionSource[A] = TaskCompletionSource();
          _ = tcs.TrySetException(ex);
          tcs.Task;
      }
    }
    
    #endregion
    
    #region Bind

    /// <summary>
    /// Adds continuation ('cont') to given task ('task').
    /// Returns async that represents continuation end.
    /// Called when continuation doesn't contain awaits.
    ///
    /// Example:
    ///     await TaskEx.Delay(4000);
    ///     ...
    /// Calls:
    ///     def awaiter = TaskEx.Delay(4000).GetAwaiter();
    ///     Bind(awaiter, awaiter.IsCompleted, () => awaiter.GetResult, () => ...);
    /// </summary>
    public Bind(getAwaiter : void -> INotifyCompletion * bool * (void -> void)) : AsyncTask
    {
      def tcs : TaskCompletionSource[object] = TaskCompletionSource();
      
      try
      {
        def (awaiter, _isCompleted, cont) = getAwaiter();
      
        awaiter.OnCompleted(fun () : void
          {
            try
            {
              cont();
              _ = tcs.TrySetResult(null);
            }
            catch
            {
              ex => _ = tcs.TrySetException(ex);
            }
          });
      }
      catch
      {
        ex => _ = tcs.TrySetException(ex);
      }

      AsyncTask(tcs.Task : Task);
    }

    /// <summary>
    /// Adds continuation ('cont') to given task ('task').
    /// Returns async that represents continuation end.
    /// Called when continuation doesn't contain awaits.
    ///
    /// Example:
    ///     await k1 = asyncFunc1(10);
    ///     ...
    ///     10;
    /// Calls:
    ///     def awaiter = asyncFunc1(10).GetAwaiter();
    ///     Bind(awaiter, awaiter.IsCompleted, () => awaiter.GetResult, () => { def k1 = ...; 10; });
    /// </summary>
    public Bind[A](getAwaiter : void -> INotifyCompletion * bool * (void -> A)) : AsyncTask[A]
    {
      def tcs : TaskCompletionSource[A] = TaskCompletionSource();

      try
      {
        def (awaiter, _isCompleted, cont) = getAwaiter();
      
        awaiter.OnCompleted(fun () : void
          {
            try
            {
              _ = tcs.TrySetResult(cont());
            }
            catch
            {
              ex => _ = tcs.TrySetException(ex);
            }
          });
      }
      catch
      {
        ex => _ = tcs.TrySetException(ex);
      }

      AsyncTask(tcs.Task);
    }
    
    #endregion

    #region BindAsync
    
    /// <summary>
    /// Adds continuation ('cont') to given task ('task').
    /// Returns async that represents continuation end.
    /// Called when continuation contains await (returns Bind(Async)).
    ///
    /// Example:
    ///     await TaskEx.Delay(4000);
    ///     ...
    /// Calls:
    ///     def awaiter = TaskEx.Delay(4000).GetAwaiter();
    ///     BindAsync(awaiter, awaiter.IsCompleted, () => awaiter.GetResult, () => ...);
    /// </summary>
    public BindAsync(getAwaiter : void -> INotifyCompletion * bool * (void -> AsyncTask)) : AsyncTask
    {
      def tcs : TaskCompletionSource[object] = TaskCompletionSource();
      
      try
      {
        def (awaiter, _isCompleted, cont) = getAwaiter();

        awaiter.OnCompleted(fun () : void
          {
            try
            {
              def taskBAwaiter = cont().GetAwaiter();
              taskBAwaiter.OnCompleted(fun () : void
                {
                  try
                  {
                    // needed because of validation,
                    // exception throwing etc.
                    taskBAwaiter.GetResult();

                    _ = tcs.TrySetResult(null);
                  }
                  catch
                  {
                    ex => _ = tcs.TrySetException(ex);
                  }
                });
            }
            catch
            {
              ex => _ = tcs.TrySetException(ex);
            }
          });
      }
      catch
      {
        ex => _ = tcs.TrySetException(ex);
      }

      AsyncTask(tcs.Task : Task);
    }
    
    /// <summary>
    /// Adds continuation ('cont') to given task ('task').
    /// Returns async that represents continuation end.
    /// Called when continuation contains await (returns Bind(Async)).
    ///
    /// Example:
    ///     await TaskEx.Delay(4000);
    ///     ...;
    ///     10;
    /// Calls:
    ///     def awaiter = TaskEx.Delay(4000).GetAwaiter();
    ///     BindAsync(awaiter, awaiter.IsCompleted, () => awaiter.GetResult, () => { ...; 10; });
    /// </summary>
    public BindAsync[A](getAwaiter : void -> INotifyCompletion * bool * (void -> AsyncTask[A])) : AsyncTask[A]
    {
      def tcs : TaskCompletionSource[A] = TaskCompletionSource();

      try
      {
        def (awaiter, _isCompleted, cont) = getAwaiter();

        awaiter.OnCompleted(fun () : void
          {
            try
            {
              def taskBAwaiter = cont().GetAwaiter();
              taskBAwaiter.OnCompleted(fun () : void
                {
                  try
                  {
                    _ = tcs.TrySetResult(taskBAwaiter.GetResult());
                  }
                  catch
                  {
                    ex => _ = tcs.TrySetException(ex);
                  }
                });
            }
            catch
            {
              ex => _ = tcs.TrySetException(ex);
            }
          });
      }
      catch
      {
        ex => _ = tcs.TrySetException(ex);
      }

      AsyncTask(tcs.Task);
    }
    
    #endregion
    
    #region TryCatch
    
    public TryCatch[A](body : void -> AsyncTask, handler : Exception -> void) : AsyncTask
    {
      def tcs : TaskCompletionSource[object] = TaskCompletionSource();

      try
      {
        def awaiter = body().GetAwaiter();
        awaiter.OnCompleted(fun () : void
          {
            try
            {
              // needed because of validation,
              // exception throwing etc.
              awaiter.GetResult();
              _ = tcs.TrySetResult(null);
            }
            catch
            {
              ex =>
                try
                {
                  handler(ex);
                  _ = tcs.TrySetResult(null);
                }
                catch
                {
                  ex => _ = tcs.TrySetException(ex);
                }
            }
          });
      }
      catch
      {
        ex =>
          try
          {
            handler(ex);
            _ = tcs.TrySetResult(null);
          }
          catch
          {
            ex => _ = tcs.TrySetException(ex);
          }
      }

      AsyncTask(tcs.Task : Task);
    }
    
    public TryCatch[A](body : void -> AsyncTask[A], handler : Exception -> A) : AsyncTask[A]
    {
      def tcs : TaskCompletionSource[A] = TaskCompletionSource();

      try
      {
        def awaiter = body().GetAwaiter();
        awaiter.OnCompleted(fun () : void
          {
            try
            {
              _ = tcs.TrySetResult(awaiter.GetResult());
            }
            catch
            {
              ex =>
                try
                {
                  _ = tcs.TrySetResult(handler(ex));
                }
                catch
                {
                  ex => _ = tcs.TrySetException(ex);
                }
            }
          });
      }
      catch
      {
        ex =>
          try
          {
            _ = tcs.TrySetResult(handler(ex));
          }
          catch
          {
            ex => _ = tcs.TrySetException(ex);
          }
      }

      AsyncTask(tcs.Task);
    }
    
    #endregion

    #region TryFinally
    
    public TryFinally[A](body : void -> AsyncTask, handler : void -> void) : AsyncTask
    {
      def tcs : TaskCompletionSource[object] = TaskCompletionSource();
      
      try
      {
        def awaiter = body().GetAwaiter();
        awaiter.OnCompleted(fun () : void
          {
            mutable finalException : Exception = null;

            try
            {
              // needed because of validation,
              // exception throwing etc.
              awaiter.GetResult();
            }
            catch
            {
              ex => finalException = ex;
            }

            try
            {
              handler();
            }
            catch
            {
              ex => finalException = ex;
            }

            // it's important to call TrySetResult or
            // TrySetException after handler() executed
            if (finalException == null)
            {
              _ = tcs.TrySetResult(null);
            }
            else
            {
              _ = tcs.TrySetException(finalException);
            }
          });
      }
      catch
      {
        | ex =>
          mutable finalException = ex;

          try
          {
            handler();
          }
          catch
          {
            ex => finalException = ex;
          }
          
          _ = tcs.TrySetException(finalException);
      }

      AsyncTask(tcs.Task : Task);
    }
    
    public TryFinally[A](body : void -> AsyncTask[A], handler : void -> void) : AsyncTask[A]
    {
      def tcs : TaskCompletionSource[A] = TaskCompletionSource();

      try
      {
        def awaiter = body().GetAwaiter();
        awaiter.OnCompleted(fun () : void
          {
            mutable finalException : Exception = null;
            mutable finalResult : A;

            try
            {
              // needed because of validation,
              // exception throwing etc.
              finalResult = awaiter.GetResult();
            }
            catch
            {
              ex => finalException = ex;
            }

            try
            {
              handler();
            }
            catch
            {
              ex => finalException = ex;
            }

            // it's important to call TrySetResult or
            // TrySetException after handler() executed
            if (finalException == null)
            {
              _ = tcs.TrySetResult(finalResult);
            }
            else
            {
              _ = tcs.TrySetException(finalException);
            }
          });
      }
      catch
      {
        | ex =>
          mutable finalException = ex;

          try
          {
            handler();
          }
          catch
          {
            ex => finalException = ex;
          }
          
          _ = tcs.TrySetException(finalException);
      }

      AsyncTask(tcs.Task);
    }
    
    #endregion
    
    #region Using

    public Using[A](resource : A, cont : A -> AsyncTask) : AsyncTask
      where A : IDisposable
    {
      TryFinally(() => cont(resource), () =>
      {
        def resource = resource : IDisposable;
        when (resource != null) 
          resource.Dispose()
      })
    }

    public Using[A, B](resource : A, cont : A -> AsyncTask[B]) : AsyncTask[B]
      where A : IDisposable
    {
      TryFinally(() => cont(resource), () =>
      {
        def resource = resource : IDisposable;
        when (resource != null) 
          resource.Dispose()
      })
    }

    #endregion
  }
}
