/*
 * Copyright (c) 2012  Marek Gibek
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Runtime.CompilerServices;

namespace Nemerle.Async.Internal
{
  /// <summary>
  /// AsyncTask and AsyncTask[A] classes are needed for type system.
  ///
  /// It would be possible to replace them with Task and Task[A]
  /// if Task[A] wouldn't inherit from Task.
  /// But because it does, type system accepts Task and Task[A]
  /// when we type "Task". Thats why AsyncTask[A] was introduced
  /// which doesn't inherit from AsyncTask.
  /// </summary>
  [Record]
  public class AsyncTask[A]
  {
    public task: Task[A];
    
    public GetAwaiter() : TaskAwaiter[A]
    {
      task.GetAwaiter();
    }
  }
  
  [Record]
  public class AsyncTask
  {
    public task: Task;
    
    public GetAwaiter() : TaskAwaiter
    {
      task.GetAwaiter();
    }
  }
}
