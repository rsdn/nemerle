Warning! This is only a rough approximation how transformed code looks like.

Document is not precise (it was sketched before implementation,
real output code is a little bit more complicated),
but can give an idea how transformed code looks like.

The version 1.0 of AsyncAwait uses monad approach.
It's simpler to implement in functional language like Nemerle
than state machine approach (which is used by C# compiler).


Source:
-------

public async Task<T> MethodAsync()
{
	expr1();

	T k1 = await procAsync();
	expr2();

	T k2 = await procAsync();

	return k1 + k2;
}


Idea of what needs to be generated:
-----------------------------------

public Task<T> MethodAsync()
{
	TaskCompletionSource<T> tcs = new TaskCompletionSource<T>();

	expr1();

	TaskAwaiter<T> taskAwaiter = procAsync().GetAwaiter<T>();
	taskAwaiter.OnCompleted(() =>
		{
			T k1 = taskAwaiter.GetResult();
			expr2();
		
			taskAwaiter = procAsync().GetAwaiter<T>();
			taskAwaiter.OnCompleted(() =>
				{
					T k2 = taskAwaiter.GetResult();

					tcs.SetResult(k1 + k2);
				}
			);
		}
	);

	return tcs.Task;
}


Actually generated (monad-like) code that depends on Nemerle.Async
runtime assembly to behave like the code above:
------------------------------------------------------------------

AsyncBuilder.Run(() =>
	{
		expr1();

		AsyncBuilder.Bind(procAsync(), k1 =>
			{
				expr2();

				AsyncBuilder.Bind(procAsync(), k2 =>
					{
						k1 + k2;
					})
			})
	})
