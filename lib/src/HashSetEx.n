using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Diagnostics;

namespace Nemerle.Collections
{
  [System.Serializable]
  [System.Runtime.InteropServices.ComVisible(false)]
  [DebuggerDisplay("Count = {Count}: {ToString()}")]
  [DebuggerNonUserCode]
  public class HashSetEx[T] : IEnumerable[T]
  {
    _hashtable : Hashtable[T, T] = Hashtable();

    [DebuggerBrowsable(DebuggerBrowsableState.RootHidden)]
    public Items : Dictionary[T, T].KeyCollection { get { _hashtable.Keys } }

    public IsEmpty : bool { get { _hashtable.Count == 0 } }
    public Count   : int  { get { _hashtable.Count } }

    public Contains(item : T) : bool
    {
      _hashtable.ContainsKey(item)
    }

    public Add(mutable item : T) : bool
    {
      AddOrGetFirstAddedItem(ref item)
    }

    /// <summary>
    /// Return true if new item.
    /// Return false and replace with old item otherwise.
    /// </summary>
    public AddOrGetFirstAddedItem(item : ref T) : bool
    {
      mutable oldKey;
      if (_hashtable.TryGetValue(item, out oldKey))
      {
        item = oldKey;
        false;
      }
      else
      {
        _hashtable.Add(item, item);
        true;
      }
    }

    public TryGetFirstAddedItem(item : T, oldItem : out T) : bool
    {
      _hashtable.TryGetValue(item, out oldItem)
    }

    public GetEnumerator() : IEnumerator[T]
    {
      _hashtable.Keys.GetEnumerator()
    }
  }
}
