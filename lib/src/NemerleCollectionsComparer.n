/*
 * Copyright (c) 2009-2009  rampelstinskin@gmail.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of rampelstinskin may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using System;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

namespace Nemerle.Collections
{
  internal class NemerleCollectionsComparer
  {
    public abstract class Comparer[T]
    {
      private static default_ : T * T -> int = Create();
      public static Default : T * T -> int
      {
        get
        {
          if (default_ == null)
          {
            throw ArgumentException($"Type $(typeof(T).FullName) must implement System.IComparable[$(typeof(T).FullName)].");
          }
          else
          {
            default_;
          }
        }
      }

      public abstract CreateImpl() : T * T -> int;

      private static Create() : T * T -> int
      {
        def create(comparerType, comparableType)
        {
          def comparerType = comparerType.GetGenericTypeDefinition().MakeGenericType(array[comparableType]);
          def creator = Activator.CreateInstance(comparerType) :> Comparer[T];
          creator.CreateImpl();
        }
        match (typeof(T))
        {
        | comparableType when typeof(IComparable[T]).IsAssignableFrom(comparableType) =>
          create(typeof(GenericComparer[int]), comparableType);
        | _ => null;
        }
      }
    }

    private class GenericComparer[T] : Comparer[T]
      where T : IComparable[T]
    {
      public override CreateImpl() : T * T -> int
      {
        _.CompareTo(_)
      }
    }
/*
    private class NullableComparer[T] : Comparer[T?]
      where T : struct
    {
      private _cmp : T * T -> int = NemerleCollectionsComparer.Comparer.Default;
      protected override CreateImpl() : T? * T? -> int
      {
        fun(x, y)
        {
          if (x.HasValue)
          {
            if (y.HasValue)
            {
              _cmp(x.Value, y.Value);
            }
            else
            {
              1;
            }
          }
          else
          {
            if (y.HasValue)
            {
              -1;
            }
            else
            {
              0;
            }
          }
        }
      }
    }
*/
  }
}
