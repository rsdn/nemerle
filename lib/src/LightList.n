using Nemerle.Collections;
using Nemerle.Imperative;

using SCG = System.Collections.Generic;

namespace Nemerle.Collections
{
  public struct LightList[T]
  {
    private mutable _data : SCG.List[T];
    private mutable _firstItem : T;
    private mutable _hasFirstItem : bool;

    public FirstItem : T { get _firstItem }

    private Init() : void
    {
      when (_data == null)
      {
        _data = SCG.List();
        when (_hasFirstItem)
          _data.Add(_firstItem);
      }
    }

    public Count : int
    {
      get
      {
        if (_data != null)
          _data.Count
        else if (_hasFirstItem)
          1
        else
          0
      }
    }

    public Add(item : T) : void
    {
      if (_hasFirstItem)
      {
        Init();
        _data.Add(item);
      }
      else
      {
        _hasFirstItem = true;
        _firstItem = item;
      }
    }

    public AddRange(items : SCG.IEnumerable[T]) : void
    {
      Init();
      _data.AddRange(items);
    }

    public Item[index : int] : T
    {
      get
      {
        if (index == 0 && _hasFirstItem)
          _firstItem
        else
        {
          assert(_data != null, "Index out of range");
          _data[index]
        }
      }
    }

    public ToList() : SCG.List[T]
    {
      Init();
      _data
    }

    public ToArray() : array[T]
    {
      if (_data != null)
        _data.ToArray()
      else if (_hasFirstItem)
        array[_firstItem]
      else
        array(0)
    }

    public ToNList() : list[T]
    {
      if (_data != null)
        _data.ToNList()
      else if (_hasFirstItem)
        [_firstItem]
      else
        []
    }

    public struct Enumerator
    {
      private _list : LightList[T];
      private mutable _i : int;
      public this(list : LightList[T])
      {
        _list = list;
        _i = -1;
      }

      public Current : T { get; private set; }

      public MoveNext() : bool
      {
        ++_i;
        if (_i == 0 && _list._hasFirstItem)
        {
          Current = _list._firstItem;
          true;
        }
        else if (_list._data != null)
        {
          if (_i < _list._data.Count)
          {
            Current = _list._data[_i];
            true;
          }
          else
            false;
        }
        else
          false
      }

      public Reset() : void
      {
        _i = -1;
      }
    }

    public GetEnumerator() : Enumerator
    {
      Enumerator(this)
    }
  }
}
