/*
 * Copyright (c) 2003-2008 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


namespace Nemerle.Collections
{
  /// The state of a list enumerator.
  internal enum ListEnumState
  {
    | BeforeFirst
    | Correct
    | AfterLast
  }

  
  /// An enumerator for lists.
  public struct ListEnumerator[T] : System.Collections.Generic.IEnumerator[T], ICovariantEnumerator[T]
  {
    // -- PUBLIC CONSTRUCTORS -----------------------------------------------

    public this(@list : list[T]) 
    {
      _list  = @list;

      Reset()
    }

    Dispose() : void implements System.IDisposable.Dispose { }

    DoMove() : bool 
    {
      match (_rest)
      {
        | hd :: tl => 
          _current = hd;
          _rest    = tl;
          true

        | _ => 
          _state = ListEnumState.AfterLast;
          _current = default(T);
          false
      }       
    }
    
    /// -- PUBLIC METHODS ----------------------------------------------------
    
    public MoveNext() : bool 
    {
      match (_state)
      {
        | ListEnumState.BeforeFirst =>
          _state = ListEnumState.Correct;
          DoMove()

        | ListEnumState.Correct   => DoMove()
        | ListEnumState.AfterLast => false
      }
    }

    public Reset () : void
    {
      _rest  = _list;
      _state = ListEnumState.BeforeFirst;
    }


    /* -- PUBLIC PROPERTIES ------------------------------------------------- */
    
    public Current : T  { get { _current } }
    
    ObjectCurrent : object implements System.Collections.IEnumerator.Current
    {
      get
      {
        match (_state)
        {
          | ListEnumState.Correct     => _current
          | ListEnumState.BeforeFirst => throw System.InvalidOperationException("Enumeration has not started.")
          | ListEnumState.AfterLast   => throw System.InvalidOperationException("Enumeration already finished.")
        }
      }
    }
    

    /* -- PRIVATE FIELDS ---------------------------------------------------- */

    private mutable _list    : list[T];
    private mutable _current : T;
    private mutable _rest    : list[T];
    private mutable _state   : ListEnumState;
  }
}

