namespace Nemerle.Core 
{
  [System.Serializable]
  public class AssertionException : System.Exception 
  {
    public this () {}

    public this (file : string, line : int, cond : string, msg : string) 
    { 
      def cond = if (cond != "") " ``" + cond + "''" else "";
      def m = "assertion" + cond + " failed in file " + file + ", line " 
              + line.ToString ();
      def m = if (msg != "") m + ": " + msg else m;
      base (m);
    }
  }

  [System.Serializable]
  public class MatchFailureException : System.Exception 
  {
    public this () {}
  }

  [System.Serializable]
  public class NullMatchException : MatchFailureException
  {
    public this () {}

    public static raise_self () : bool 
    { 
      throw NullMatchException ()
    }
  }

  [System.Serializable]
  public class AssemblyFindException : System.Exception 
  {
    public this() {}
    public this(message : string) { base(message) }
  }

  public type byte = System.Byte;
  public type sbyte = System.SByte;  
  public type short = System.Int16;
  public type ushort = System.UInt16;  
  public type int = System.Int32;
  public type uint = System.UInt32;  
  public type long = System.Int64;
  public type ulong = System.UInt64;  
  public type float = System.Single;
  public type double = System.Double;
  public type decimal = System.Decimal; 
  public type string = System.String;
  public type object = System.Object;
  public type bool = System.Boolean;
  public type char = System.Char;
}

namespace Nemerle.Hacks {
  public class IComparableClass : System.IComparable [IComparableClass]
  {
    public CompareTo (_ : IComparableClass) : int
    {
      0
    }
  }
}
