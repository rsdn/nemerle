using System;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Reflection;

using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.IO;
using Nemerle.Builtins.Function;
using Nemerle.Utility;

using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;

using Nemerle.Assertions;

using TT = Nemerle.Compiler.Typedtree;
using SCG = System.Collections.Generic;
using Debug = System.Diagnostics.Debug;

namespace Nemerle.Linq
{
  //type LParms = list[Hashtable[string, PExpr]];
  type LParms = Map[LocalValue, PExpr];
  
  internal class Converter
  {
    public Result    : PExpr { get; }
    private _manager : ManagerClass;
    private _typer   : Typer;
    
    public this(typer : Typer, tExpr : TExpr)
    {
      _typer   = typer;
      _manager = typer.Manager;
      Result   = ToExpr(Map(), tExpr);
    }
    
    Error(expr : TExpr, msg : string = null) : PExpr
    {
      //assert2(false, "fail convertion to 'expression tree'");
      def text =
        if (msg == null)
          $"conversion from $(expr.GetType().Name) (expr: $expr) into 'expression tree' not supported"
        else
          msg;
      Message.Error(expr.Location, text);
      PExpr.Error(expr.Location)
    }

    ToExpr(lparms : LParms, texpr  : TExpr) : PExpr
    {
      def simplified = SimplefyTExpr(texpr);
      def result = 
        match (simplified)
        {
          | MacroEnvelope(_, _, expended, _)      => NestedToExpression(lparms, expended)
          | DefFunctionsIn([header], _)           => ConvertLambdaExpression(lparms, header)
          | Block(_, expr)                        => TryAddConvertion(lparms, simplified.Type, expr)
          | LocalRef as r                         => ConvertLocalRefToClosuredField(lparms, r)
          | PropertyMember(tObj, prop)            => <[ Expression.Property($(ToExpr(lparms, tObj)), $(MakeMetodInfo(tObj.Type, prop))) ]>;
          | Tuple(args)                           => ConvertTuple(lparms, args, texpr.Type)
          | TypeConversion(expr, type, kind, _)   => ConvertTypeConversion(lparms, expr, type, kind)
          | Call(func, parms, is_tail)            => ConvertCall(lparms, SimplefyTExpr(func), parms, is_tail, texpr.Type)
          | Literal as t                          => <[ Expression.Constant($(t : typed), typeof($(t.ty : typed)))]> //when t.val is Literal.Enum => 
          | FieldMember(tObj, field)              => <[ Expression.Field($(ToExpr(lparms, tObj)), $(TExpr.FieldOf(tObj.Type, field) : typed) : FieldInfo) ]>
          | This as expr                          => <[ Expression.Constant(this, typeof($(expr.Type : typed))) ]>
          | Match as matchOperator                => ConvertMatch(lparms, matchOperator)
          | TypeOf(type)                          => <[ Expression.Constant(typeof($(type : typed)), typeof(System.Type)) ]>
          | StaticPropertyRef(from, prop)         => <[ Expression.Property(null, $(MakeMetodInfo(from, prop))) ]>
          | Array(args, [_])                      => <[ Expression.NewArrayInit(typeof($((texpr.Type.Fix() :> FixedType.Array).t : typed)), array[..$(args.Map(ToExpr(lparms, _)))]) ]>
          | TupleIndexer(obj, pos, _)             => <[ Expression.Field($(ToExpr(lparms, obj)), $("Field" + pos.ToString() : string)) ]>
          | StaticRef(from, field is IField, [])  => <[ Expression.Field(null, $(PExpr.Typed(TExpr.FieldOf(from, field))) : FieldInfo) ]>
          | DefValIn (name, init, body)           => ConvertMemberInit(lparms, name, init, body)
          | DefaultValue as expr                  => <[ Expression.Default(typeof($(expr.Type : typed))) ]>
          | unsupported                           => assert2(false, "fail convertion to 'expression tree'"); Error(unsupported)
        };
        
      result
    }
    
    TryAddConvertion(lparms : LParms, requiredType : TypeVar, nestedExpr : TExpr) : PExpr
    {
      def result     = ToExpr(lparms, nestedExpr);
      def nestedType = nestedExpr.Type;

      if (requiredType.Equals(_manager.InternalType.Object) && (!nestedType.CanBeNull || nestedType.IsValueType))
        <[ Expression.Convert($result, typeof($(requiredType : typed))) ]>
      else
        result
    }

    NestedToExpression(lparms : LParms, tExpr : TExpr) : PExpr
    {
      def delay(val)
      {
        def name = lparms.Get(val);

        _typer.DelayAction(name, _typer.FreshTypeVar(), 
          Typer.DelayedLambdaAction(
            _ => 
              if (name.TypedObject == null) 
                None()
              else
                Some(name.TypedObject :> TExpr)))
      }
      def transform(expr : TExpr) : TExpr
      {
        | ClosureObjectOf(TExpr.LocalRef(val)) when lparms.Contains(val) => TExpr.ClosureObjectOf(delay(val))
        | ClosureFieldOf (TExpr.LocalRef(val)) when lparms.Contains(val) => TExpr.ClosureFieldOf (delay(val))
        | Cache
        | CacheRef
        | PropertyMember
        | StaticPropertyRef
        | EventMember
        | StaticEventRef => expr
        | Block(_, expr) => expr.Walk(transform)
        | Delayed(d) => assert2(d.IsResolved); d.ResolutionResult
        | _ => null
      }
      
      //def w = ExprWalker();
      //w.Walk();

      _typer.TransformWhenAllTypesWouldBeInfered(
        fun(_, tExpr) 
        {
          def newExpr = tExpr.Walk(transform);
          PExpr.Typed(newExpr)
        }, tExpr, null);      
    }

    /// C# object initializer
    ConvertMemberInit(lparms : LParms, val : LocalValue, init : TExpr, body : TExpr) : PExpr
    {
      // TODO: проверить что init является вызовом конструктора
      def ctorTree = ToExpr(lparms, init);
      match (body)
      {
        | TExpr.Sequence(expr, LocalRef(val2)) =>
          def bindings = SCG.List();
          def addBinding(expr : TExpr) : void
          {
            | Sequence(e1, e2) =>
              addBinding(e1);
              addBinding(e2);
              
            | Assign(FieldMember(obj, field), source) =>
              def sourceTree = ToExpr(lparms, source);
              def fieldRef = PExpr.Typed(TExpr.FieldOf(obj.Type, field));                    
              bindings.Add(<[ Expression.Bind($fieldRef, $sourceTree) ]>);
            
            | Assign(PropertyMember(obj, prop), source) =>
              def sourceTree = ToExpr(lparms, source);
              bindings.Add(<[ Expression.Bind($(MakeMetodInfo(obj.Type, prop)), $sourceTree) ]>);
              
            | _ => bindings.Add(Error(expr))
          }
          if (val.Equals(val2))
          {
            addBinding(expr);
            <[ Expression.MemberInit($ctorTree, array[..$(bindings.NToList())]) ]>
          }
          else
            PExpr.Error(val2.Location, $"Incorrect initializer expression. The name must be '$val'.")
            
        | _ => Error(body)
      }
    }
    
    ConvertMatch(lparms : LParms, tExpr : TExpr) : PExpr
    {
      def isTupleDecompose(pattern : Pattern) : bool
      {
        | Pattern.As(Pattern.Wildcard, _) => true
        | Pattern.Wildcard                => true
        | Pattern.Tuple(patterns)         => patterns.ForAll(isTupleDecompose)
        | _                               => false
      }
      def isBool(expr : TExpr) : bool { expr.Type.Equals(_manager.InternalType.Boolean) }
      match (tExpr)
      {//Literal(Literal.Bool(false)
        | Match(LocalRef as local, [Match_case([(Pattern.Tuple(patterns), _, [])], body, _)]) when patterns.ForAll(isTupleDecompose) =>
          //assert2(false);
          def vars = SCG.List();
          def toNameMap(tuple : PExpr, i : int, pattern : Pattern) : void
          {
            match (pattern)
            {
              | Pattern.Wildcard => ()
              | Pattern.As(Pattern.Wildcard, local) =>
                def fieldName = $"Field$i";
                vars.Add(local, <[ Expression.Field($tuple, $(fieldName : string)) ]>);
                
              | Pattern.Tuple(patterns) => 
                //assert2(false, "nested pattern");
                def fieldName = $"Field$i";
                def tuple = <[ Expression.Field($tuple, $(fieldName : string)) ]>;
                
                foreach (pattern in patterns with i)
                  toNameMap(tuple, i, pattern);
                  
              | _ => assert2(false); assert(false);
            }
          }
          
          def tuple = ToExpr(lparms, local);
          
          foreach (pattern in patterns with i)
            toNameMap(tuple, i, pattern);
            
          def newVars  = vars.NToList();
          def newNames = lparms.AddList(newVars);
        
          ToExpr(newNames, body)
          
        | Match(cond, [Match_case([(Pattern.Literal(Bool(true)), _, [])],  trueExpr, _), // cond && trueExpr
                       Match_case([(Pattern.Wildcard, _, [])], Literal(Bool(false)), _)]) when isBool(cond) 
          =>
          def left  = ToExpr(lparms, cond);
          def right = ToExpr(lparms, trueExpr);
          <[ Expression.MakeBinary(ExpressionType.AndAlso, $left, $right) ]>
          
        | Match(cond, [Match_case([(Pattern.Literal(Bool(true)), _, [])], Literal(Bool(true)), _), // cond || falseExpr
                       Match_case([(Pattern.Wildcard, _, [])],                      falseExpr, _)]) when isBool(cond) 
          =>
          def left  = ToExpr(lparms, cond);
          def right = ToExpr(lparms, falseExpr);
          <[ Expression.MakeBinary(ExpressionType.OrElse, $left, $right) ]>

        | Match(cond, [Match_case([(Pattern.Literal(Literal.Bool(true)), _, [])],  trueExpr, _), // if (cond) trueExpr else falseExpr
                       Match_case([(Pattern.Wildcard, _, [])],                    falseExpr, _)]) when cond.Type.Equals(_manager.InternalType.Boolean) 
          =>
          def condExpr = ToExpr(lparms, cond);
          def left     = ToExpr(lparms, trueExpr);
          def right    = ToExpr(lparms, falseExpr);
          <[ Expression.Condition($condExpr, $left, $right) ]>

        | _ => 
          assert2(false, "fail convertion to 'expression tree'");
          null
      }
      
    }
    
    ConvertParameters(lparms : LParms, parms : list[Parm]) : list[PExpr]
    {
      def result = SCG.List();
      
      foreach (p in parms)
      {
        def exprType     = p.expr.Type;
        def requiredType = p.required_type ?? exprType;
        
        def needConvertion = requiredType.Equals(_manager.InternalType.Object) && (!exprType.CanBeNull || exprType.IsValueType);

        if (exprType.TryRequire(requiredType) && !needConvertion)
          result.Add(ToExpr(lparms, p.expr));
        else
        {
          // TODO: VLadD2: Implement literal type convertion
          def exprTree = ToExpr(lparms, p.expr);
          result.Add(<[ Expression.Convert($exprTree, typeof($(requiredType : typed))) ]>);
        }
      }
      
      result.NToList()
    }
    
    GetMethodInfo(from : FixedType, meth : IMethod, typeArgs : list[TypeVar]) : PExpr
    {
      def method = 
        match (meth.BuiltinKind)
        {
          | CallWithCast(method) => method
          | _ => meth
        };
      
      PExpr.Typed(TExpr.MethodOf(from, method, typeArgs))
    }
    
    ConvertCall(lparms : LParms, func : TExpr, parms : list[Parm], _is_tail : bool, _type : TypeVar) : PExpr
    {
      match (func)
      {
        | MethodRef(obj, method, typeArgs, _notvirtual) =>
          def inst = ToExpr(lparms, obj);
          def methodInfo = PExpr.Typed(TExpr.MethodOf(obj.Type, method, typeArgs));
          def args = ConvertParameters(lparms, parms);
          <[ Expression.Call($inst, $methodInfo, array[..$args]) ]>
          
        | OpCode with methodInfo = <[ null ]>
        | StaticRef(from, meth is IMethod, typeArgs) 
          when meth.Name.StartsWith("op_") && func.ParsedObject is PExpr 
          with methodInfo = GetMethodInfo(from, meth, typeArgs)
          =>
          match (func.ParsedObject)
          {
            | <[ $_ +   $_ ]> with exprType = <[ ExpressionType.Add ]>
            | <[ $_ *   $_ ]> with exprType = <[ ExpressionType.Multiply ]>
            | <[ $_ -   $_ ]> with exprType = <[ ExpressionType.Subtract ]>
            | <[ $_ /   $_ ]> with exprType = <[ ExpressionType.Divide ]>
            | <[ $_ ==  $_ ]> with exprType = <[ ExpressionType.Equal ]>
            | <[ $_ !=  $_ ]> with exprType = <[ ExpressionType.NotEqual ]>
            | <[ $_ &&  $_ ]> with exprType = <[ ExpressionType.AndAlso ]>
            | <[ $_ %&& $_ ]> with exprType = <[ ExpressionType.AndAlso ]>
            | <[ $_ ||  $_ ]> with exprType = <[ ExpressionType.OrElse ]>
            | <[ $_ %|| $_ ]> with exprType = <[ ExpressionType.OrElse ]>
            | <[ $_ &   $_ ]> with exprType = <[ ExpressionType.And ]>
            | <[ $_ %&  $_ ]> with exprType = <[ ExpressionType.And ]>
            | <[ $_ %   $_ ]> with exprType = <[ ExpressionType.Modulo ]>
            | <[ $_ |   $_ ]> with exprType = <[ ExpressionType.Or ]>
            | <[ $_ %|  $_ ]> with exprType = <[ ExpressionType.Or ]>
            | <[ $_ ^   $_ ]> with exprType = <[ ExpressionType.ExclusiveOr ]>
            | <[ $_ %^  $_ ]> with exprType = <[ ExpressionType.ExclusiveOr ]>
            | <[ $_ >   $_ ]> with exprType = <[ ExpressionType.GreaterThan ]>
            | <[ $_ >=  $_ ]> with exprType = <[ ExpressionType.GreaterThanOrEqual ]>
            | <[ $_ <   $_ ]> with exprType = <[ ExpressionType.LessThan ]>
            | <[ $_ <=  $_ ]> with exprType = <[ ExpressionType.LessThanOrEqual ]>
            =>
              //assert2(false);
              assert(parms.Length == 2);
              def convertedParams = ConvertParameters(lparms, parms);
              def left  = convertedParams.Head;
              def right = convertedParams.Tail.Head;
              def liftToNull = <[ false ]>;
              <[ Expression.MakeBinary($exprType, $left, $right, $liftToNull, $methodInfo) ]>

            | <[ - $_ ]> with exprType = <[ ExpressionType.Negate ]>
            | <[ ! $_ ]> with exprType = <[ ExpressionType.Not ]>
            =>
              //assert2(false);
              assert(parms.Length == 1);
              def convertedParams = ConvertParameters(lparms, parms);
              def expr  = convertedParams.Head;
              <[ Expression.MakeUnary($exprType, $expr, null, $methodInfo) ]>

            | _ => 
              assert2(false, "fail convertion to 'expression tree'");
              null
         }
        
        | TExpr.StaticRef(from, meth is IMethod, _) when meth.MemberKind == MemberKinds.Constructor =>
          if (from.TypeInfo?.IsDelegate)
          {
            // VladD2: Компилятор добавляет вызов конструктора делегата, но при преобразовании в ET уже возвращается
            // ET возращающее делегат, так что вызов конструктора делегата нужно устранить.
            assert2(parms.Length == 1);
            assert2(meth.Header.Parameters.Length == 2);
            def args = ConvertParameters(lparms, parms);
            args.Head
          }
          else
          {
            //assert2(false, "fail convertion to 'expression tree'");
            def args1       = ConvertParameters(lparms, parms);
            def getCtorInfo = PExpr.Typed(TExpr.CtorOf(from, meth));
            <[ Expression.New($getCtorInfo, array[..$args1]) ]>
          }

        | TExpr.StaticRef(from, meth is IMethod, typeArgs) when meth.MemberKind == MemberKinds.Method =>
          //assert2(false, "fail convertion to 'expression tree'");
          def args1         = ConvertParameters(lparms, parms);
          def methodInfo = PExpr.Typed(TExpr.MethodOf(from, meth, typeArgs));
          // TODO: Разобраться почему нет аргумента метода-расширения!
          <[ Expression.Call($methodInfo, array[..$args1]) ]>
          
        | LocalRef =>
          def funcTree = ToExpr(lparms, func);
          def args = ConvertParameters(lparms, parms);
          // TODO: Разобраться почему нет аргумента метода-расширения!
          <[ Expression.Invoke($funcTree, array[..$args]) ]>
          
        | PropertyMember(tObj, prop) =>
          //assert2(false, "call indexer ~~~~~~~~");
          def inst = ToExpr(lparms, tObj);
          def args = ConvertParameters(lparms, parms);
          <[ Expression.Call($inst, $(MakeMetodInfo(tObj.Type, prop)), array[..$args]) ]>
              
        | _ => 
          assert2(false, "fail convertion to 'expression tree'");
          null
      }
    }

    ConvertTypeConversion(lparms : LParms, tExpr : TExpr, type : TypeVar, _kind : ConversionKind) : PExpr
    {
      <[ Expression.Convert($(ToExpr(lparms, tExpr)), typeof($(type : typed)) ) ]>
    }
    
    ConvertLambdaExpression(lparms : LParms, header : TT.TFunHeader) : PExpr
    {
      def toParmExpr(local : LocalValue, ty : TypeVar)
      {
        //when (local.Name == "_N_pat_3233")
        //  assert2(false);
        //match(ty.HintFast)
        //{
        //  | FixedType.Tuple([a, b]) when a.IsFree || a.IsFree => assert2(false);
        //  | _ => ()
        //}
        def parmVar = Macros.NewSymbol($"param_$(local)_");
        def e = <[ Expression.Parameter(typeof($(ty : typed)), $(local.Name : string)) ]>;
        (local, parmVar, e)
      }

      //foreach (p in header.Parameters)
      //  p.decl.Register(); // To prevent assert in Typer2. After all, we transform the parameters into Expression tre.

      //foreach (p when (p.Name == "keyXxx") in header.Parameters)
      //{
      //}
        
      def rType       = header.ReturnType;
      def rTypeRef    = PExpr.TypedType(rType);
      def parms       = header.Parameters.Map(p => (p.decl, p.ty));
      def typeArgs    = match(rType.Hint)
      {
        | Some(FixedType.Void) => parms.Map((_, ty) => PExpr.TypedType(ty));
        | _                    => parms.Map((_, ty) => PExpr.TypedType(ty)) + [rTypeRef];
      }
      def parmExprs   = parms.Map(toParmExpr);
      def defines     = parmExprs.Map((_, parmVar, e) => <[ def $(parmVar : name) = $e ]>);
      def parmAssocs  = parmExprs.Map((name, var, _)  => (name, <[ $(var : name) ]>));
      def paramsMap   = lparms.AddList(parmAssocs);

      def body =
        match (header.Body)
        {
          | FunBody.Typed(body) => body
          | _ => Message.FatalError(header.Location, "Cant convert body to 'Expression Tree' because the body not typed.")
        };
      def body2       = ToExpr(paramsMap, body);
      def parms       = parmAssocs.Map((_, parmVarRef) => parmVarRef);
      def parms2      = <[ array[..$parms] ]>;
          
      def body3 = 
        match(rType.Hint)
        {
          | Some(FixedType.Void) => <[ Expression.Lambda.[Action.[..$typeArgs]]($body2, $parms2) : Expression.[Action.[..$typeArgs]] ]>;
          | _                    => <[ Expression.Lambda.[Func.[..$typeArgs]]($body2, $parms2) : Expression.[Func.[..$typeArgs]] ]>;
        };
      def lambda = <[ { ..$(defines + [body3]) } ]>;
      lambda
    }

    ConvertLocalRefToClosuredField(lparms : LParms, local : TExpr.LocalRef) : PExpr
    {
      def localValue = local.decl;
      
      when (localValue.Name == "keyXxx")
      {
      }

      if (lparms.Contains(localValue))
        lparms.Get(localValue)
      else
      {
        def closure   = TExpr.ClosureObjectOf(_manager.InternalType.Object, local);
        def fieldInfo = TExpr.ClosureFieldOf(_manager.InternalType, local);
        <[ Expression.Field(Expression.Constant($(closure : typed)), $(fieldInfo : typed)) ]>
      }
    }

    ConvertTuple(lparms : LParms, args : list[TExpr], type : TypeVar) : PExpr
    {
      def makeFieldInfoList(tupleType, i, ty : TypeVar, acc = [])
      {
        if (i <= 0)
          acc
        else
          makeFieldInfoList(tupleType, i - 1, ty, PExpr.Typed(TExpr.FieldOf(ty, tupleType.GetField(i))) :: acc)
      }
      def tupleType   = _manager.InternalType.GetTupleType(args.Length);
      def getCtorInfo = PExpr.Typed(TExpr.CtorOf(type, tupleType.Ctor));
      def argsExprs   = args.Map(a => ToExpr(lparms, a));
      def fieldsInfos = makeFieldInfoList(tupleType, args.Length, TupleType.Make(type));
      def expr        = <[ Expression.New($getCtorInfo, array[..$argsExprs], array[..$fieldsInfos]) ]>;
      expr
    }
    
    SimplefyTExpr(tExpr : TExpr) : TExpr
    {
      | Delayed(susp) when susp.IsResolved => SimplefyTExpr(susp.ResolutionResult)
      | Call(Delayed(susp), parms, is_tail) when susp.IsResolved => 
        def kind = susp.DtKind :> Typer.DelayedTyping.Kind.Resolved;
        if (kind.parms : object == parms)
          tExpr
        else
          TExpr.Call(tExpr.Location, tExpr.Type, SimplefyTExpr(susp.ResolutionResult), kind.parms, is_tail)
        
      | Delayed                            => Message.FatalError(tExpr.Location, "Unresolved Delayed typing action '$Delayed'.")
      | DebugInfo(expr, _)                 => SimplefyTExpr(expr)
      | MacroEnvelope(<[ Nemerle.Linq.ToExpression($_) ]>, _, _, _) => tExpr
      | MacroEnvelope(_, _, expended, _)   => SimplefyTExpr(expended)
      | _                                  => tExpr
    }
    
    MakeMetodInfo(from : TypeVar, prop : IProperty) : PExpr
    {
      def metInfo = PExpr.Typed(TExpr.MethodOf(from, prop.GetGetter(), []));
      metInfo
    }
  }

  module LinqExprConvertion
  {
    internal ToExpressionImpl(typer : Typer, expr : PExpr) : PExpr
    {
      def getFunHeader(tExpr)
      {
        | TExpr.DefFunctionsIn([typedFunHeader], _) => typedFunHeader
        | TExpr.MacroEnvelope(_, _, expanded, _)    => getFunHeader(expanded)
        | _                                         => null
      }
      
      def tExpr = 
        match (expr)
        {
          | PExpr.Typed(typed) => typed
          | _ => typer.TypeExpr(expr); // Типизируем выражение. В нем могут быть недотипизированные подвыражения!
        };
      
      def funHeader = getFunHeader(tExpr);

      if (funHeader == null)
      {
        Message.Error(expr.Location, "expected lambda definition");
        expr // возвращаем исходное выражение в надежде на то, что дальнейшая типизация даст дополнительную информацию программисту
      }
      else
      {
        def resultPExpr = typer.TransformWhenAllTypesWouldBeInfered(
          fun(pExpr, tExpr) // данная лямбда вызовется тогда когда в tExpr не останется 
          {                 // неразрешенных типов и отложенной типизации
            assert2(null == pExpr.TypedObject || pExpr.TypedObject : object == tExpr);
            def resultPExpr = Converter(typer, tExpr).Result;
            resultPExpr // здесь можно поглядеть на результат трансформации
          }, tExpr, expr);

        if (resultPExpr is PExpr.Error)
          resultPExpr
        else
        {
          def retType = funHeader.ReturnType;          
          
          def returnExpression = 
            match(retType.Hint)
            {          
              | Some(FixedType.Void) =>
                def typeArgs = funHeader.Parameters.Map(p => PExpr.TypedType(p.ty)); 
                <[ Expression.[Action.[..$typeArgs]] ]>
                
              | _ =>
                // TransformWhenAllTypesWouldBeInfered вернет управление немедленно. Он не будет дожидаться
                // пока все типы в подвыражениях будут вывдены. Но данный макрос меняет тип выражения.
                // Если мы не сообщим о типе выражения компилятру сразу, может получиться так, что
                // он выведет не верный тип. Даем подскажку компилятру указывая тип выражения явно.
                // Обратите внимание на то, что аргуметы типа к этому моменту могут быть еще не выведены.
                // Но это не важно, так как компилятор строит граф зависимостей для всех типов внутри метода.
                // Нам важно, что мы передали компилятору типы на которые уже налжены ограничения 
                // (ведь они взяты из описания лябды). Это позволит компилятору сделать правильный вывод типов.
                def typeArgs = funHeader.Parameters.Map(p => PExpr.TypedType(p.ty)) + [PExpr.TypedType(retType)];
                <[Expression.[Func.[..$typeArgs]]]>
            };
          <[
            {
              def closureFunc() : $returnExpression
              {
                $resultPExpr
              }
              def closureFuncRef = closureFunc; // предотвращаем оптимизацию устраняющую замыкание!
              closureFuncRef()
            }
          ]>
       }
      }
    }
 }
}
 