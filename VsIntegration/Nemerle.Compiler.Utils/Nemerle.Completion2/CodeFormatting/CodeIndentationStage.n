using System;
using System.Diagnostics;
using System.Text;

using Nemerle.Utility;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using SCG = System.Collections.Generic;

namespace Nemerle.Completion2.CodeFormatting
{
  [Record]
  public struct IndentInfo
  {
     public InsertTabs : bool;
     public IndentSize : int;
     public TabSize : int;
  }
  
  public class CodeIndentationStage2 : CodeFormattingStageBase
  {
    public this (engine : IIdeEngine, source : IIdeSource, info : IndentInfo)
    {
      base(engine, source);
      indent_info = info
    }
    
    mutable currentLine = 1;
    mutable indentStack : list[int] = [];
    
    indent_info : IndentInfo;
    
    PushIndent() : void
    {
      PushIndent(PeekIndent() + 1)
    }
    
    PushIndent(arg : int) : void
    {
      indentStack ::= arg;
    }
    
    PopIndent() : int
    {
      match(indentStack)
      {
        | x :: xs => indentStack = xs; 
                     x
        | [] => 1 // the first column. 
      }  
    }
    PeekIndent() : int
    {
      match(indentStack)
      {
        | x :: _ => x;
        | [] => 1 // the first column. 
      }  
    }
    
    class IndentPusher : IDisposable
    {
      parentClass : CodeIndentationStage2;
      public this(parent :  CodeIndentationStage2, indentValue : int)
      {
        parentClass = parent;
        parentClass.PushIndent(indentValue);
      }
      
      public Dispose() : void
      {
        _ = parentClass.PopIndent();
      }
    }
    
    GetIndentPusher() : IndentPusher
    {
      IndentPusher(this, PeekIndent() + 1)
    }
    
    GetIndentPusher(arg : int) : IndentPusher
    {
      IndentPusher(this, arg);
    }
    
    
    public static IsWhiteSpace(this token : Token) : bool
    {
      match(token)
      {
        | Token.WhiteSpace
        | Token.Indent
        | Token.NewLine
        | Token.Comment => true;
        | _ => false
      }
    }
    
			public static MakeIndentString(indentCount : int, insertTabs : bool, indentSize : int, tabSize : int) : string
			{
				 if (insertTabs)
				 {
						def allIndentSize = indentCount * indentSize;
						def spacesNeeded = allIndentSize % tabSize;
						def tabsNeeded = allIndentSize / tabSize;

						if (tabsNeeded > 0 && spacesNeeded > 0)
						{
							 def sb = StringBuilder(tabsNeeded + spacesNeeded);
							 def sb = sb.Append('\t', tabsNeeded);
							 def sb = sb.Append(' ', spacesNeeded);
							 sb.ToString();
						}
						else if (tabsNeeded > 0)
							 string('\t', tabsNeeded); else if (spacesNeeded > 0) string(' ', spacesNeeded); else "";
				 }
				 else
						string(' ', indentSize * indentCount);
			}
    
    RecalcLocation(loc : Location) : Location
    {
      def recalc(col, results)
      {
        mutable newCol = col;
        
        foreach(fr in results)
        {
          when(fr.StartCol < col && fr.EndCol <= col && fr.StartLine == fr.EndLine)
          {
            newCol += (fr.ReplacementString.Length - (fr.EndCol - fr.StartCol));
          }
        }
        
        newCol
      }
      
      def newStartCol = recalc(loc.Column, GetResults().Filter(fr => fr.StartLine == loc.Line));
      def newEndCol = recalc(loc.EndColumn, GetResults().Filter(fr => fr.StartLine == loc.EndLine));
      
      Location(loc.FileIndex, loc.Line, newStartCol, loc.EndLine, newEndCol);
    }
    
    public TokensInLine(loc : Location) : SCG.IEnumerable[Token]
    {
      _tokenFinder.FindAll(tok => tok.Location.Line == loc.Line);
    }

    IndentLocation(loc : Location) : void
    {
      def getIndentString(size)
      {
        MakeIndentString(size, indent_info.InsertTabs, indent_info.IndentSize, indent_info.TabSize)
      }
      
      def canOperate = 
       {
                       if (!loc.IsEmpty)
                       {
                         def tok_this_line=TokensInLine(loc);
                         def not_in_view=tok_this_line.Filter(tok => tok.Location.EndColumn <= loc.Column);
                         not_in_view.ForAll(_.IsWhiteSpace());
                       } else false
       }
      def isWithinRange = if(RegionToFormat.IsEmpty) true
                          else if(RegionToFormat.Contains(loc.Line, loc.Column)) true
                               else false;
      when(canOperate && isWithinRange)
      {
        def expectedPosition = PeekIndent();
        def expect = getIndentString(expectedPosition - 1);
        unless(loc.Column == expect.Length)
        {
          if(expectedPosition != 1)
            AddResult(FormatterResult.Replace(loc.Line, 1, loc.Column, expect));
          else
            AddResult(FormatterResult.Erase(loc.Line, 1, loc.Column));
        }
      }
    }

    FormatMatchCases(cases : list[MatchCase]) : void
    {
      def formatSingleCase(matchCase)
      {
        matchCase.patterns.Map(_.Location).Iter(loc =>
            {
                                                  def pipe = _tokenFinder.FindPrevIf(loc.Line, loc.Column, _ is Token.Operator("|"));
                                                  IndentLocation(pipe.Location);
            });

        using (GetIndentPusher(PeekIndent() + 1))
        {
          FormatPExpr(matchCase.body)
        }
      }
      
      using (GetIndentPusher(PeekIndent() + 1))
      {
        cases.Iter(formatSingleCase)
      }
    }
    
    // следующая лексема за разделителем
    NextNonDelimToken(loc : Location) : Token
    {
      def cur=_tokenFinder.FindAt(loc.Line,loc.Column);
      _tokenFinder.FindNextIf(loc.Line,loc.Column,x => !x.IsWhiteSpace() && x.Location!=cur.Location);    
    }
      
    FormatMacroCall(macroExpr : PExpr.MacroCall) : void
    {      
      
      def get_syntax(expr)
      {
        match (expr.ns.Value)
        {
          | NamespaceTree.TypeInfoCache.MacroCall (m) =>
              def (rules, _) = m.SyntaxExtension ();
              rules
          |_ => null
        }
      }
    
      def rules=get_syntax(macroExpr);
      mutable parms_left = macroExpr.parms;
      mutable firstKeywordLoc = None();
      mutable current_loc=macroExpr.Location;
                    
      def formatExpression(pexpr : PExpr)
      {
        | PExpr.Sequence(body) as seq =>
            def beginBrace = _tokenFinder.FindAt(seq.Location.Line, seq.Location.Column);
            assert(beginBrace is Token.BeginBrace);
                
            using(GetIndentPusher(Math.Max(PeekIndent(), RecalcLocation(firstKeywordLoc.UnSome()).Column)))
            {
              IndentLocation(beginBrace.Location);
              using(GetIndentPusher())
              {
                body.Iter(FormatPExpr);
              }
              def end=GetNextPairedBrace(beginBrace).Location;
              IndentLocation(end);
              current_loc=end;
            }
                
        | _ => 
            using (GetIndentPusher(Math.Max(PeekIndent(), RecalcLocation(firstKeywordLoc.UnSome()).Column + 1)))
            {
              FormatPExpr(pexpr);
              def loc=pexpr.Location.FromEnd();
              current_loc = match (pexpr)
                            {
                              | PExpr.Quoted => 
                                def find = _tokenFinder.FindNextIf(loc.Line, loc.Column, _ is Token.EndQuote);
                                find.Location
                              | _ => loc
                            };
            }
      }
      
      def processSyntaxRules (x) 
      {
                    
        def process_cur_expr()
        {
          match (parms_left) 
          {
            | SyntaxElement.Expression (e) :: xs =>
                formatExpression(e);
                parms_left = xs;
            | _ => ()
          };
        }
                    
        match (x) 
        {
          | GrammarElement.Keyword (k) =>
              
              def token_match(tok)
              {
                | Token.Keyword(n) with t=n
                | Token.Identifier(n) with t=n => t==k
                | _ => false
              }
              def kw = _tokenFinder.FindNextIf(current_loc.Line,current_loc.Column,token_match);
              current_loc=kw.Location;
              mutable preferredColumn = 0;
              match(firstKeywordLoc)
              {
                | None => 
                    firstKeywordLoc = Some(kw.Location);
                    preferredColumn = PeekIndent();
                | _ => preferredColumn = Math.Max(PeekIndent(), RecalcLocation(firstKeywordLoc.UnSome()).Column);

              }
              using(GetIndentPusher(preferredColumn))
              {
                IndentLocation(kw.Location);
              }
              
          | GrammarElement.Expression => process_cur_expr()
          | GrammarElement.Optional =>
              def is_have_optional_expr() // есть ли опциональные выражения
              {
                def next=x.Next.ToString();  // следующий элемент
                def cur_tok=NextNonDelimToken(current_loc); // следующий элемент в лексере
                cur_tok.ToString()!=next // если не пропускается лексема
              }
              when (is_have_optional_expr()) // если есть опциональные выражения
               process_cur_expr(); // обработка текущего выражения
          | GrammarElement.Operator as tok 
          | GrammarElement.RawToken as tok => 
              def find_tok=_tokenFinder.FindNextIf(current_loc.Line,current_loc.Column,
                                                   x => x.ToString()==tok.ToString());
              current_loc=find_tok.Location;
          | GrammarElement.Parameter =>
              match (parms_left) 
              {
                | SyntaxElement.Parameter (p) :: xs =>
                    current_loc=p.Location;
                    IndentLocation(current_loc);
                    parms_left = xs;
                | _ => ()
              }
          | null => ()
          | _ => ()
        }
                
        when (x.Next != null)
          processSyntaxRules (x.Next)
      }

      when (rules!=null)              
        processSyntaxRules(rules);
      
    }
    
    FormatPExpr(pexpr : PExpr) : void
    {  
      if (pexpr.Location.Line == pexpr.Location.EndLine)
        IndentLocation(pexpr.Location);
      else match(pexpr)
        {
          | Sequence(exprs) => exprs.Iter(FormatPExpr);
          | Try(body, cases) => 
              
              IndentDecl(pexpr.Location);
          
              using(GetIndentPusher())
              {
                FormatPExpr(body);
              } 
              
              match (cases)
              {
               | head :: _ =>  
                  def catchKeyword = _tokenFinder.FindPrevIf(head.Location.Line, head.Location.Column, _ is Token.Keyword("catch")); 
                  IndentDecl(catchKeyword.Location);
               | _ => ()
              }
              
              using(GetIndentPusher())
              { 
                cases.Iter(FormatTryCase);
              }
            
          | TryFinally(body, handler) => 
              FormatPExpr(body);

              def finallyKeyword = _tokenFinder.FindPrevIf(handler.Location.Line, handler.Location.Column, _ is Token.Keyword("finally")); 
              
              IndentDecl(finallyKeyword.Location);
         
              using(GetIndentPusher())
              {
                FormatPExpr(handler);
              }               
            
          | MacroCall as macroExpr  => FormatMacroCall(macroExpr);
                    
          | Match(_, cases, _) => 
              def beginBrace = GetFirstBeginBraceAfterLocation(pexpr.Location.Line, pexpr.Location.Column);
              IndentLocation(pexpr.Location);
              // for match body's that exact at beginning of expression (ie without match word), there's no additional indentation
              when (beginBrace.Location.Begin!=pexpr.Location.Begin)
                IndentLocation(beginBrace.Location);
          
              FormatMatchCases(cases);
          
              def endBrace = GetNextPairedBrace(beginBrace);
              IndentLocation(endBrace.Location);
          | DefFunctions(funcs) => 
              foreach(func in funcs)
              {
                def kw = _tokenFinder.FindPrevIf( func.header.Location.Line,
                                                    func.header.Location.Column,
                                                                                    tok => 
                                                                                    {
                                                                                      | Token.Keyword("def")
                                                                                      | Token.Keyword("and") => true;
                                                                                      | _ => false;
                                                                                    });
                IndentLocation(kw.Location);
                def beginBrace = GetFirstBeginBraceAfterLocation(func.header.Location);
                IndentLocation(beginBrace.Location);
            
                match(func.body)
                {
                  | PExpr.Match(_, cases, _) => FormatMatchCases(cases);
                  | expr => 
                      using(GetIndentPusher())
                      {
                        FormatPExpr(expr);  
                      }
                }
            
                IndentLocation(GetNextPairedBrace(beginBrace).Location);
              }
          | Lambda(_) => // Lambda { decl : Function_decl; }
              ()
          
          | Define (name, val)
          | DefMutable(name, val) =>
              def kw = _tokenFinder.FindPrevIf( name.Location.Line,
                                                  name.Location.Column,
                                                                                tok => match(tok)
                                                                                {
                                                                                  | Token.Keyword("def")
                                                                                  | Token.Keyword("mutable") => true;
                                                                                  | _ => false;
                                                                                });
              IndentLocation(kw.Location);
              FormatPExpr(name);

              def equalSign = _tokenFinder.FindNextIf(name.Location.EndLine, name.Location.EndColumn, _ is Token.Operator("="));
              using(GetIndentPusher(RecalcLocation(equalSign.Location).EndColumn + 1))
              {
                FormatPExpr(val);
              }
          
          | Assign (name, val) =>
              FormatPExpr(name);

              def equalSign = _tokenFinder.FindNextIf(name.Location.EndLine, name.Location.EndColumn, _ is Token.Operator("="));
              using(GetIndentPusher(RecalcLocation(equalSign.Location).EndColumn + 1))
              {
                FormatPExpr(val);
              }
              
          | Call(obj, parms)  => // here obj is the func name.
              FormatPExpr(obj);
              when (parms.Length!=0) // check if we had parameters
                using(GetIndentPusher(RecalcLocation(parms.Head.Location).Column + 1))
                {
                  parms.Iter(FormatPExpr)
                }
          | Member(obj, member) =>
              FormatPExpr(obj);
              def dot = _tokenFinder.FindNextIf(obj.Location.EndLine, obj.Location.EndColumn, _ is Token.Operator("."));
              using(GetIndentPusher())
              {
                IndentLocation(dot.Location);
                FormatSplicable(member);
              }
          | ListLiteral (elems) =>
              def beginBracket = _tokenFinder.FindNextIf(pexpr.Location.Line, pexpr.Location.Column, _ is Token.BeginSquare);
              IndentLocation(beginBracket.Location);
              using(GetIndentPusher())
              {
                elems.Iter(FormatPExpr);
              }
              IndentLocation(GetNextPairedBrace(beginBracket).Location);

          | _ => Debug.WriteLine($"Unhandled PExpr, $(pexpr.ToString())");   
        }
    } 
    
/* Unhandled PExpr's
    | Wildcard        // _ used mainly in patterns, but also in _ = ignored
    | Void            // void used only in types
    | As              { pat : PExpr; name : Splicable; }
    | Is              { pat : PExpr; ty : PExpr; }
    | Where           { name : PExpr; fields : PExpr; }

    | Ref             { name : Name; }
    | GenericSpecifier { func : PExpr; generic_parms : list [PExpr]; }
    | Throw           { exn : PExpr; }
    | Literal         { val : Nemerle.Compiler.Literal; }
    | This
    | Base
    | Typeof          { ty : PExpr; }
    | TypeConversion  { expr : PExpr; ty : PExpr; }  // (expr :> ty)
    | TypeEnforcement { expr : PExpr; ty : PExpr; } // (expr : ty)
    | Tuple           { args : list [PExpr]; }
    | Array           { rank : PExpr; args : PExpr; }
    | EmptyArray      { sizes : list [PExpr]; }
    | ParmByRef       { parm : PExpr; }
    | ParmOut         { parm : PExpr; }

    | Error // placeholder of missing tree (where some errors occured)
      
    // macros stuff    
    | Quoted          { body : SyntaxElement; }
    | Spliced         { body : PExpr; }
    | ToComplete      { body : Name; }
    | Ellipsis        { body : PExpr; }
    | Typed           { body : Typedtree.TExpr; }
    | TypedPattern    { body : Typedtree.Pattern; }  
    | TypedType       { body : TyVar; }

*/   
    FormatSplicable(name : Splicable) : void
    {
      | Name (body) 
      | HalfId(body)  => IndentLocation(body.Location);
      | Expression(expr) => FormatPExpr(expr);
    }

    FormatTryCase(tryCase : TryCase) : void
    {
      // because of tryCase.Location issue, calculate | position by body line      
      // find the begin of catch      
      
      // ищем скобку  
      def tok=_tokenFinder.FindPrevRange(tryCase.Location.Line,tryCase.Location.Column,_ is Token.BeginBrace);            
      def tok=tok.Find(_ is Token.Operator("|")); // ищем | 
      when (tok.IsSome) IndentLocation(tok.Value.Location); // если найден делаем отступ
      
      match(tryCase)
      {
        | Catch(_, exn_ty, handler) =>
            // call indentation because of location bug to calculate thru case body
            FormatPExpr(exn_ty);
            using (GetIndentPusher(PeekIndent() + 1))//matchCasesBodyIndentOffset * defaultIndentSize))
            {
              FormatPExpr(handler);
            }
        | Filter(_, exn_ty, filter, handler) => 
            // call indentation because of location bug to calculate thru case body
            FormatPExpr(exn_ty);
            FormatPExpr(filter);
            using (GetIndentPusher(PeekIndent() + 1))//matchCasesBodyIndentOffset * defaultIndentSize))
            {
              FormatPExpr(handler)
            }
        | Ellipsis(body) => 
             // call indentation because of location bug to calculate thru case body
            using (GetIndentPusher(PeekIndent() + 1))//matchCasesBodyIndentOffset * defaultIndentSize))
            {
              FormatPExpr(body)
            }
      }
    } 

    FormatAlias(ast : TopDeclaration.Alias) : void
    {
      IndentLocation(ast.Location);
    }
    
    FormatMacro(ast : TopDeclaration.Macro ) : void
    {        
      def macro_key_loc=FormatMacroAttr(ast);
      def begin=_tokenFinder.FindNextRange(ast.Location.Line,ast.Location.Column,_ is Token.BeginBrace); // ищем скобку
      def synt=begin.Find(_ is Token.Keyword("syntax")); // ищем слово syntax
      when (synt.IsSome) // если найдено слово
        IndentLocation(synt.Value.Location); // форматируем слово syntax
      IndentDecl(macro_key_loc);
      using (GetIndentPusher())
        FormatPExpr(ast.expr);
    }
    
    FormatDelegate(ast : TopDeclaration.Delegate) : void
    {
      IndentLocation(ast.Location);
    }
    
    FormatEnum(ast : TopDeclaration.Enum) : void
    {     
      def loc=FormatMacroAttr(ast);
      IndentDecl(loc);
      using(GetIndentPusher())
      {
        foreach (decl in ast.decls)
          {      
            |EnumOption as en => 
                def tok= _tokenFinder.FindPrevIf( en.Location.Line,en.Location.Column,_ is Token.Operator("|")); // ищем открывающуюся скобку           
                IndentLocation(tok.Location);
            |_ => ()
          }
      }
    }
    
    // форматирование макроаттрибута 
    // return: позицию начального слова объявления
    FormatMacroAttr(member : DeclarationBase) : Location
    {
      def attr=member.ParsedAttributsAndModifiers.ParsedCustomAttributes;
      if (attr.Length!=0)
      {          
        foreach (a in attr)
        {
          def tok=_tokenFinder.FindPrevIf( a.Location.Line,a.Location.Column,_ is Token.BeginSquare); // ищем открывающуюся скобку           
          IndentLocation(tok.Location);
        }          
        def end_sq=_tokenFinder.FindNextIf( attr.Last.Location.Line,attr.Last.Location.Column,_ is Token.EndSquare); // ищем завершающую скобку           
        def next_key=NextNonDelimToken(end_sq.Location); // следующая лексема (может быть модификатор)
        next_key.Location; // выводим позицию
      } else member.Location;
    }
    
    FormatMethod(mb : ClassMember.Function) : void
    {
      // Skipping properties (other methods too?)
      when((mb.Attributes & NemerleModifiers.SpecialName) == 0)
      {
        // TODO: Format header properly (handle multiline headers)
        def loc=FormatMacroAttr(mb);
        IndentLocation(loc);
        when (!(mb.body is FunBody.Abstract)) 
        {
          IndentBlock(loc);
        // если имеем макроаттрибуты        
        // if we not have body, not call BodyParsed because of AsyncWorker assert, just skip body
          match(mb.Body)
          {
            | PExpr.Match(_, cases, _) => FormatMatchCases(cases);
            | expr => 
                using(GetIndentPusher())
                {
                  FormatPExpr(expr);  
                }
          }
        }
      }
    }
    
    FormatProperty(pb : ClassMember.Property) : void
    {
      def formatInternal(method, kwPredicate)
      {
      // if property not auto, else method is auto generated and skipped
        when (method.HasValue && !method.Value.BodyLocation.IsGeneratedOrEmpty)
        {
          def method=method.Value;
          def kw = _tokenFinder.FindNextIf( method.Location.Line, 
                                              method.Location.Column,
                                              kwPredicate);
          IndentDecl(kw.Location);
          using(GetIndentPusher())
          {
            FormatPExpr(method.Body);
          } 
        }
      }

      def loc=FormatMacroAttr(pb);
      IndentDecl(loc);
      using(GetIndentPusher())
      {
        formatInternal(pb.getter, _ is Token.Identifier("get"));
        formatInternal(pb.setter, _ is Token.Identifier("set"));
      }
      
    }
    
    FormatField(fb : ClassMember.Field) : void
    {
      def loc=FormatMacroAttr(fb);
      IndentLocation(loc)
    }
    
    FormatEvent(eb : ClassMember.Event) : void
    {
      def loc=FormatMacroAttr(eb);
      IndentLocation(loc)
    }

    FormatVariant(var : TopDeclaration.Variant) : void
    {
      // найти слово variant после loc и отформатировать остальное содержимое
      def loc=FormatMacroAttr(var);
      IndentDecl(loc);
      PushIndent();
      def mems=var.GetMembers().Filter(x => !x.Location.IsGeneratedOrEmpty);
      mems.Iter(FormatClassMember);

      _ = PopIndent();
    
    }
    
    FormatVariantOption(variantOption : TopDeclaration.VariantOption) : void
    {
    
      def pipe = _tokenFinder.FindPrevIf(variantOption.Location.Line, variantOption.Location.Column, _ is Token.Operator("|"));
      IndentLocation(pipe.Location);
      
      def members = variantOption.GetMembers();
      def hasFields = ! members.ForAll(member => member.Location.IsGenerated); 
      when(hasFields)
      {
        using (GetIndentPusher(PeekIndent() + 1))
        {
          IndentBlock(variantOption.Location);
          using(GetIndentPusher())
          {
            members.Iter(FormatClassMember)
          }
        }
          
      }
    }

    
    FormatClassMember(member : ClassMember) : void
    {                 
      | Property as prop                      => FormatProperty(prop)
      | Event    as evt                       => FormatEvent(evt)
      | Field as fld                          => FormatField(fld)
      | Function as meth                      => FormatMethod(meth)
      | TypeDeclaration(td is TopDeclaration) => FormatTypeDecl(td)
      | _                                     => ()
    }
    
    IndentDecl(loc : Location) : void
    {
      IndentLocation(loc); // 
      IndentBlock(loc);
    }
    
    IndentBlock(loc : Location) : void
    {
      def beginBrace = GetFirstBeginBraceAfterLocation(loc.Begin.Line,loc.Begin.Column);      
      IndentLocation(beginBrace.Location);
      def endBrace = GetNextPairedBrace(beginBrace);
      IndentLocation(endBrace.Location);
    }
    
    FormatType(cl : TopDeclaration) : void
    {
      unless(cl.Location.IsGenerated)
      {
        
        
        // TODO: Format base class and implemented interfaces list.
        def loc=FormatMacroAttr(cl);
        IndentDecl(loc);
        PushIndent();
        def mems=cl.GetMembers().Filter(x => !x.Location.IsGeneratedOrEmpty);
        mems.Iter(FormatClassMember);

        _ = PopIndent();
      }    
    }
    
    FormatUsing(us : Decl.Using) : void
    {
      IndentLocation(us.Location);
    }
    
    FormatTypeDecl(ast : TopDeclaration) : void
    {
      | Delegate      as ast => FormatDelegate(ast)
      | Enum          as ast => FormatEnum(ast)
      | Alias         as ast => FormatAlias(ast)
      | Class
      | Interface            => FormatType(ast)
      | Variant       as ast => FormatVariant(ast)
      | VariantOption as ast => FormatVariantOption(ast)
      | _                    => ()
    }
    
    FormatNamespace(ns : Decl.Namespace) : void
    {      
      mutable isGlobalNS = false;
      match(ns.Name)
      {
        | _ :: _ => // if namespace name isn't empty (not global namespace)
            IndentDecl(ns.Location);
            PushIndent();
            // assume that namespace name is single-lined.
        | _ => isGlobalNS = true;
      }
      foreach(x in ns.Decls)
        {
          | Namespace as n                    => FormatNamespace(n)
          | Type(ast is TopDeclaration.Macro) => FormatMacro(ast)
          | Type(ast is TopDeclaration)       => FormatTypeDecl(ast)
          | Using as u                        => FormatUsing(u);
          | _                                 => ()
        }

      unless(isGlobalNS)
      {
        _ = PopIndent();
      }
    }

    _WriteLocation(loc : Location) : void
    {
      Debug.WriteLine($"Location: $(loc.Line), $(loc.Column), $(loc.EndLine), $(loc.EndColumn)");
    }
    
    public override FormatDocument() : SCG.List[FormatterResult]
    {    
      Prepare();
      
      //
      FormatNamespace(rootNamespaceNode);
      GetResults();
    }
    public override FormatRegion(loc : Location) : SCG.List[FormatterResult]
    {
      _ = base.FormatRegion(loc);
      // The call above sets "clipping" region, and FormatDocument will respect
      // this and will not make any changes that are not inside of that region.
      FormatDocument();
    }
  }
}
