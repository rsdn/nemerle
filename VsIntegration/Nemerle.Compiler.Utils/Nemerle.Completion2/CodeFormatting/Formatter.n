using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Completion2;

using System;
using System.Diagnostics;
using System.Windows.Forms;
using Nemerle.Compiler.Utils;
using System.Text;
using System.IO;
using SCG = System.Collections.Generic;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Utils.Async;

namespace Nemerle.Completion2.CodeFormatting
{
  /*
      TODO: formatting stuff
      format expression on semicolon
      format block on closing curly brace
  */
  public class Formatter
  {
    mutable _fileIndex : int = 0;
    
    mutable _results : SCG.List[FormatterResult];

    mutable _engine : IIdeEngine;
    
    public Engine : IIdeEngine
    {    
      get         { _engine; }
      private set { _engine = value }
    }
    
    public this(engine : IIdeEngine, fileIndex : int)
    {
      Engine = engine;            
      _fileIndex = fileIndex;
      _results = SCG.List();
    }

    public this(engine : IIdeEngine, filePath : string)
    {
      Engine = engine;
      _fileIndex = Location.GetFileIndex(filePath);
      _results = SCG.List();
    }
    
    
    
    _WalkHandler (info : ExprWalkInfo) : void
    {
      def node = info.Node;
      if(node != null)
      {
        def loc = if (node is Located) 
                     (node :> Located).Location 
                  else 
                  if (node is IMember)
                     (node :> IMember).Location
                  else 
                  if (node is Decl)
                     (node :> Decl).Location
                  else Location.Default;
        Print(node, loc, 1);
        
        match(node)
        {
          | pe is PExpr when pe.Location.Line == pe.Location.EndLine =>
              match(pe)
              {
                | PExpr.Define
                | PExpr.Assign
                | PExpr.Call
                | PExpr.Sequence => info.Skip()
                | _ => ()
              }
          | se is SyntaxElement when se.Location.Line == se.Location.EndLine =>
              info.Skip();
          | _ => ()
        }
      }
      else
      {
        Trace.WriteLine("info.Node is null");
      }
    }
    
    Print(obj : object, loc : Location, level : int) : void
    {
      _ = obj.ToString();

#if DEBUG
      def indentation = string(' ', level);
      mutable os = obj.ToString();

      when (os.Length > 200)
        os = os.Substring(0, 200) + "...";

      Trace.WriteLine("");
      Trace.WriteLine(indentation + 
                        $"$(obj.GetType().FullName) "
                        "$(loc.Line):$(loc.Column):$(loc.EndLine):$(loc.EndColumn)"
                        "$(if (loc.IsGenerated) '-' else '+')");
      Trace.WriteLine(indentation + os.Replace("\n", "\n" + indentation));
#endif

      ignore(obj); ignore(loc); ignore(level);
    }
    
    public static BeginFormat(startLine : int, startCol : int, endLine : int, 
      endCol : int, engine : IIdeEngine, source : IIdeSource, pref : IndentInfo) : FormattingAsyncRequest
    {
      //Debugger.Break();
                  
      //def fileIndex = Location.GetFileIndex(filePath);
      //def source=engine.GetSource(fileIndex);
      
      def loc=Location(source.FileIndex, startLine, startCol, endLine, endCol);
      def request = FormattingAsyncRequest(engine, source, DoFormatDocument, loc, pref);
      AsyncWorker.AddWork(request);
      request
    }
    
    static DoFormatDocument(request : AsyncRequest) : void
    {
      def req = request :> FormattingAsyncRequest;          
      try      
      {
        def res = Format(req.Location, req.Engine, req.Source, req.Pref);
        req.Result = res;                    
      }
      catch
      {          
        | ex is Exception =>
          def str = string.Format("Message:{0} Method:{1}", ex.Message, ex.TargetSite);
          _ = MessageBox.Show(str);                              
          req.Result=null;                              
      }
      finally { req.MarkAsCompleted(); }
    }
    
    public static Format(loc : Location, engine : IIdeEngine, source : IIdeSource, pref : IndentInfo) : SCG.List[FormatterResult]
    {
     // def fileIndex = Location.GetFileIndex(filePath);
      def results = SCG.List();
      
      def stages : list[IFormattingStage] =  
                    [
                      //CodeLineBreakingStage(engine, fileIndex),
                      CodeIndentationStage2(engine, source, pref)
                    ];
                    
      foreach(stage in stages)
        results.AddRange(stage.FormatRegion(loc)); 

      results;
    
    }
    
    public static FormatDocument(engine : IIdeEngine, source : IIdeSource, pref : IndentInfo) : SCG.List[FormatterResult]
    {
      def results = SCG.List();
      
      _ = CodeLineBreakingStage(engine, source);
      def stages : list[IFormattingStage] =  
                    [
                      
                      CodeIndentationStage2(engine, source, pref)
                    ];
                    
      foreach(stage in stages)
      {
        results.AddRange(stage.FormatDocument()); 
      }

      results;


    }
    
    public static FormatSpan(startLine : int, startCol : int, endLine : int, 
      endCol : int, engine : IIdeEngine, source : IIdeSource, pref : IndentInfo) : SCG.List[FormatterResult]
    {
      Format(Location(source.FileIndex, startLine, startCol, endLine, endCol), engine, source, pref);
    }

    public static FormatExpressionAt(_engine : IIdeEngine, _filepath : string, _line : int, _col : int) : SCG.List[FormatterResult]
    {
      def results = SCG.List();
      //def rootDecl = engine.Project.CompileUnits[filepath];
      //def (loc, foundExpr) = ExprFinder().Find(rootDecl, line, col, 1);
      ////results.Add(FormatterResult.Insert(line, col, foundExpr.ToString()));
      //when(foundExpr != null && !loc.IsEmpty)
      //  results.AddRange(FormatSpan(loc.Line, loc.Column, loc.EndLine, loc.EndColumn, engine, filepath));
      results
    }

  }
}
