<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

    <UsingTask
      TaskName="Nemerle.Tools.MSBuildTask.Ncc"
      AssemblyFile="$(Nemerle)\Nemerle.MSBuild.Tasks.dll"/>

    <PropertyGroup>
        <MSBuildAllProjects>$(MSBuildAllProjects);$(Nemerle)\Nemerle.MSBuild.targets</MSBuildAllProjects>
        <DefaultLanguageSourceExtension>.n</DefaultLanguageSourceExtension>
        <Language>Nemerle</Language>
    </PropertyGroup>

    <!--
    The CreateManifestResourceNames target create the manifest resource names from the .RESX
    files.
    
        [IN]
        @(EmbeddedResource) - The list of EmbeddedResource items that have been pre-processed to add metadata about resource type
                              Expected Metadata "Type" can either be "Resx" or "Non-Resx"

        [OUT]
        @(EmbeddedResource) - EmbeddedResource items with metadata         
        
    For C# applications the transformation is like:

        Resources1.resx => RootNamespace.Resources1 => Build into main assembly
        SubFolder\Resources1.resx => RootNamespace.SubFolder.Resources1 => Build into main assembly
        Resources1.fr.resx => RootNamespace.Resources1.fr => Build into satellite assembly
        Resources1.notaculture.resx => RootNamespace.Resources1.notaculture => Build into main assembly

    For other project systems, this transformation may be different.
    -->

    <PropertyGroup>
        <CreateManifestResourceNamesDependsOn></CreateManifestResourceNamesDependsOn>
    </PropertyGroup>
    <Target
        Name="CreateManifestResourceNames"
        Condition="'@(EmbeddedResource)' != ''"
        DependsOnTargets="$(CreateManifestResourceNamesDependsOn)"
        >

        <ItemGroup>
            <_Temporary Remove="@(_Temporary)" />
        </ItemGroup>
        
        <!-- Create manifest names for culture and non-culture Resx files, and for non-culture Non-Resx resources -->
        <CreateCSharpManifestResourceName
              ResourceFiles="@(EmbeddedResource)"
              RootNamespace="$(RootNamespace)"              
              Condition="'%(EmbeddedResource.ManifestResourceName)' == '' and ('%(EmbeddedResource.WithCulture)' == 'false' or '%(EmbeddedResource.Type)' == 'Resx')">

            <Output TaskParameter="ResourceFilesWithManifestResourceNames" ItemName="_Temporary" />

        </CreateCSharpManifestResourceName>
      	
      	<!-- Create manifest names for all culture non-resx resources -->
        <CreateCSharpManifestResourceName
              ResourceFiles="@(EmbeddedResource)"
              RootNamespace="$(RootNamespace)"
              PrependCultureAsDirectory="false"
              Condition="'%(EmbeddedResource.ManifestResourceName)' == '' and '%(EmbeddedResource.WithCulture)' == 'true' and '%(EmbeddedResource.Type)' == 'Non-Resx'">

            <Output TaskParameter="ResourceFilesWithManifestResourceNames" ItemName="_Temporary" />

        </CreateCSharpManifestResourceName>

        <ItemGroup>
            <EmbeddedResource Remove="@(EmbeddedResource)" Condition="'%(EmbeddedResource.ManifestResourceName)' == ''"/>
            <EmbeddedResource Include="@(_Temporary)" />
            <_Temporary Remove="@(_Temporary)" />
        </ItemGroup>
              
    </Target>


    <PropertyGroup>

        <!-- "None" is not technically a valid DebugType, so we can't pass it in as such
             to the compiler.  So here, we modify the properties so they make sense. -->
        <DebugSymbols Condition=" '$(DebugType)' == 'none' ">false</DebugSymbols>
        <DebugType    Condition=" '$(DebugType)' == 'none' "></DebugType>

        <_DisabledWarnings>$(NoWarn)</_DisabledWarnings>

        <!-- Provide a facility to override UseHostCompilerIfAvailable-->
        <UseHostCompilerIfAvailable Condition=" '$(UseHostCompilerIfAvailable)' == ''">true</UseHostCompilerIfAvailable>

    </PropertyGroup>

    <!-- Set BaseIntermediateOutputPath if IntermediateOutputPath was set, like C# does -->
    <PropertyGroup>
        <BaseIntermediateOutputPath Condition="'$(IntermediateOutputPath)'!='' ">$(IntermediateOutputPath)</BaseIntermediateOutputPath>
    </PropertyGroup>

    <ItemGroup>
        <DocFileItem Include="$(DocumentationFile)" Condition="'$(DocumentationFile)'!=''"/>
    </ItemGroup>

    <PropertyGroup>
        <CoreCompileDependsOn>_ComputeNonExistentFileProperty;ResolveMacroProjectReferences;ResolveMacroAssemblyReferences</CoreCompileDependsOn>
    </PropertyGroup>
	
    <!--
    ============================================================
                                        ResolveProjectReferences

    Build referenced projects:

        [IN]
        @(NonVCProjectReference) - The list of non-VC project references.

        [OUT]
        @(_ResolvedProjectReferencePaths) - Paths to referenced projects.
    ============================================================
	DependsOnTargets="SplitProjectReferencesByType;_SplitProjectReferencesByFileExistence"
    -->
    <Target
        Name="ResolveMacroProjectReferences"
        >

        <MSBuild
            Projects="@(MacroProjectReference)"
            Targets="GetTargetPath"
            BuildInParallel="$(BuildInParallel)"
            UnloadProjectsOnCompletion="$(UnloadProjectsOnCompletion)"
            Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration); %(_MSBuildProjectReferenceExistent.SetPlatform)"
            Condition="'@(MacroProjectReference)'!=''"
            ContinueOnError="!$(BuildingProject)">

            <Output TaskParameter="TargetOutputs" ItemName="_ResolvedMacroProjectReferencePaths"/>

        </MSBuild>

        <!--Warning Text="DBG: '$(MSBuildProjectName)'." />
        <Warning Text="DBG: '@(_ResolvedMacroProjectReferencePaths)'." /-->
    </Target>	
	
    <Target
        Name="ResolveMacroAssemblyReferences"
        Condition="'@(MacroReference)'!=''  or '@(_ResolvedMacroProjectReferencePaths)'!=''"
        DependsOnTargets="$(ResolveAssemblyReferencesDependsOn);ResolveMacroProjectReferences">
      
        <ItemGroup>
          <_ReferenceInstalledAssemblyDirectory Include="$(TargetFrameworkDirectory)" />
          <_ReferenceInstalledAssemblySubsets Include="$(TargetFrameworkSubset)" />
        </ItemGroup>

      <!--
        Only read and write cache file at build time, skip it for load time because its more
        expensive to write the newly created cache file.
        -->
        <PropertyGroup>
            <ResolveMacroAssemblyReferencesStateFile Condition="'$(BuildingProject)'=='true'">$(IntermediateOutputPath)ResolveMacroAssemblyReference.cache</ResolveMacroAssemblyReferencesStateFile>

        </PropertyGroup>

        <!-- Make an App.Config item that exists when AutoUnify is false. -->
        <ItemGroup>
            <_ResolveAssemblyReferencesApplicationConfigFileForExes Include="@(AppConfigWithTargetPath)" Condition="'$(AutoUnifyAssemblyReferences)'=='false'"/>
        </ItemGroup>

        <PropertyGroup>
            <!-- Default in task is true -->
            <_FindDependencies Condition="'$(BuildingProject)' != 'true' or '$(_ResolveReferenceDependencies)' != 'true'">false</_FindDependencies>
        </PropertyGroup>
<!-- 
            Silent="!$(BuildingProject)"
-->
        <ResolveAssemblyReference
            Assemblies="@(MacroReference)"
            AssemblyFiles="@(_ResolvedMacroProjectReferencePaths)"
            TargetFrameworkDirectories="@(_ReferenceInstalledAssemblyDirectory)"
            InstalledAssemblyTables="@(InstalledAssemblyTables);@(RedistList)"
            CandidateAssemblyFiles="@(Content);@(None)"
            SearchPaths="$(AssemblySearchPaths)"
            AllowedAssemblyExtensions="$(AllowedReferenceAssemblyFileExtensions)"
            AllowedRelatedFileExtensions="$(AllowedReferenceRelatedFileExtensions)"
            TargetProcessorArchitecture="$(ProcessorArchitecture)"
            AutoUnify="$(AutoUnifyAssemblyReferences)"
            FindDependencies="true"
            FindSatellites="false"
            FindSerializationAssemblies="false"
            FindRelatedFiles="false"
            Silent="false"
            IgnoreDefaultInstalledAssemblyTables="$(IgnoreInstalledAssemblyTables)"
            IgnoreDefaultInstalledAssemblySubsetTables="$(IgnoreInstalledAssemblySubsetTables)"
            TargetFrameworkVersion="$(TargetFrameworkVersion)"
            StateFile="$(ResolveMacroAssemblyReferencesStateFile)"
            InstalledAssemblySubsetTables="@(InstalledAssemblySubsetTables)"
            TargetFrameworkSubsets="@(_ReferenceInstalledAssemblySubsets)"
            FullTargetFrameworkSubsetNames="$(FullReferenceAssemblyNames)">

            <Output TaskParameter="ResolvedFiles" ItemName="MacroReferencePath"/>
        </ResolveAssemblyReference>

    </Target>

    <Target
        Name="CoreCompile"
        Inputs="$(MSBuildAllProjects);
                @(Compile);
                @(_CoreCompileResourceInputs);
                $(ApplicationIcon);
                $(AssemblyOriginatorKeyFile);
                @(ReferencePath);
                @(CompiledLicenseFile);
                @(EmbeddedDocumentation); 
                $(Win32Resource);
                $(Win32Manifest);
                @(CustomAdditionalCompileInputs)"
        Outputs="@(DocFileItem);
                 @(IntermediateAssembly);
                 @(_DebugSymbolsIntermediatePath);
                 @(CustomAdditionalCompileOutputs)"
        DependsOnTargets="$(CoreCompileDependsOn)"
    >

        <Ncc
              AdditionalLibPaths="$(AdditionalLibPaths)"
              CheckIntegerOverflow="$(CheckIntegerOverflow)"
              CompilerPath="$(Nemerle)"
              CompilerStackSize="$(CompilerStackSize)"
              CustomArguments="$(CustomArguments)"
              DefineConstants="$(DefineConstants)"
              DisabledWarnings="$(_DisabledWarnings)"
              DocumentationFile="@(DocFileItem)"
              EmitDebugInformation="$(DebugSymbols)"
              EnabledWarnings="$(EnabledWarnings)"
              GreedyReferences="$(GreedyReferences)"
              IndentationSyntax="$(IndentationSyntax)"
              KeyFile="$(KeyOriginatorFile)"
              MacroReferences="@(MacroReferencePath)"
              NoLogo="$(NoLogo)"
              NoStdLib="$(NoStdLib)"
              NoStdMacros="$(NoStdMacros)"
              Optimize="$(Optimize)"
              OutputAssembly="@(IntermediateAssembly)"
              Platform="$(PlatformTarget)"
              ProjectPath="$(MSBuildProjectFullPath)"
              References="@(ReferencePath)"
              Resources="@(ManifestResourceWithNoCulture);@(ManifestNonResxWithNoCultureOnDisk);@(CompiledLicenseFile)"
              ResponseFiles="$(CompilerResponseFile)"
              RootNamespace="$(RootNamespace)"
              Sources="@(Compile)"
              TargetType="$(OutputType)"
              ToolPath="$(CscToolPath)"
              TreatWarningsAsErrors="$(TreatWarningsAsErrors)"
              WarningLevel="$(WarningLevel)"
              Win32Resource="$(Win32Resource)"
              />

    </Target>

    <Import Project="$(MSBuildBinPath)\Microsoft.Common.targets" />
</Project>

