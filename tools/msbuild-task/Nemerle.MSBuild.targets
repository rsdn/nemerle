<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <UsingTask
      TaskName="Nemerle.Tools.MSBuildTask.Ncc"
      AssemblyFile="$(Nemerle)\Nemerle.MSBuild.Tasks.dll"/>

  <PropertyGroup>
    <MSBuildAllProjects>$(MSBuildAllProjects);$(Nemerle)\Nemerle.MSBuild.targets</MSBuildAllProjects>
    <DefaultLanguageSourceExtension>.n</DefaultLanguageSourceExtension>
    <Language>Nemerle</Language>
  </PropertyGroup>

  <PropertyGroup>
    <!-- "None" is not technically a valid DebugType, so we can't pass it in as such
             to the compiler.  So here, we modify the properties so they make sense. -->
    <DebugSymbols Condition=" '$(DebugType)' == 'none' ">false</DebugSymbols>
    <DebugType    Condition=" '$(DebugType)' == 'none' "></DebugType>

    <_DisabledWarnings>$(NoWarn)</_DisabledWarnings>

    <!-- Provide a facility to override UseHostCompilerIfAvailable-->
    <UseHostCompilerIfAvailable Condition=" '$(UseHostCompilerIfAvailable)' == ''">true</UseHostCompilerIfAvailable>
  </PropertyGroup>

  <!-- Set BaseIntermediateOutputPath if IntermediateOutputPath was set, like C# does -->
  <PropertyGroup>
    <BaseIntermediateOutputPath Condition="'$(IntermediateOutputPath)'!='' ">$(IntermediateOutputPath)</BaseIntermediateOutputPath>
  </PropertyGroup>

  <ItemGroup>
    <DocFileItem Include="$(DocumentationFile)" Condition="'$(DocumentationFile)'!=''"/>
  </ItemGroup>
  
  <ItemGroup Condition=" '$(DebugSymbols)' == 'true' ">
      <_DebugSymbolsIntermediatePath Include="@(IntermediateAssembly->'%(RootDir)%(Directory)%(Filename).pdb')"/>
  </ItemGroup>
  
  <Import Project="$(MSBuildBinPath)\Microsoft.Common.targets" />
  
  <ItemDefinitionGroup>
    <MacroProjectReference>
      <Private>False</Private>
      <OutputItemType>macro</OutputItemType>
    </MacroProjectReference>
  </ItemDefinitionGroup>

  <!--
    ============================================================
                                        SplitProjectReferencesByType (for MSBUILD 3.5)

    Split project references into two lists: VC project references and all others (handled by the MSBuild engine)

        [IN]
        @(ProjectReference), @(MacroProjectReference) - the list of all project references

        [OUT]
        @(VCProjectReference) - the list of VC (managed VC++ to be exact) project references
        @(NonVCProjectReference) - the list of non-VC project references (MSBuild and potentially VSIP projects)
    ============================================================
    -->
  <Target
      Name="SplitProjectReferencesByType"
      Condition="('@(ProjectReference)' != '') or ('@(MacroProjectReference)' != '' )">

    <!-- Assign a project configuration to each project reference if we're building a solution file. -->
    <AssignProjectConfiguration
        ProjectReferences="@(ProjectReference);@(MacroProjectReference)"
        SolutionConfigurationContents="$(CurrentSolutionConfigurationContents)"
        Condition="'$(BuildingSolutionFile)'=='true'">

      <Output TaskParameter="AssignedProjects" ItemName="_ProjectReferenceWithConfiguration"/>

    </AssignProjectConfiguration>

    <ItemGroup>
      <!--
            Otherwise (regular command line build or building inside the IDE) just copy the references
            as we don't need their configurations
            -->
      <_ProjectReferenceWithConfiguration Condition="'$(BuildingSolutionFile)'!='true'" Include="@(ProjectReference);@(MacroProjectReference)"/>
    </ItemGroup>

    <ItemGroup>
      <!-- Copy all VC project references to the VCProjectReference item list (using the VC project extension) -->
      <VCProjectReference Include="@(_ProjectReferenceWithConfiguration)" Condition="'%(Extension)'=='.vcproj'"/>

      <!-- Copy the rest of the project references to the NonVCProjectReference item list -->
      <NonVCProjectReference Include="@(_ProjectReferenceWithConfiguration)" Condition="'%(Extension)'!='.vcproj'"/>
    </ItemGroup>

  </Target>

  <!--
    ============================================================
                                        AssignProjectConfiguration (for MSBUILD 4.0)

    Assigns the appropriate configuration to each project in the list of project references passed in.

        [IN]
        @(ProjectReference), @(MacroProjectReference) - the list of all project references

        [OUT]
        @(ProjectReferenceWithConfiguration) - the list of project references (MSBuild and potentially VSIP projects)
                                               with metadata values FullConfiguration, Configuration, Platform,
                                               SetConfiguration, and SetPlatform
    ============================================================
    -->
  <Target
      Name="AssignProjectConfiguration"
      Condition="('@(ProjectReference)' != '') or ('@(MacroProjectReference)' != '' )">

    <PropertyGroup>
      <OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration Condition="'$(OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration)' == ''">false</OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration>
      <ShouldUnsetParentConfigurationAndPlatform Condition="'$(ShouldUnsetParentConfigurationAndPlatform)' == '' and ('$(BuildingInsideVisualStudio)' == 'true' or '$(BuildingSolutionFile)' == 'true')">true</ShouldUnsetParentConfigurationAndPlatform>
      <ShouldUnsetParentConfigurationAndPlatform Condition="'$(ShouldUnsetParentConfigurationAndPlatform)' == ''">false</ShouldUnsetParentConfigurationAndPlatform>
    </PropertyGroup>

    <!-- Assign a project configuration to each project reference if we're building a solution file. -->
    <AssignProjectConfiguration
        ProjectReferences="@(ProjectReference);@(MacroProjectReference)"
        CurrentProjectConfiguration="$(Configuration)"
        CurrentProjectPlatform="$(Platform)"
        DefaultToVcxPlatformMapping="$(DefaultToVcxPlatformMapping)"
        VcxToDefaultPlatformMapping="$(VcxToDefaultPlatformMapping)"
        OutputType="$(OutputType)"
        ResolveConfigurationPlatformUsingMappings="false"
        SolutionConfigurationContents="$(CurrentSolutionConfigurationContents)"
        OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration = "$(OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration)"
        ShouldUnsetParentConfigurationAndPlatform = "$(ShouldUnsetParentConfigurationAndPlatform)" >

      <!-- EMITTED FOR COMPATIBILITY REASONS ONLY. CONSUME PROJECTREFERENCEWITHCONFIGURATION INSTEAD -->
      <Output TaskParameter="AssignedProjects" ItemName="_ProjectReferenceWithConfiguration"/>
      <Output TaskParameter="UnassignedProjects" ItemName="_ProjectReferenceWithConfiguration"/>

      <Output TaskParameter="AssignedProjects" ItemName="ProjectReferenceWithConfiguration"/>
      <Output TaskParameter="UnassignedProjects" ItemName="ProjectReferenceWithConfiguration"/>
    </AssignProjectConfiguration>

    <ItemGroup>
      <_ProjectReferenceWithConfiguration>
        <BuildReference Condition="'%(_ProjectReferenceWithConfiguration.BuildReference)' == ''">true</BuildReference>
        <ReferenceOutputAssembly Condition="'%(_ProjectReferenceWithConfiguration.ReferenceOutputAssembly)' == ''">true</ReferenceOutputAssembly>
      </_ProjectReferenceWithConfiguration>
      <ProjectReferenceWithConfiguration>
        <BuildReference Condition="'%(ProjectReferenceWithConfiguration.BuildReference)' == ''">true</BuildReference>
        <ReferenceOutputAssembly Condition="'%(ProjectReferenceWithConfiguration.ReferenceOutputAssembly)' == ''">true</ReferenceOutputAssembly>
      </ProjectReferenceWithConfiguration>
    </ItemGroup>
  </Target>

  <PropertyGroup>
    <ResolveReferencesDependsOn>$(ResolveReferencesDependsOn);ResolveMacroAssemblyReferences</ResolveReferencesDependsOn>
    <ResolveMacroAssemblyReferencesDependsOn>$(ResolveAssemblyReferences)</ResolveMacroAssemblyReferencesDependsOn>
    <ResolveAssemblyReferencesDependsOn>$(ResolveAssemblyReferences);ResolveMacroAssemblyReferences</ResolveAssemblyReferencesDependsOn>
  </PropertyGroup>
  <Target
      Name="ResolveMacroAssemblyReferences"
      Condition=" '@(MacroReference)' != '' "
      DependsOnTargets="$(ResolveMacroAssemblyReferencesDependsOn)">

    <ItemGroup>
      <_ReferenceInstalledAssemblyDirectory Include="$(TargetFrameworkDirectory)" />
      <_ReferenceInstalledAssemblySubsets Include="$(TargetFrameworkSubset)" />
    </ItemGroup>

    <!--
        Only read and write cache file at build time, skip it for load time because its more
        expensive to write the newly created cache file.
        -->
    <PropertyGroup>
      <ResolveMacroAssemblyReferencesStateFile Condition="'$(BuildingProject)'=='true'">$(IntermediateOutputPath)ResolveMacroAssemblyReference.cache</ResolveMacroAssemblyReferencesStateFile>
    </PropertyGroup>

    <ResolveAssemblyReference
        Assemblies="@(MacroReference)"
        TargetFrameworkDirectories="@(_ReferenceInstalledAssemblyDirectory)"
        InstalledAssemblyTables="@(InstalledAssemblyTables);@(RedistList)"
        CandidateAssemblyFiles="@(Content);@(None)"
        SearchPaths="$(AssemblySearchPaths)"
        AllowedAssemblyExtensions="$(AllowedReferenceAssemblyFileExtensions)"
        AllowedRelatedFileExtensions="$(AllowedReferenceRelatedFileExtensions)"
        TargetProcessorArchitecture="$(ProcessorArchitecture)"
        AutoUnify="$(AutoUnifyAssemblyReferences)"
        FindDependencies="false"
        FindSatellites="false"
        FindSerializationAssemblies="false"
        FindRelatedFiles="false"
        Silent="false"
        IgnoreDefaultInstalledAssemblyTables="$(IgnoreInstalledAssemblyTables)"
        IgnoreDefaultInstalledAssemblySubsetTables="$(IgnoreInstalledAssemblySubsetTables)"
        TargetFrameworkVersion="$(TargetFrameworkVersion)"
        StateFile="$(ResolveMacroAssemblyReferencesStateFile)"
        InstalledAssemblySubsetTables="@(InstalledAssemblySubsetTables)"
        TargetFrameworkSubsets="@(_ReferenceInstalledAssemblySubsets)"
        FullTargetFrameworkSubsetNames="$(FullReferenceAssemblyNames)">

      <Output TaskParameter="ResolvedFiles" ItemName="MacroReferencePath"/>
    </ResolveAssemblyReference>
  </Target>

  <!--
    The CreateManifestResourceNames target create the manifest resource names from the .RESX
    files.

        [IN]
        @(EmbeddedResource) - The list of EmbeddedResource items that have been pre-processed to add metadata about resource type
                              Expected Metadata "Type" can either be "Resx" or "Non-Resx"

        [OUT]
        @(EmbeddedResource) - EmbeddedResource items with metadata

    For C# applications the transformation is like:

        Resources1.resx => RootNamespace.Resources1 => Build into main assembly
        SubFolder\Resources1.resx => RootNamespace.SubFolder.Resources1 => Build into main assembly
        Resources1.fr.resx => RootNamespace.Resources1.fr => Build into satellite assembly
        Resources1.notaculture.resx => RootNamespace.Resources1.notaculture => Build into main assembly

    For other project systems, this transformation may be different.
    -->
  <PropertyGroup>
    <CreateManifestResourceNamesDependsOn></CreateManifestResourceNamesDependsOn>
  </PropertyGroup>
  <Target
      Name="CreateManifestResourceNames"
      Condition="'@(EmbeddedResource)' != ''"
      DependsOnTargets="$(CreateManifestResourceNamesDependsOn)"
        >

    <ItemGroup>
      <_Temporary Remove="@(_Temporary)" />
    </ItemGroup>

    <!-- Create manifest names for culture and non-culture Resx files, and for non-culture Non-Resx resources -->
    <CreateCSharpManifestResourceName
          ResourceFiles="@(EmbeddedResource)"
          RootNamespace="$(RootNamespace)"
          Condition="'%(EmbeddedResource.ManifestResourceName)' == '' and ('%(EmbeddedResource.WithCulture)' == 'false' or '%(EmbeddedResource.Type)' == 'Resx')">

      <Output TaskParameter="ResourceFilesWithManifestResourceNames" ItemName="_Temporary" />

    </CreateCSharpManifestResourceName>

    <!-- Create manifest names for all culture non-resx resources -->
    <CreateCSharpManifestResourceName
          ResourceFiles="@(EmbeddedResource)"
          RootNamespace="$(RootNamespace)"
          PrependCultureAsDirectory="false"
          Condition="'%(EmbeddedResource.ManifestResourceName)' == '' and '%(EmbeddedResource.WithCulture)' == 'true' and '%(EmbeddedResource.Type)' == 'Non-Resx'">

      <Output TaskParameter="ResourceFilesWithManifestResourceNames" ItemName="_Temporary" />

    </CreateCSharpManifestResourceName>

    <ItemGroup>
      <EmbeddedResource Remove="@(EmbeddedResource)" Condition="'%(EmbeddedResource.ManifestResourceName)' == ''"/>
      <EmbeddedResource Include="@(_Temporary)" />
      <_Temporary Remove="@(_Temporary)" />
    </ItemGroup>

  </Target>

  <PropertyGroup>
    <CoreCompileDependsOn>_ComputeNonExistentFileProperty</CoreCompileDependsOn>
  </PropertyGroup>
  <Target
        Name="CoreCompile"
        Inputs="$(MSBuildAllProjects);
                @(Compile);
                @(_CoreCompileResourceInputs);
                $(ApplicationIcon);
                $(AssemblyOriginatorKeyFile);
                @(ReferencePath);
                @(CompiledLicenseFile);
                @(EmbeddedDocumentation); 
                $(Win32Resource);
                $(Win32Manifest);
                @(CustomAdditionalCompileInputs)"
        Outputs="@(DocFileItem);
                 @(IntermediateAssembly);
                 @(_DebugSymbolsIntermediatePath);
                 @(CustomAdditionalCompileOutputs)"
        DependsOnTargets="$(CoreCompileDependsOn)"
    >
    <ItemGroup>
      <_NonMacroReferencePath Include="@(ReferencePath)" Condition="%(ReferencePath.OutputItemType) != 'macro'" />
      <_MacroProjectReferencePath Include="@(ReferencePath)" Condition="%(ReferencePath.OutputItemType) == 'macro'" />
    </ItemGroup>
    <Ncc
        AdditionalLibPaths="$(AdditionalLibPaths)"
        CheckIntegerOverflow="$(CheckIntegerOverflow)"
        CompilerPath="$(Nemerle)"
        CompilerStackSize="$(CompilerStackSize)"
        CustomArguments="$(CustomArguments)"
        DefineConstants="$(DefineConstants)"
        DisabledWarnings="$(_DisabledWarnings)"
        DocumentationFile="@(DocFileItem)"
        EmitDebugInformation="$(DebugSymbols)"
        EnabledWarnings="$(EnabledWarnings)"
        GreedyReferences="$(GreedyReferences)"
        IndentationSyntax="$(IndentationSyntax)"
        KeyFile="$(KeyOriginatorFile)"
        MacroReferences="@(_MacroProjectReferencePath);@(MacroReferencePath)"
        NoLogo="$(NoLogo)"
        NoStdLib="$(NoStdLib)"
        NoStdMacros="$(NoStdMacros)"
        Optimize="$(Optimize)"
        OutputAssembly="@(IntermediateAssembly)"
        Platform="$(PlatformTarget)"
        ProjectPath="$(MSBuildProjectFullPath)"
        References="@(_NonMacroReferencePath)"
        Resources="@(ManifestResourceWithNoCulture);@(ManifestNonResxWithNoCultureOnDisk);@(CompiledLicenseFile)"
        ResponseFiles="$(CompilerResponseFile)"
        RootNamespace="$(RootNamespace)"
        RunDebugger="$(RunDebugger)"
        Sources="@(Compile)"
        TargetType="$(OutputType)"
        ToolPath="$(CscToolPath)"
        TreatWarningsAsErrors="$(TreatWarningsAsErrors)"
        WarningLevel="$(WarningLevel)"
        Win32Resource="$(Win32Resource)" />
    <ItemGroup>
      <_CoreCompileResourceInputs Remove="@(_CoreCompileResourceInputs)" />
    </ItemGroup>
    <CallTarget Targets="$(TargetsTriggeredByCompilation)" Condition="'$(TargetsTriggeredByCompilation)' != ''"/>
  </Target>

</Project>
